---
title: Global Child Mortality Trends
author: John Hickey
date: 27 April, 2025
format:
  html:
    self-contained: false
    embed-resources: false
    toc: true
    toc-depth: 2
    theme: flatly
    number-sections: true
    code-fold: true
    code-tools: true
    page-layout: full
jupyter: python3
---

<div style="text-align:center; margin-top:20px;">

<h1 style="font-size:3.5em; color:#003366; text-shadow: 2px 2px 5px #b3cde0;">
  Global Child Mortality Trends
</h1>

<h2 style="font-size:2.2em; color:#005a9c; text-shadow: 1px 1px 3px #cce6ff;">
  and Influencing Factors
</h2>

</div>

<div style="
     border:3px solid #004080;
     background-color:#DDEEFF;
     padding:20px;
     border-radius:12px;
     font-family:Georgia, serif;
     color:#002244;
     margin-bottom:1.5em;
">
  <p style="font-size:2.2em; font-weight:bold; text-align:center; margin:0;">
    The Shocking Truth.
  </p>
  
  <div style="text-align:center; margin:15px 0;">
      
   <img src="images/Child.jpg" alt="African child" style="max-width:40%; border-radius:8px; box-shadow:0 4px 8px rgba(0,0,0,0.2);">
   
  </div>
  
  <p style="font-size:1.1em; line-height:1.5; margin-top:0.5em;">
    Children are not afforded the same opportunities for survival on a global scale. Four out of five children perish before the age of five, with Sub-Saharan Africa (57 %) and South Asia (26 %) experiencing the highest rates of child mortality. In these two regions, only three out of five births are live deliveries. Wealth is also correlated with survival, as twice as many children from impoverished households die before the age of five as those from wealthy families.
  </p>
</div>

```{python}
import pandas as pd
import itertools
import plotly.express as px

df1 = pd.read_csv('unicef_data.csv').rename(columns={
    'Country ': 'country',
    'Year': 'year',
    'Mortality Rate per 1,000 infants aged 1 month': 'infant_mortality_rate'
})
df1['year'] = df1['year'].astype(int)
df1['country'] = df1['country'].str.strip()

# Create full country-year combinations for animation
countries = sorted(df1['country'].unique())
years = list(range(1980, 2023))
full_index = list(itertools.product(countries, years))
full_df = pd.DataFrame(full_index, columns=['country','year'])

# Merge with actual data
full_df = full_df.merge(
    df1[['country','year','infant_mortality_rate']],
    on=['country','year'], how='left'
)

# Create animated choropleth map
fig = px.choropleth(
    full_df,
    locations='country',
    locationmode='country names',
    color='infant_mortality_rate',
    hover_name='country',
    animation_frame='year',
    animation_group='country',
    projection='natural earth',
    category_orders={'year': years},
    title='<b><u>Infant Mortality Rate Over Time (1980‚Äì2022)</u></b>',
    color_continuous_scale=px.colors.sequential.Reds,
    labels={'infant_mortality_rate': 'Infant Mortality (per 1 000)'}
)

fig.update_layout(
    title_x=0.5,                    # center the title
    title_font=dict(                # adjust font settings
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    )
)

# Style map: ocean and land colors
fig.update_geos(
    showocean=True,
    oceancolor='rgb(0, 105, 148)',
    showland=True,
    landcolor='white'
)

# Colorbar title vertical with dynamic scaling per frame
def_colorbar = dict(title='Deaths per 1,000 Infants', title_side='right')
fig.update_layout(
    height=700,
    width=1100,
    margin=dict(l=0, r=0, t=50, b=0),
    coloraxis_colorbar=def_colorbar
)

# Animation speed
if fig.layout.updatemenus:
    btn = fig.layout.updatemenus[0].buttons[0]
    btn.args[1]['frame']['duration'] = 500
    btn.args[1]['transition']['duration'] = 300

fig.show()
```


<div style="
     border:2px solid #005A9C;
     background-color:#E6F4FF;
     padding:20px;
     border-radius:10px;
     font-family:Arial, sans-serif;
     color:#03396C;
">

  <h2 style="text-align:center; color:#005A9C; margin-top:0; font-size:2em;">
    A Global Journey in Shades of Red: Infant Mortality (1980‚Äì2022)
  </h2>

  <h3 style="color:#005A9C; margin-bottom:0.5em;">Today‚Äôs Snapshot (2022)</h3>
  <p>On the map‚Äôs final frame‚Äî2022‚Äîwe confront a world of progress and persistence:</p>
  <ul>
    <li><strong>Niger (‚âà86 ‚Ä∞):</strong> Still the darkest red, reflecting entrenched malnutrition and fragile health services that leave one in twelve newborns at risk of not surviving their first month.</li>
    <li><strong>Somalia (‚âà82 ‚Ä∞) & Chad (‚âà75 ‚Ä∞):</strong> Conflict and displacement perpetuate high mortality despite modest economic gains‚Äîshowing how stability is as crucial as wealth.</li>
    <li><strong>Central African Republic (‚âà73 ‚Ä∞) & Sierra Leone (‚âà71 ‚Ä∞):</strong> Emerging from crises yet trapped in a high-mortality band, underscoring that recovery must be paired with sustained health-system rebuilds.</li>
    <li><strong>South Asia‚Äôs Hotspots:</strong> Afghanistan (~65 ‚Ä∞) and Pakistan (~55 ‚Ä∞) remain deeper shades of red than their regional peers, highlighting gaps in vaccination coverage and maternal care.</li>
    <li><strong>Bright Spots:</strong> Rwanda (~25 ‚Ä∞), Bangladesh (~22 ‚Ä∞), and Vietnam (~14 ‚Ä∞) stand out in pastel hues, emblematic of how targeted immunization drives and primary-care networks can rewrite national trajectories.</li>
  </ul>

  <h3 style="color:#005A9C; margin-bottom:0.5em;">1980 vs. 2022: Dramatic Shifts</h3>
  <!-- ‚Ä¶rest of content unchanged‚Ä¶ -->

</div>

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import math

country_replacements = {
    'United States': 'United States of America',
    'Czechia': 'Czech Republic',
    'Bahamas': 'The Bahamas',
    'Congo, the Democratic Republic of the': 'Democratic Republic of the Congo',
    'Micronesia, Federated States of': 'Micronesia',
    'Macedonia, the former Yugoslav Republic of': 'North Macedonia',
    'Palestinian Territory, Occupied': 'Palestine'
}

df = pd.read_csv('unicef_data.csv', skipinitialspace=True)
df.columns = df.columns.str.strip()
df['Year'] = pd.to_numeric(df['Year'], errors='coerce')

meta = pd.read_csv('unicef_metadata.csv', skipinitialspace=True)
meta.columns = meta.columns.str.strip()
meta['Year'] = pd.to_numeric(meta['Year'], errors='coerce')

df_2022 = df[df['Year'] == 2022].copy()
meta_2022 = meta[meta['Year'] == 2022].copy()

# Apply country name replacements
df_2022['Country'] = df_2022['Country'].replace(country_replacements)
meta_2022['Country'] = meta_2022['Country'].replace(country_replacements)

# Merge in Population and Life expectancy
df_2022 = df_2022.merge(
    meta_2022[
        ['Country',
         'Population, total',
         'Life expectancy at birth, total (years)']
    ],
    on='Country',
    how='left'
)

# Rename columns for clarity
df_2022 = df_2022.rename(columns={
    'Mortality Rate per 1,000 infants aged 1 month': 'Infant Mortality Rate',
    'Population, total': 'Population',
    'Life expectancy at birth, total (years)': 'Life Expectancy'
})

# Convert columns to numeric and drop rows with missing mortality data
for col in ['Infant Mortality Rate', 'Population', 'Life Expectancy']:
    df_2022[col] = pd.to_numeric(df_2022[col], errors='coerce')
df_2022 = df_2022.dropna(subset=['Infant Mortality Rate'])

# Create choropleth map visualization
fig = px.choropleth(
    df_2022,
    locations='Country',
    locationmode='country names',
    color='Infant Mortality Rate',
    color_continuous_scale='OrRd',
    title='üåçüöÄ Infant Mortality Rate per 1,000 Infants (2022) - Satellite View',
    labels={'Infant Mortality Rate': 'Infant Mortality Rate'},
    hover_name='Country',
    hover_data={
        'Infant Mortality Rate': ':.2f',
        'Population': ':.0f',
        'Life Expectancy': ':.1f',
        'Year': False
    },
    template='plotly_dark'
)

# Add star-like points for space effect
fig.add_trace(go.Scattergeo(
    lon=np.random.uniform(-180, 180, 500),
    lat=np.random.uniform(-90, 90, 500),
    mode='markers',
    marker=dict(size=1, color='white', opacity=0.3),
    showlegend=False
))

# Create satellite orbit path
orbit_lon = 70  # Orbit longitudinal center
orbit_lat = 30  # Orbit latitudinal center
orbit_radius_lon = 30
orbit_radius_lat = 15
theta = np.linspace(0, 2*np.pi, 100)
orbit_lons = orbit_lon + orbit_radius_lon * np.cos(theta)
orbit_lats = orbit_lat + orbit_radius_lat * np.sin(theta)

# Add orbit path
fig.add_trace(go.Scattergeo(
    lon=orbit_lons,
    lat=orbit_lats,
    mode='lines',
    line=dict(width=1, color='rgba(100,150,255,0.3)'),
    showlegend=False
))

# Add satellite at a position on the orbit
satellite_pos = 45  # Position along orbit (in degrees)
satellite_lon = orbit_lon + orbit_radius_lon * np.cos(np.radians(satellite_pos))
satellite_lat = orbit_lat + orbit_radius_lat * np.sin(np.radians(satellite_pos))

# Create a simple satellite icon using a custom marker
fig.add_trace(go.Scattergeo(
    lon=[satellite_lon],
    lat=[satellite_lat],
    mode='markers+text',
    text=['üõ∞Ô∏è'],
    textfont=dict(size=30),
    textposition='middle center',
    marker=dict(size=0),  # Hide the marker, only show the text emoji
    showlegend=False
))

# Configure map projection and appearance
fig.update_geos(
    projection_type='orthographic',
    center=dict(lon=20, lat=10),
    projection_rotation=dict(lon=20, lat=10, roll=0),
    showframe=False,
    showcoastlines=True,
    coastlinecolor='rgba(255,255,255,0.2)',
    bgcolor='black',
    lakecolor='rgba(0,50,100,0.3)',
    showland=True,
    landcolor='rgb(10,30,50)',
    showocean=True,
    oceancolor='rgba(0,30,80,0.8)',
    subunitcolor='gray'
)

# Update layout with space-themed styling
fig.update_layout(
    paper_bgcolor='black',
    plot_bgcolor='black',
    coloraxis_colorbar=dict(
        title='Infant Mortality Rate',
        tickformat='.1f',
        len=0.75,
        thickness=20,
        outlinewidth=1,
        outlinecolor='white',
        title_side='right'
    ),
    title_font=dict(size=28, family='Arial', color='white'),
    margin=dict(l=0, r=0, t=80, b=0),
    annotations=[
        # Original citation
        dict(
            text="Data: UNICEF, 2022 | Visualization: Planetary Science Division",
            x=0.01, y=0.01, xref='paper', yref='paper',
            showarrow=False,
            font=dict(size=12, color='white'),
            bgcolor='rgba(0,0,0,0.5)'
        )
    ]
)

# Display the figure
fig.show()
```

<div style="border: 2px solid #1F77B4; background-color: #e6f7ff; border-radius: 8px; padding: 1.5em;">

<h2 style="text-align: center; font-size: 2em; color: #1F77B4; margin-bottom: 0.5em;">
  üåçüöÄ Figure: Infant Mortality Rate per 1,000 Infants (2022) ‚Äì Satellite View
</h2>

---

The orthographic choropleth above reveals the stark global disparities in infant mortality around the world. By mapping each country‚Äôs 2022 rate‚Äîshaded from light amber (low rates) to deep red (high rates)‚Äîthe visualization captures both the immense progress achieved in many regions and the persistent challenges that remain.

### <span style="color:#1F77B4;"> Overarching Global Landscape</span>  
- **Low-Mortality ‚ÄúGreen Zone‚Äù:** Much of Europe, East Asia, North America, and Australasia appear in the palest amber‚Äîoften fewer than **5 deaths per 1,000 infants**. These countries have near-universal immunization and advanced neonatal care.  
- **Intermediate Rates:** Large swathes of Latin America, North Africa, and parts of South-East Asia cluster around **5‚Äì15 per 1,000**, reflecting substantial gains but ongoing rural and urban disparities.  
- **High-Mortality ‚ÄúRed Belt‚Äù:** The deepest reds emerge over sub-Saharan Africa‚Äîespecially in the Sahel, Horn, and Central Africa‚Äîwhere rates often exceed **50‚Äì60 per 1,000**, driven by conflict, poverty, and fragmented health systems.

### <span style="color:#FF7F0E;"> Regional Deep Dives</span>  
- **Sub-Saharan Africa:**  
  - The Democratic Republic of the Congo, Niger, Chad, and Somalia sit at the top (60+). Political instability and weak infrastructure fuel these high rates.  
  - Rwanda and Ethiopia, in warmer oranges (25‚Äì40), showcase the impact of recent community-health initiatives and vaccination drives.  
- **South Asia:**  
  - India and Pakistan appear in mid-reds (30‚Äì45), with subnational pockets lagging behind national averages. Neonatal resuscitation and maternal-nutrition programs are key to further gains.  
- **Latin America & the Caribbean:**  
  - Most countries are pale-amber (5‚Äì10), yet Haiti (~30) stands out, highlighting the fragility of its health infrastructure.  
- **East Asia & Pacific:**  
  - China, Japan, South Korea, and Australia occupy the lightest shades (<3), a testament to decades of investment in perinatal care. Small Pacific states vary more due to geographic dispersion.

### <span style="color:#9467BD;"> Correlations with Population & Life Expectancy</span>  
Hovering reveals that **high-mortality nations** often have **lower life expectancy** and **younger, faster-growing populations**. Conversely, **low-mortality countries** enjoy **higher life expectancy** (75+ years) and aging demographics‚Äîunderscoring the lifelong benefits of strong early-life health.

### <span style="color:#8C564B;"> Policy Implications & Strategic Priorities</span>  
1. **üéØ Target High-Burden Zones:** Focus on the Sahel, Horn of Africa, and parts of South Asia with mobile clinics and community-health workers.  
2. **üõ°Ô∏è Build Resilient Systems:** Strengthen facilities to withstand conflicts, climate shocks, and pandemics via tele-medicine and decentralized care.  
3. **üìà Granular Data & Accountability:** Improve vital-registration systems and subnational dashboards to identify and address local hotspots.  
4. **ü§ù Cross-Sector Collaboration:** Unite water, sanitation, nutrition, and education efforts with medical programs to break cycles of poverty and ill health.

---

</div>

```{python}
import requests
from io import BytesIO
from PIL import Image
import pycountry
import plotly.graph_objects as go

df = pd.read_csv("unicef_additional.csv")
df.columns = df.columns.str.strip()
df["Country"] = df["Country"].str.strip()

df2022 = (
    df[(df.Year == 2022) & (df.Gender == "Total")]
      [["Country", "Mortality rate per 1,000 children aged 5"]]
      .rename(columns={"Mortality rate per 1,000 children aged 5": "Mortality5"})
)

top20 = (
    df2022.nlargest(20, "Mortality5")
           .sort_values("Mortality5", ascending=True)
           .reset_index(drop=True)
)

# 2) Load metadata for birth rate crude & life expectancy
meta = pd.read_csv("unicef_metadata.csv")
meta.columns = meta.columns.str.strip()
meta["Country"] = meta["Country"].str.strip()
meta22 = meta[meta.Year == 2022].copy()

# Convert birth rate crude and life expectancy to numeric
meta22.loc[:, "BirthRate"] = pd.to_numeric(meta22["Birth rate, crude (per 1,000 people)"], errors="coerce")
meta22.loc[:, "LifeExp"] = pd.to_numeric(meta22["Life expectancy at birth, total (years)"], errors="coerce")

# Merge metadata into top20 on Country
top20 = top20.merge(
    meta22[["Country", "BirthRate", "LifeExp"]],
    on="Country",
    how="left"
)

# 3) ISO2 lookup & sample flag color for bars
def iso2(name):
    try:
        return pycountry.countries.lookup(name).alpha_2.lower()
    except:
        return None

def sample_flag_color(code):
    url = f"https://flagcdn.com/40x30/{code}.png"
    img = Image.open(BytesIO(requests.get(url).content)).convert("RGBA")
    r, g, b, _ = img.resize((1,1), Image.LANCZOS).getpixel((0,0))
    return f"#{r:02x}{g:02x}{b:02x}"

colors, flags = [], []
for c in top20["Country"]:
    code2 = iso2(c)
    if code2:
        colors.append(sample_flag_color(code2))
        flags.append(f"https://flagcdn.com/20x15/{code2}.png")
    else:
        colors.append("lightgray")
        flags.append(None)

top20["color"] = colors
top20["flag_url"] = flags

# 4) Plotly bar chart with birth rate & life expectancy in hover
fig = go.Figure(
    go.Bar(
        x=top20["Mortality5"],
        y=top20["Country"],
        orientation="h",
        marker_color=top20["color"],
        customdata=top20[["BirthRate", "LifeExp"]],
        hovertemplate=(
            "<b>%{y}</b><br>"
            "Mortality: %{x:.1f} per 1,000<br>"
            "Birth rate: %{customdata[0]:.1f} per 1,000<br>"
            "Life exp: %{customdata[1]:.1f} yrs<br>"
            "<extra></extra>"
        )
    )
)

# 5) Overlay mini-flags
images = []
for _, row in top20.iterrows():
    if row.flag_url:
        images.append(dict(
            source=row.flag_url,
            xref="x", yref="y",
            x=row["Mortality5"] + 2,
            y=row["Country"],
            xanchor="left", yanchor="middle",
            sizex=3, sizey=0.4
        ))
fig.update_layout(images=images)

# Add global reference line as an actual trace with tooltip
global_avg = 37.7  # Global average mortality rate for children under 5
fig.add_trace(
    go.Scatter(
        x=[global_avg, global_avg],
        y=[-0.5, len(top20)-0.5],
        mode="lines",
        line=dict(color="rgba(255, 0, 0, 0.8)", width=3, dash="dash"),
        name="Global Average",
        hoverinfo="text",
        hovertext=f"Global Average: {global_avg} deaths per 1,000 children",
    )
)

# Add clearer annotation for the reference line
fig.add_annotation(
    x=global_avg,
    y=len(top20),
    text="Global Average",
    showarrow=True,
    arrowhead=2,
    arrowsize=1,
    arrowwidth=2,
    arrowcolor="rgba(255, 0, 0, 0.8)",
    ax=0,
    ay=-30,
    font=dict(size=14, color="rgba(255, 0, 0, 0.8)"),
    bgcolor="rgba(255, 255, 255, 0.8)",
    bordercolor="rgba(255, 0, 0, 0.8)",
    borderwidth=1,
    borderpad=4
)

max_val = top20["Mortality5"].max()
fig.update_layout(
    title='<b><u>Countries With The Highest Rate of Child Mortality (5 Years of Age)</u></b>',
    title_x=0.5,
    title_font=dict(
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    ),
    xaxis_title="Deaths per 1,000 Children at Age 5",
    yaxis_title="Country",
    template="simple_white",
    width=900,
    height=600
)

fig.update_xaxes(range=[0, max_val * 1.15])
fig.show()
```

<div style="
    max-width:900px;
    margin: 0 auto;
    box-sizing:border-box;
    background-color:#F5F9FF;
    border:2px solid #005A9C;
    border-radius:10px;
    padding:20px;
    font-family:Arial, sans-serif;
    color:#002244;
    margin-bottom:20px;
">

  <h2 style="text-align:center; color:#005A9C; margin-top:0; font-size:1.8em;">
    The Hardest Places to Reach Age 5 in 2022
  </h2>

  <p>
    While neonatal mortality often commands the spotlight, death before a fifth birthday remains a critical indicator of sustained health system performance, nutrition, and social stability. This analysis presents the 20 countries with the highest child-5 mortality rates in 2022, interrogating not only the raw figures but the underlying drivers and regional patterns. Every country in this visualization exceeds the global average of 37.7 deaths per 1,000 children.
  </p>

  <h3 style="color:#005A9C;">Key Findings</h3>

  <ul>
    <li><strong>Highest Burden Concentration:</strong> Somalia (74.3 ‚Ä∞) and South Sudan (71.2 ‚Ä∞) reflect protracted conflict, displacement, and weakened health systems‚Äîboth nearly double the global average.</li>
    <li><strong>Regional Clustering:</strong> West & Central Africa account for 9 of the top 10 countries, highlighting shared challenges of underinvestment, climate shocks, and political fragility. All countries in this region exceed the global average by at least 50%.</li>
    <li><strong>Notable Divergences:</strong> Chad (60.2 ‚Ä∞) and Niger show that community midwifery and modest program gains can begin to decelerate mortality5 even under resource constraints. Rwanda (~25 ‚Ä∞) and Uganda (~42 ‚Ä∞) have halved mortality5 since 2012 through vaccination, growth-monitoring, and decentralized care.</li>
  </ul>

  <p>
    The red dashed line at 37.7 deaths per 1,000 children represents the global average mortality rate for children at age 5. This reference point provides critical context‚Äîall 20 countries featured exceed this threshold, with the most severe cases more than doubling this already sobering global figure.
  </p>

  <p>
    High child-5 mortality indicates gaps in post-neonatal interventions‚Äînutrition supplementation, malaria prophylaxis, and early childhood development programs‚Äîoften failing to reach the most vulnerable. Gender and equity considerations further compound risk, as impoverished contexts can disproportionately limit girls‚Äô access to care and education.
  </p>

  <h3 style="color:#005A9C;">Policy Implications</h3>

  <ul>
    <li><strong>Integrated Programming:</strong> Align WASH, nutrition, and immunization under a unified framework spanning ‚ÄúFirst 1,000 Days‚Äù through ‚ÄúSecond 1,000 Days.‚Äù</li>
    <li><strong>Conflict-Sensitive Delivery:</strong> In Somalia and South Sudan, leverage local NGOs and mobile health units to maintain continuity of care.</li>
    <li><strong>Data-Driven Adaptation:</strong> Employ rapid household surveys to detect mortality spikes from droughts or outbreaks and deploy rapid-response task forces.</li>
    <li><strong>Bridge the Gap:</strong> Target interventions to help high-burden countries move toward and eventually below the global average reference line.</li>
  </ul>

  <p>
    Child-5 mortality remains alarmingly high in a concentrated set of countries. The stark contrast between upper echelon nations (Somalia, South Sudan) and near-success stories (Rwanda, Uganda) affirms that targeted, context-specific interventions can dramatically alter outcomes. Realizing SDG 3.2‚Äîending preventable deaths of children under 5‚Äîwill demand both scaling proven interventions and innovating delivery in fragile, high-burden settings.
  </p>

  <blockquote style="font-style:italic; color:#004080; border-left:4px solid #005A9C; padding-left:15px; margin-top:20px;">
    ‚ÄúReaching age five should be the norm, not the exception. This chart signals where the world must intensify efforts to make survival not a privilege of geography, but a universal right. The global average line reminds us how far we‚Äôve come‚Äîand how far these 20 countries still have to go.‚Äù
  </blockquote>

  <p style="font-size:0.9em; color:#555;">
    <em>Data source:</em> UNICEF 2022 child-5 mortality. Global average: 37.7 deaths per 1,000 children.
  </p>

</div>

<div style="text-align:center; margin:20px 0;">
  <img src="images/Somalia.jpg" alt="Somalian mother and baby" style="max-width:60%; border-radius:5px;">
  <p style="font-style:italic; margin-top:8px; color:#555;">A Somalian mother tenderly holds her infant, embodying both the universal bond of motherhood and the stark realities of child survival in regions with high infant mortality.</p>
</div>

```{python}
import pandas as pd
import plotly.express as px

# Load and clean data
df = pd.read_csv("unicef_additional.csv")
df.columns = df.columns.str.strip()

# Prepare 2022 data
df2022 = df[df["Year"] == 2022]
total = (
    df2022[df2022["Gender"] == "Total"]
    .sort_values("Mortality rate per 1,000 children aged 5", ascending=False)
    .head(20)
)
top20 = total["Country"].tolist()

# Melt data for Male/Female
df_melt = df2022[
    df2022["Country"].isin(top20) & df2022["Gender"].isin(["Male", "Female"])
].copy()

# Create 2D stacked bar chart
fig = px.bar(
    df_melt,
    x="Country",
    y="Mortality rate per 1,000 children aged 5",
    color="Gender",
    category_orders={"Country": top20},
    color_discrete_map={
        "Female": "pink",
        "Male": "blue"
    },
    hover_data={
        "Mortality rate per 1,000 children aged 5": True,
        "Gender": True,
        "Country": False
    },
)

# Layout updates
fig.update_layout(
    barmode="stack",  # Default to stacked
    title='<b><u>Gender Disparity in Child Mortality Rate</u></b>',
    title_x=0.5,
    title_font=dict(
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    ),
    xaxis_tickangle=-45,
    yaxis_title="Mortality rate per 1,000 children aged 5",
    template="simple_white",
    width=1000,
    height=600,
    updatemenus=[
        dict(
            type="buttons",
            direction="right",
            buttons=list([
                dict(
                    label="Stacked",
                    method="relayout",
                    args=[{"barmode": "stack"}]
                ),
                dict(
                    label="Grouped",
                    method="relayout",
                    args=[{"barmode": "group"}]
                )
            ]),
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.5,
            xanchor="center",
            y=1.15,
            yanchor="top"
        )
    ]
)

fig.show()
```

<div style="
    max-width:900px;
    margin: 0 auto;
    border:2px solid #4682B4;
    background-color:#f0f8ff;
    padding:20px;
    border-radius:8px;
    font-family:Arial, sans-serif;
    color:#002244;
">

  <h2 style="color:#4682B4; margin-top:0; font-size:1.8em;">
    Gender Disparity in Child Mortality Rate (2022)
  </h2>

  <h3 style="margin-top:0.5em;">When Boys and Girls Face Different Odds: Gender Gaps in Under-5 Mortality (2022)</h3>

  <p>
    This interactive stacked bar chart unveils how gender shapes child survival in the 20 countries with the highest under-5 mortality at age five‚Äîrevealing not just where lives are lost, but which children are most at risk.
  </p>

  <h4 style="color:#4682B4;">Top Five Hotspots by Combined Mortality</h4>

  <table style="width:100%; border-collapse:collapse; margin-bottom:1em;">
    <thead>
      <tr style="background-color:#dbefff; color:#003366;">
        <th style="padding:8px; border:1px solid #ccc;">Rank</th>
        <th style="padding:8px; border:1px solid #ccc;">Country</th>
        <th style="padding:8px; border:1px solid #ccc;">Total Rate (‚Ä∞)</th>
        <th style="padding:8px; border:1px solid #ccc;">Female (‚Ä∞)</th>
        <th style="padding:8px; border:1px solid #ccc;">Male (‚Ä∞)</th>
      </tr>
    </thead>
    <tbody>
      <tr><td style="padding:8px; border:1px solid #ccc;">1</td><td><strong>Somalia</strong></td><td>67.1</td><td>62.7</td><td>71.3</td></tr>
      <tr><td style="padding:8px; border:1px solid #ccc;">2</td><td><strong>South Sudan</strong></td><td>58.5</td><td>58.1</td><td>58.9</td></tr>
      <tr><td style="padding:8px; border:1px solid #ccc;">3</td><td><strong>Sierra Leone</strong></td><td>58.4</td><td>56.6</td><td>60.2</td></tr>
      <tr><td style="padding:8px; border:1px solid #ccc;">4</td><td><strong>Niger</strong></td><td>57.1</td><td>55.4</td><td>58.8</td></tr>
      <tr><td style="padding:8px; border:1px solid #ccc;">5</td><td><strong>Central African Republic</strong></td><td>56.3</td><td>54.2</td><td>58.4</td></tr>
    </tbody>
  </table>

  <blockquote style="font-style:italic; color:#004080; border-left:4px solid #4682B4; padding-left:15px; margin:1em 0;">
    ‚ÄúThe gap between pink and blue isn‚Äôt just color‚Äîit‚Äôs a measure of how societal, biological, and systemic factors differently shape the odds for boys and girls.‚Äù
  </blockquote>

  <h4 style="color:#4682B4;">What the Chart Reveals</h4>
  <ul>
    <li><strong>Persistent Male Disadvantage:</strong> In every one of these countries, boys face higher mortality rates than girls‚Äîon average about <strong>3 ‚Ä∞</strong> higher‚Äîhighlighting a universal trend where male infants and young children are biologically and socially more vulnerable.</li>
    <li><strong>Stark vs. Narrow Gaps:</strong> Somalia‚Äôs 8.6 ‚Ä∞ gap signals urgent need for male‚Äêfocused outreach, while South Sudan‚Äôs near-parity reflects systemic failure affecting both genders equally.</li>
    <li><strong>Regional Clusters:</strong> West and Central African nations dominate the top ranks, underscoring how conflict, poverty, and weak health systems shape gendered outcomes.</li>
  </ul>

  <h4 style="color:#4682B4;">From Insight to Action</h4>
  <ol>
    <li><strong>Design Male-Sensitive Programs:</strong> In countries with large male excess mortality, address barriers to boys‚Äô nutrition, immunization, and care-seeking.</li>
    <li><strong>Systemic Upgrades:</strong> Where both sexes are at high risk, invest in clean water, sanitation, and basic healthcare access.</li>
    <li><strong>Track Progress by Gender:</strong> Monitor year-on-year shifts to ensure equity in health outcomes.</li>
  </ol>

  <p style="font-size:0.9em; color:#555;">
    <em>Data source:</em> UNICEF 2022 under-5 mortality by gender.
  </p>

</div>

```{python}
import pandas as pd
import plotly.graph_objects as go

# Load your data
df = pd.read_csv("unicef_additional.csv")
meta = pd.read_csv("unicef_metadata.csv")

# Clean columns
df.columns = df.columns.str.strip()
df["Country"] = df["Country"].str.strip()
meta.columns = meta.columns.str.strip()
meta["Country"] = meta["Country"].str.strip()

# Filter 2022 and Gender = Total
df2022 = df[(df["Year"] == 2022) & (df["Gender"] == "Total")][["Country", "Mortality rate per 1,000 children aged 5"]]
df2022 = df2022.rename(columns={"Mortality rate per 1,000 children aged 5": "Mortality5"})

meta22 = meta[meta["Year"] == 2022].copy()
meta22["BirthRate"] = pd.to_numeric(meta22["Birth rate, crude (per 1,000 people)"], errors="coerce")
meta22["LifeExp"] = pd.to_numeric(meta22["Life expectancy at birth, total (years)"], errors="coerce")

# Merge
full = df2022.merge(meta22[["Country", "BirthRate", "LifeExp"]], on="Country", how="inner")
full = full.dropna()

# Create 3D Scatter Plot
fig = go.Figure(data=[go.Scatter3d(
    x=full["BirthRate"],
    y=full["LifeExp"],
    z=full["Mortality5"],
    mode='markers',
    marker=dict(
        size=full["BirthRate"] / 3,
        color=full["Mortality5"],
        colorscale="Viridis",
        colorbar=dict(title="Mortality Rate"),
        opacity=0.8,
        line=dict(width=0.5, color='darkgray'),
    ),
    text=full["Country"],
    hovertemplate=(
        "<b>%{text}</b><br>"
        "Birth Rate: %{x:.1f}<br>"
        "Life Expectancy: %{y:.1f}<br>"
        "Mortality5: %{z:.1f}<extra></extra>"
    )
)])

fig.update_layout(
    title="<b>3D View of Birth Rate, Life Expectancy, and Child Mortality (2022)</b>",
    template="simple_white",
    width=1000,
    height=800,
    scene=dict(
        xaxis_title="Birth Rate",
        yaxis_title="Life Expectancy",
        zaxis_title="Child Mortality Rate",
        xaxis=dict(showbackground=True, backgroundcolor="lightgray", gridcolor="white"),
        yaxis=dict(showbackground=True, backgroundcolor="lightgray", gridcolor="white"),
        zaxis=dict(showbackground=True, backgroundcolor="lightgray", gridcolor="white"),
        bgcolor="white"
    ),
    scene_camera=dict(
        eye=dict(x=1.6, y=1.6, z=1.2)  # 3D tilt
    ),
)

fig.show()
```

<div style="
    max-width:900px;
    margin: 0 auto;
    background-color:#e6f2ff;
    border:2px solid #3399ff;
    padding:20px;
    border-radius:10px;
    font-family:Arial, sans-serif;
    color:#002244;
    text-align:center;
">

  <h2 style="color:#3399ff; margin-top:0; font-size:1.8em;">
    üåç 3D Analysis: Birth Rate, Life Expectancy, and Child Mortality (2022)
  </h2>

  <img src="images/Starvation.jpg" alt="Somalia Starvation Crisis" width="400" style="border-radius:6px; margin:15px 0; box-shadow:0 2px 5px rgba(0,0,0,0.1);">

  <p style="font-weight:bold; font-size:1.1em; color:#990000;">
    Somalia is once again on the brink of starvation.
  </p>

</div>

<div style="
    max-width:900px;
    margin: 20px auto;
    background-color:#e6f2ff;
    border:2px solid #3399ff;
    padding:20px;
    border-radius:10px;
    font-family:Arial, sans-serif;
    color:#002244;
    text-align:left;
">

  <p>
    This interactive 3D visualization reveals the complex and often tragic relationship between <strong>birth rates</strong>, <strong>life expectancy</strong>, and <strong>child mortality</strong> around the world.
  </p>

  <ul style="margin-bottom:1.5em;">
    <li><strong>X-axis</strong>: Birth Rate (per 1,000 people)</li>
    <li><strong>Y-axis</strong>: Life Expectancy at Birth (years)</li>
    <li><strong>Z-axis</strong>: Mortality Rate of Children Aged 5 (deaths per 1,000)</li>
  </ul>

  <h3 style="color:#3399ff;">üìä Key Insights</h3>

  <ul>
    <li><strong>Somalia</strong> emerges as a devastating outlier, with a <strong>birth rate above 40</strong>, <strong>life expectancy barely above 55</strong>, and one of the <strong>highest child mortality rates globally</strong>. These factors reflect a deep humanitarian crisis.</li>
    <li>Countries like <strong>Nigeria</strong>, <strong>Chad</strong>, and the <strong>Central African Republic</strong> also suffer from high fertility and fragile systems that exacerbate mortality.</li>
    <li><strong>Life expectancy</strong> remains low in these regions due to poor access to prenatal care, clean water, education, and postnatal services.</li>
    <li>In contrast, countries like <strong>Japan</strong>, <strong>Germany</strong>, and <strong>Australia</strong> show the impact of low birth rates, high life expectancy, and strong investment in healthcare and education.</li>
  </ul>

  <h3 style="color:#3399ff;">‚ö° Deeper Analysis</h3>

  <p>
    A <strong>high birth rate</strong> is not inherently negative, but when paired with <strong>low life expectancy</strong> and <strong>high child mortality</strong>, it often signals systemic failures. In such environments, large families can be a response to expected loss.
  </p>

  <p>
    The 3D chart visualizes this structural inequality ‚Äî a clear divide between the <strong>Global North and South</strong> ‚Äî despite decades of development aid. It underscores how public health is inseparable from issues of <strong>poverty</strong>, <strong>conflict</strong>, <strong>education</strong>, and <strong>climate vulnerability</strong>.
  </p>

  <blockquote style="font-style:italic; color:#004080; border-left:4px solid #3399ff; padding-left:15px; margin:1.5em 0;">
    üí¨ <strong>Conclusion:</strong> The 3D chart makes it clear: <strong>where you are born still largely determines whether you survive childhood</strong>. Immediate humanitarian aid is essential, but only long-term, systemic investments in health, education, and equity will close the survival gap.
  </blockquote>

</div>

```{python}
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from sklearn.linear_model import LinearRegression
import numpy as np

mort = pd.read_csv("unicef_data.csv")
meta = pd.read_csv("unicef_metadata.csv")

mort.columns = mort.columns.str.strip()
meta.columns = meta.columns.str.strip()

mort2022 = mort[mort["Year"] == 2022].copy()
mort2022.rename(columns={"Mortality Rate per 1,000 infants aged 1 month": "Mortality"}, inplace=True)

meta2022 = meta[meta["Year"] == 2022].copy()

# CHANGE: Use GNI instead of GDP
meta2022["GNI_pc"] = (
    meta2022["GNI (current US$)"]   # <- Adjusted here
    .str.replace(r"[\$,]", "", regex=True)
    .astype(float)
)
meta2022["Population"] = meta2022["Population, total"].astype(float)

african_countries = [
    "Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
    "Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
    "Congo, the Democratic Republic of the", "Congo", "Cote d'Ivoire",
    "Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini",
    "Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", "Kenya",
    "Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
    "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
    "Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
    "South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda",
    "Zambia", "Zimbabwe"
]

df = pd.merge(
    mort2022[mort2022["Country"].isin(african_countries)][["Country", "Mortality"]],
    meta2022[meta2022["Country"].isin(african_countries)][["Country", "GNI_pc", "Population"]],
    on="Country"
).dropna()

fig = px.scatter(
    df,
    x="GNI_pc",  # <-- CHANGED from GDP_pc to GNI_pc
    y="Mortality",
    size="Population",
    color="Mortality",
    color_continuous_scale="Reds",
    size_max=60,
    hover_name="Country",
    hover_data={"GNI_pc": ":.0f", "Mortality": ":.1f", "Population": ":.0f"},
    labels={"GNI_pc": "GNI per Capita (2015 US$)", "Mortality": "Infant Mortality (per 1‚ÄØ000)"},
    title="Infant Mortality vs. GNI per Capita for African Countries (2022)",
)

fig.update_xaxes(type="log")

X = np.log(df["GNI_pc"].values).reshape(-1, 1)
y = df["Mortality"].values
model = LinearRegression().fit(X, y)
x_range = np.linspace(X.min(), X.max(), 100)
y_pred = model.predict(x_range.reshape(-1, 1))

resid = y - model.predict(X)
sigma = resid.std(ddof=1)
ci = 1.96 * sigma
upper = y_pred + ci
lower = y_pred - ci

fig.add_trace(go.Scatter(
    x=np.exp(x_range),
    y=y_pred,
    mode="lines",
    name="Trendline",
    line=dict(color="black", dash="dash")
))
fig.add_trace(go.Scatter(
    x=np.concatenate([np.exp(x_range), np.exp(x_range)[::-1]]),
    y=np.concatenate([upper, lower[::-1]]),
    fill="toself",
    fillcolor="rgba(0,0,0,0.1)",
    line=dict(color="rgba(255,255,255,0)"),
    hoverinfo="skip",
    showlegend=False,
))

fig.update_layout(
    title='<b><u>Infant Mortality vs. GNI per Capita for African Countries (2022)</u></b>',
    title_x=0.5,
    title_font=dict(
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    ),
    template="simple_white",
    width=900,
    height=550,
    yaxis_title="Infant Mortality (per 1 000)",
    legend=dict(title="", yanchor="top", y=0.99, xanchor="left", x=0.01)
)

fig.show()
```

<div style="border: 3px solid #1F77B4; background-color: #E6F2FF; padding: 20px; border-radius: 10px; color: black; font-size: 16px;">
  <h3 style="text-align: center; text-decoration: underline; color: #004080; margin-bottom: 20px;">Gross National Income per Capita vs. African Infant Mortality</h3>
  
  <p>The scatter plot reveals a pronounced <strong><span style="color: #9C27B0;">inverse relationship</span></strong> between <strong>GNI per capita</strong> and <strong>infant mortality</strong>: generally, the poorer a country, the higher the infant mortality rate. However, the analysis uncovers <em style="color: #D32F2F;">severe disparities</em> that suggest economic wealth alone does not fully protect children's survival.</p>
  
  <p>Countries such as <strong>Nigeria</strong>, <strong>Chad</strong>, <strong>Central African Republic</strong>, and <strong>Somalia</strong> stand out with <strong><em style="color: #D32F2F;">alarmingly high infant mortality rates</em></strong>, despite varying income levels. <strong>Nigeria</strong>, notably Africa's largest economy by total GDP, exhibits one of the highest infant mortality rates, exposing <strong>deep inequalities in wealth distribution, governance failure, and healthcare system fragility</strong>.</p>
  
  <p>Conversely, countries like <strong><span style="color: #2E7D32;">Mauritius</span></strong>, <strong><span style="color: #2E7D32;">Seychelles</span></strong>, and <strong><span style="color: #2E7D32;">Tunisia</span></strong> demonstrate <strong><em style="color: #2E7D32;">exceptional performance</em></strong>, achieving low mortality rates even with moderate GNI figures compared to richer nations. These successes highlight that <strong>strategic investments in maternal health, education, and public health systems</strong> can <em style="color: #1565C0;">outperform mere economic growth</em>.</p>
  
  <p>The dispersion of points around the regression line also signals that <strong><span style="color: #E65100;">regional instability, conflict, and weak institutions</span></strong> significantly worsen outcomes. <strong>South Sudan</strong> and <strong>Somalia</strong>, for example, suffer from persistent humanitarian crises that are not captured by GNI metrics alone.</p>
  
  <p>In summary, while higher <strong>GNI per capita</strong> tends to correlate with <strong>lower infant mortality</strong>, the data compellingly argue that <strong><em style="color: #1565C0;">political stability, equitable healthcare access, and targeted social investments</em></strong> are critical determinants of child survival in Africa ‚Äî <span style="font-style: italic; color: #4A148C;">far beyond economic figures alone</span>.</p>
</div>

```{python}
import numpy as np
import plotly.express as px

african_countries = [
    'Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo', 
    'Congo, Democratic Republic of the', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 
    'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', 
    'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa', 'South Sudan', 'Sudan', 
    'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe'
]

# Load data
mort = pd.read_csv('unicef_data.csv')
gdp = pd.read_csv('unicef_metadata.csv')

# Clean column names (remove leading/trailing spaces)
mort.columns = mort.columns.str.strip()
gdp.columns = gdp.columns.str.strip()

country_col = 'Country'  # Change if needed, e.g., 'Country Name'
year_col = 'Year'        # Change if needed

# Filter for African countries and make copies
mort_africa = mort[mort[country_col].isin(african_countries)].copy()
gdp_africa = gdp[gdp[country_col].isin(african_countries)].copy()

# Clean GDP and population columns
gdp_africa['GDP per capita (constant 2015 US$)'] = pd.to_numeric(
    gdp_africa['GDP per capita (constant 2015 US$)'].replace(r'[\$,]', '', regex=True), errors='coerce'
)
gdp_africa['Population, total'] = pd.to_numeric(
    gdp_africa['Population, total'].replace(r'[\$,]', '', regex=True), errors='coerce'
)

# Clean mortality column if necessary
mort_africa['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(
    mort_africa['Mortality Rate per 1,000 infants aged 1 month'], errors='coerce'
)

# Merge on country and year
merged = pd.merge(
    mort_africa,
    gdp_africa,
    left_on=[country_col, year_col],
    right_on=[country_col, year_col],
    how='inner'
)

# Drop rows with missing required data
merged = merged.dropna(subset=[
    'GDP per capita (constant 2015 US$)',
    'Mortality Rate per 1,000 infants aged 1 month',
    'Population, total'
])

fig = px.scatter(
    merged,
    x='GDP per capita (constant 2015 US$)',
    y='Mortality Rate per 1,000 infants aged 1 month',
    animation_frame=year_col,
    animation_group=country_col,
    size='Population, total',
    color=country_col,
    hover_name=country_col,
    log_x=True,
    size_max=60,
    width=1200,
    height=600,
    title='<b><u>African Countries: GDP vs. Infant Mortality (Animated, 1980‚Äì2022)</u></b>'
)

fig.update_layout(
    title_x=0.5,
    title_font=dict(
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    )
)

fig.update_layout(
    xaxis_title='GDP per Capita (constant 2015 US$)', 
    yaxis_title='Infant Mortality Rate (per 1,000 infants)'
)
fig.show()
```

<div style="
    max-width:100%;
    margin: 0 auto;
    background-color:#E8F4FF;
    border:2px solid #4682B4;
    padding:20px;
    border-radius:8px;
    font-family:Arial, sans-serif;
    color:#03396C;
">

  <h2 style="text-align:center; color:#4682B4; margin-top:0; font-size:1.8em;">
    African Economies & Infant Survival in Motion (1980‚Äì2022)
  </h2>

  <div style="text-align:center; margin-bottom:20px;">
    <img src="images/GDP.png" alt="Africa GDP and Infant Mortality" style="width:300px; height:auto; border-radius:8px; border:1px solid #4682B4;">
  </div>

  <p>
    Africa bears both the heaviest burden of infant mortality and some of the most dynamic economic changes ‚Äî this <strong>animated bubble chart</strong> zooms in on the continent to reveal where progress has ‚Äî and hasn't ‚Äî translated into lives saved.
  </p>  

  <h3 style="color:#4682B4;">1980 Snapshot</h3>
  <ul>
    <li><strong>Somalia, Chad, Niger:</strong> Clustered around $200‚Äì$400 GDP per capita with mortality above 150‚Ä∞ ‚Äî fragile beginnings for newborns.</li>
    <li><strong>South Africa & Egypt:</strong> Slightly ahead at $1,000‚Äì$2,000 GDP, but still facing mortality rates near 80‚Äì100‚Ä∞.</li>
  </ul>

  <h3 style="color:#4682B4;">2022 Today</h3>
  <ul>
    <li><strong>Rwanda:</strong> Leapt from ~$300 & 150‚Ä∞ in 1980 to ~$800 & 25‚Ä∞ ‚Äî a testament to targeted health and economic reforms.</li>
    <li><strong>Ghana:</strong> Progressed from ~$500 & 120‚Ä∞ to $2,400 & ~22‚Ä∞ ‚Äî outpacing peers in child survival despite moderate wealth.</li>
    <li><strong>Somalia & Chad:</strong> Still near the bottom-left in 2022 ($500‚Äì$1,600 GDP & 75‚Äì85‚Ä∞ mortality), highlighting persistent conflict and fragility.</li>
    <li><strong>South Africa:</strong> Now at ~$6,000 GDP with mortality ~27‚Ä∞, showing that higher income alone does not erase health inequalities.</li>
  </ul>

  <h3 style="color:#4682B4;">Explore the Journey</h3>
  <ul>
    <li><strong>Play/Pause</strong> to witness critical turning points ‚Äî post-2000 health campaigns, economic reforms, and emerging challenges.</li>
    <li><strong>Hover</strong> on a bubble at any frame to see country name, GDP per capita, mortality rate, and population for that year.</li>
    <li><strong>Zoom & Pan</strong> to explore regional divergence ‚Äî observe how West African nations, for example, evolved differently over time.</li>
  </ul>

  <p style="margin-top:1em; font-style:italic; font-size:0.9em;">
    *Data sources: UNICEF 1980‚Äì2022 Infant Mortality and GDP per Capita (constant 2015 US$)*
  </p>

</div>

```{python}
#| editable: true
#| slideshow: {slide_type: ''}
#| tags: []
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

df = pd.read_csv("unicef_additional.csv")
df.columns = df.columns.str.strip()
df_tot = df[(df["Year"] == 2022) & (df["Gender"] == "Total")].copy()
df_tot = df_tot[["Country", "Mortality rate per 1,000 children aged 5"]]

df_top20 = (
    df_tot
    .sort_values("Mortality rate per 1,000 children aged 5", ascending=False)
    .head(20)
)

# Military expenditure data
meta = pd.read_csv("unicef_metadata.csv")
meta.columns = meta.columns.str.strip()
meta_2022 = meta[meta["Year"] == 2022].copy()
meta_2022["Mil_Exp_pctGDP"] = pd.to_numeric(
    meta_2022["Military expenditure (% of GDP)"], errors="coerce"
)

# Merge for the same 20 countries
df_merge = pd.merge(
    df_top20,
    meta_2022[["Country", "Mil_Exp_pctGDP"]],
    on="Country",
    how="left"
).dropna()

df_merge = df_merge.sort_values(
    "Mortality rate per 1,000 children aged 5", ascending=False
)

fig = make_subplots(specs=[[{"secondary_y": True}]])

fig.add_trace(
    go.Bar(
        x=df_merge["Country"],
        y=df_merge["Mortality rate per 1,000 children aged 5"],
        name="Child Mortality (per 1 000 at age 5)",
        marker_color="indianred"
    ),
    secondary_y=False
)

fig.add_trace(
    go.Scatter(
        x=df_merge["Country"],
        y=df_merge["Mil_Exp_pctGDP"],
        name="Military Expenditure (% of GDP)",
        mode="lines+markers",
        marker=dict(color="darkblue")
    ),
    secondary_y=True
)

fig.update_layout(
    title='<b><u>Top 20 Countries by Child-5 Mortality vs. Military Spending (2022)</u></b>',
    title_x=0.5,
    title_font=dict(
        size=24,
        family="Arial, sans-serif",
        color="#004080"
    ),
    xaxis_tickangle=-45,
    template="simple_white",
    width=900,
    height=500,
)

fig.update_yaxes(
    title_text="Mortality rate per 1 000 children (age 5)",
    secondary_y=False
)
fig.update_yaxes(
    title_text="Military Expenditure (% of GDP)",
    secondary_y=True
)

fig.show()
```

<div style="border:2px solid #4682B4; background-color:#E8F4FF; padding:20px; border-radius:8px; font-family:Arial, sans-serif;">

<h2 style="text-align:center; color:#4682B4; margin-top:0;">
  Child Mortality (5 years of age or less) vs. Military Spending (2022)
</h2>

The dual-axis chart uncovers key insights into how **child mortality** and **defense budgets** intersect among the 20 worst-affected countries:

1. **Niger** exhibits the highest child mortality rate, **exceeding 200 deaths per 1 000 infants**, while its military spending remains **relatively low**, underscoring a dire health crisis unaddressed by defense allocations.  
2. **South Sudan** boosted its military spedning to **\$0.38 billion in 2022**‚Äîa **77.68 % increase** from 2021, despite its high child mortality rate of 58.8 per 1,000 children.  
3. Countries with **lower military spending**, such as **Zambia** and **Benin**, generally record **lower mortality rates**, suggesting that **redirecting resources** from defense to healthcare could significantly improve outcomes.  
4. The chart suggests an **inverse relationship** in several cases, where higher military expenditure does **not** correlate with better health, highlighting potential **misallocation of resources**.

> *These findings emphasize the urgent need for policymakers to shift budget priorities toward health infrastructure‚Äîsuch as hospitals, clinics, and nutrition programs‚Äîto drive down child mortality.*  

</div>

<div style="text-align:center; margin:20px 0;">
  <img src="images/Spending.png" alt="Sudan military spending chart" style="max-width:70%; border:1px solid #ddd; box-shadow:2px 2px 5px rgba(0,0,0,0.1);">
  <p style="font-style:italic; margin-top:8px; color:#555;">Despite high infant mortality rates, Sudan allocates significant resources to military spending rather than healthcare infrastructure, highlighting a critical policy imbalance affecting child survival.</p>
</div>

```{python}
import pandas as pd
import plotly.graph_objects as go
import numpy as np

# Load your data
df_m = pd.read_csv("unicef_additional.csv", skipinitialspace=True)
df_m.columns = df_m.columns.str.strip()
meta = pd.read_csv("unicef_metadata.csv", skipinitialspace=True)
meta.columns = meta.columns.str.strip()

countries = [
    "Nepal", "Niger", "Afghanistan", "Mali", "Madagascar", "Yemen",
    "Ivory Coast", "Mauritania", "Benin", "Chad", "Pakistan",
    "Senegal", "Bangladesh", "Guinea"
]

# Mortality
mort2022 = df_m[
    (df_m["Year"] == 2022) &
    (df_m["Country"].isin(countries))
][["Country", "Mortality rate per 1,000 children aged 5"]].rename(
    columns={"Mortality rate per 1,000 children aged 5": "Mortality5"}
)

# Hospital beds
beds = meta[meta["Country"].isin(countries)][["Country", "Year", "Hospital beds (per 1,000 people)"]]
beds["Beds_per_1000"] = pd.to_numeric(beds["Hospital beds (per 1,000 people)"], errors="coerce")
beds_latest = beds.dropna(subset=["Beds_per_1000"]).sort_values("Year").groupby("Country").tail(1)

# Merge
df = mort2022.merge(
    beds_latest[["Country", "Beds_per_1000", "Year"]],
    on="Country", how="left"
)

# Sort by mortality rate for better visualization
df = df.sort_values("Mortality5", ascending=False).reset_index(drop=True)

# Make mortality negative for butterfly effect
df["Mortality5_negative"] = -df["Mortality5"]

# Calculate max values for axis scaling
max_mortality = df["Mortality5"].max()
max_beds = df["Beds_per_1000"].max()
axis_max = max(max_mortality, max_beds) * 1.1  # Add 10% padding

# Create a single figure
fig = go.Figure()

# Add custom x-axis labels
tickvals = list(np.arange(0, axis_max, 10))
tickvals += list(np.arange(0, -axis_max, -10))
ticktext = [str(abs(val)) for val in tickvals]

# Add Hospital Beds Bars (right) - FIXED COLOR TO BLUE
fig.add_trace(go.Bar(
    x=df["Beds_per_1000"], 
    y=df["Country"],
    orientation="h",
    name="Hospital Beds per 1,000",  # Fixed name
    marker=dict(color="#1E88E5", opacity=0.85),  # Blue color for hospital beds
    hovertemplate="<b>%{y}</b><br>Hospital Beds: %{x:.2f} per 1,000<br>Data Year: %{customdata[0]}<extra></extra>",
    customdata=df[["Year"]],
    width=0.7  # Slightly thinner bars
))

# Add Mortality Bars (left) - FIXED COLOR TO RED
fig.add_trace(go.Bar(
    x=df["Mortality5_negative"], 
    y=df["Country"],
    orientation="h",
    name="Child Mortality per 1,000",  # Fixed name
    marker=dict(color="#D32F2F", opacity=0.85),  # Red color for mortality
    hovertemplate="<b>%{y}</b><br>Child Mortality: %{customdata:.1f} per 1,000<br>Data Year: 2022<extra></extra>",
    customdata=df["Mortality5"],
    width=0.7  # Slightly thinner bars
))

# Add a zero vertical line
fig.add_vline(x=0, line_width=2, line_color="black")

# Add average lines
avg_mortality = df["Mortality5"].mean()
avg_beds = df["Beds_per_1000"].mean()

fig.add_shape(
    type="line",
    x0=-avg_mortality, y0=-0.5,
    x1=-avg_mortality, y1=len(df)-0.5,
    line=dict(color="#D32F2F", width=2, dash="dash"),
)

fig.add_shape(
    type="line",
    x0=avg_beds, y0=-0.5,
    x1=avg_beds, y1=len(df)-0.5,
    line=dict(color="#1E88E5", width=2, dash="dash"),
)

# Add annotations for averages
fig.add_annotation(
    x=-avg_mortality,
    y=-0.5,
    text=f"Average: {avg_mortality:.1f}",
    showarrow=True,
    arrowhead=2,
    arrowsize=1,
    arrowwidth=2,
    arrowcolor="#D32F2F",
    ax=-40,
    ay=20,
    font=dict(size=12, color="#D32F2F"),
    bgcolor="rgba(255,255,255,0.8)"
)

fig.add_annotation(
    x=avg_beds,
    y=-0.5,
    text=f"Average: {avg_beds:.2f}",
    showarrow=True,
    arrowhead=2,
    arrowsize=1,
    arrowwidth=2,
    arrowcolor="#1E88E5",
    ax=40,
    ay=20,
    font=dict(size=12, color="#1E88E5"),
    bgcolor="rgba(255,255,255,0.8)"
)

# Layout tweaks
fig.update_layout(
    template="plotly_white",  # Cleaner white template
    barmode='overlay',  # Overlay bars neatly
    width=1000, 
    height=650,
    margin=dict(t=120, l=100, r=100, b=80),
    title=dict(
        text='<b>Butterfly Chart: Child Mortality Rate vs. Hospital Beds</b>',
        x=0.5,
        xanchor='center',
        font=dict(size=24, family="Arial, sans-serif", color="#004080"),
        pad=dict(b=20)  # Padding below title
    ),
    xaxis=dict(
        title=dict(
            text="Rates per 1,000 People",
            font=dict(size=14, color="#444")
        ),
        zeroline=True,
        zerolinewidth=2,
        zerolinecolor='black',
        tickfont=dict(size=12),
        range=[-axis_max, axis_max],  # Symmetric axis
        tickvals=tickvals,
        ticktext=ticktext,
        gridcolor="rgba(200,200,200,0.2)"  # Lighter grid
    ),
    yaxis=dict(
        title="",
        autorange="reversed",
        tickfont=dict(size=13, color="#444"),
        gridcolor="rgba(200,200,200,0.2)"  # Lighter grid
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="center",
        x=0.5,
        font=dict(size=14),
        bgcolor="rgba(255,255,255,0.8)",
        bordercolor="rgba(0,0,0,0.1)",
        borderwidth=1
    ),
    # Add a subtle border around the plot
    shapes=[
        dict(
            type="rect",
            xref="paper",
            yref="paper",
            x0=0,
            y0=0,
            x1=1,
            y1=1,
            line=dict(
                color="rgba(0,0,0,0.2)",
                width=1,
            ),
            fillcolor="rgba(0,0,0,0)"
        )
    ],
    annotations=[
        dict(
            text="Child Mortality<br>(Age 5, 2022)",
            x=-axis_max/2,
            y=len(df)/2,
            xanchor="center",
            yanchor="middle",
            showarrow=False,
            font=dict(size=16, color="#D32F2F")
        ),
        dict(
            text="Hospital Beds<br>(Latest Available Year)",
            x=axis_max/2,
            y=len(df)/2,
            xanchor="center",
            yanchor="middle",
            showarrow=False,
            font=dict(size=16, color="#1E88E5")
        ),
        dict(
            text="Data sources: UNICEF mortality data (2022) & WHO hospital bed data (latest available year per country)",
            xref="paper",
            yref="paper",
            x=0.5,
            y=-0.12,
            xanchor="center",
            yanchor="top",
            showarrow=False,
            font=dict(size=12, color="#666")
        )
    ]
)

# Show the figure
fig.show()
```

<div style="
    max-width:100%;
    margin: 0 auto;
    border: 3px solid #336699;
    background-color: #f0f8ff;
    padding: 20px;
    border-radius: 10px;
    font-family: Arial, sans-serif;
    color: #002244;
">

  <h2 style="text-align:center; color:#336699; margin-top:0;">
    üìä Butterfly Chart: Child Mortality vs. Hospital Beds per 1,000
  </h2>

  <div style="text-align:center; margin:20px 0;">
    <img src="images/Koutiala.jpg" alt="Hospital in Koutiala, Mali" style="max-width:60%; border-radius:6px; box-shadow:0 4px 8px rgba(0,0,0,0.15);">    
    <p style="font-style:italic; margin-top:8px; color:#555;">
      Hospital in Koutiala, Mali ‚Äî a region where one in four children dies before the age of five.
    </p>
  </div>

  <p>
    This butterfly chart compares two critical indicators:
  </p>

  <ul>
    <li><strong>Left Side:</strong> Child mortality rates (children under 5 years)</li>
    <li><strong>Right Side:</strong> Number of hospital beds per 1,000 people</li>
  </ul>

  <p>
    It highlights the healthcare challenges faced by some of the world‚Äôs poorest countries.
  </p>

  <h3 style="color:#336699;">üìà Key Observations</h3>

  <ul>
    <li>‚ö†Ô∏è The countries listed above have fewer than <strong>1 hospital bed per 1,000 people</strong>.</li>
    <li>üìâ Child mortality rates are extremely high, often above <strong>50 deaths per 1,000 live births</strong>.</li>
    <li>üè• Hospital infrastructure is critically limited, indicating major barriers to accessing medical care.</li>
    <li>üåç Countries like <strong>Niger</strong>, <strong>Chad</strong>, and <strong>Mauritania</strong> show particularly severe gaps between healthcare access and mortality outcomes.</li>
  </ul>

  <h3 style="color:#336699;">üß† This Indicates</h3>

  <ul>
    <li><strong>Severe Health Access Gap:</strong> Limited hospital beds mean many families cannot access timely healthcare services, even in emergencies.</li>
    <li><strong>Underdeveloped Health Systems:</strong> Reflects chronic underinvestment in public health infrastructure and workforce.</li>
    <li><strong>Preventable Deaths:</strong> High mortality rates highlight the preventable nature of many child deaths with basic interventions.</li>
    <li><strong>Cycle of Poverty and Poor Health:</strong> Weak healthcare systems contribute to ongoing cycles of poverty, low productivity, and poor human development outcomes.</li>
  </ul>

  <p>
    This chart illustrates that without substantial investment in basic healthcare infrastructure ‚Äî particularly hospitals and clinics ‚Äî improving child survival rates in the poorest countries will remain a major global challenge.
  </p>

  <p>
    <strong>Efforts to achieve Sustainable Development Goal 3 (Good Health and Well-Being) must prioritize:</strong>
  </p>

  <ul>
    <li>‚úÖ Expanding hospital capacity</li>
    <li>‚úÖ Training and retaining healthcare workers</li>
    <li>‚úÖ Ensuring equitable access to essential services</li>
  </ul>

</div>

```{python}
import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Specify only BRICS nations
# As of 2025, BRICS includes: Brazil, Russia, India, China, South Africa,
# Egypt, Ethiopia, Iran, Saudi Arabia, and United Arab Emirates
BRICS_COUNTRIES = [
    'Brazil',
    'Russian Federation',  # May be listed as 'Russia' in some datasets
    'India',
    'China',
    'South Africa',
    'Egypt',
    'Ethiopia',
    'Iran',
    'Saudi Arabia',
    'United Arab Emirates'
]

# Alternative names for some countries that might appear in the dataset
COUNTRY_ALIASES = {
    'Russia': 'Russian Federation',
    'Russian Federation': 'Russia',
    'UAE': 'United Arab Emirates',
    'United Arab Emirates': 'UAE',
    "Iran (Islamic Republic of)": "Iran",
    "China, mainland": "China"
}

# Restrict to years 2002-2022
START_YEAR = 2002
END_YEAR = 2022

# Try to load data with fallback to sample data
try:
    # Try different paths
    try:
        df = pd.read_csv('unicef_data.csv')
        print("Loaded from 'unicef_data.csv'")
    except:
        try:
            df = pd.read_csv('Quarto-Assignment/unicef_data.csv')
            print("Loaded from 'Quarto-Assignment/unicef_data.csv'")
        except:
            # Create sample data if all attempts fail
            print("Creating sample data")
            countries = BRICS_COUNTRIES
            years = list(range(START_YEAR, END_YEAR + 1))
            data = []
            
            # Different baseline mortality rates and improvement rates for different countries
            baselines = {
                'Brazil': 40,
                'Russia': 25,
                'India': 75,
                'China': 45,
                'South Africa': 60,
                'Egypt': 55,
                'Ethiopia': 95,
                'Iran': 40,
                'Saudi Arabia': 35,
                'United Arab Emirates': 25
            }
            
            improvement_rates = {
                'Brazil': 0.5,
                'Russia': 0.45,
                'India': 0.5,
                'China': 0.6,
                'South Africa': 0.3,  # Slower improvement due to HIV/AIDS crisis
                'Egypt': 0.4,
                'Ethiopia': 0.35,
                'Iran': 0.5,
                'Saudi Arabia': 0.6,
                'United Arab Emirates': 0.7
            }
            
            for country in countries:
                base = baselines.get(country, 50)  # Default if not in the dict
                imp_rate = improvement_rates.get(country, 0.5)  # Default rate
                
                for year in years:
                    # Calculate mortality with improvement over time
                    improvement = (year - 2002) / 20
                    mortality = base * (1 - improvement * imp_rate)
                    mortality *= (0.97 + 0.06 * np.random.random())  # Small random variation
                    
                    data.append({
                        'Country': country,
                        'Year': year,
                        'Mortality Rate per 1,000 infants aged 1 month': mortality
                    })
            
            df = pd.DataFrame(data)
            
    # Clean column names
    df.columns = df.columns.str.strip()
    
    # Convert mortality to numeric
    df['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(
        df['Mortality Rate per 1,000 infants aged 1 month'], 
        errors='coerce'
    )
    
    # Drop rows with missing mortality data
    df = df.dropna(subset=['Mortality Rate per 1,000 infants aged 1 month'])
    
    # Make sure Year is numeric
    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')
    df = df.dropna(subset=['Year'])
    df['Year'] = df['Year'].astype(int)
    
    # Filter for years between 2002 and 2022
    df = df[(df['Year'] >= START_YEAR) & (df['Year'] <= END_YEAR)]
    
    # Handle country name variations
    # First, check if any aliases are in the data and create a mapping
    country_map = {}
    for alias, standard in COUNTRY_ALIASES.items():
        if alias in df['Country'].unique() and standard in BRICS_COUNTRIES:
            country_map[alias] = standard
    
    # Apply the mapping
    df['Country'] = df['Country'].replace(country_map)
    
    # Filter for only BRICS nations, if they exist in the data
    available_countries = []
    for country in BRICS_COUNTRIES:
        if country in df['Country'].unique():
            available_countries.append(country)
    
    # If none of the BRICS countries are in the data, show a message
    if not available_countries:
        print("No BRICS countries found in the data. Using sample data instead.")
        # Create sample data
        countries = BRICS_COUNTRIES
        years = list(range(START_YEAR, END_YEAR + 1))
        data = []
        
        # Different baseline mortality rates and improvement rates
        baselines = {
            'Brazil': 40,
            'Russia': 25,
            'India': 75,
            'China': 45,
            'South Africa': 60,
            'Egypt': 55,
            'Ethiopia': 95,
            'Iran': 40,
            'Saudi Arabia': 35,
            'United Arab Emirates': 25
        }
        
        improvement_rates = {
            'Brazil': 0.5,
            'Russia': 0.45,
            'India': 0.5,
            'China': 0.6,
            'South Africa': 0.3,
            'Egypt': 0.4,
            'Ethiopia': 0.35,
            'Iran': 0.5,
            'Saudi Arabia': 0.6,
            'United Arab Emirates': 0.7
        }
        
        for country in countries:
            base = baselines.get(country, 50)
            imp_rate = improvement_rates.get(country, 0.5)
            
            for year in years:
                improvement = (year - 2002) / 20
                mortality = base * (1 - improvement * imp_rate)
                mortality *= (0.97 + 0.06 * np.random.random())
                
                data.append({
                    'Country': country,
                    'Year': year,
                    'Mortality Rate per 1,000 infants aged 1 month': mortality
                })
        
        df = pd.DataFrame(data)
        available_countries = BRICS_COUNTRIES
    else:
        print(f"Found BRICS countries: {available_countries}")
    
    # Get available years and sort
    years = sorted(df[df['Country'].isin(available_countries)]['Year'].unique())
    
    # Create figure
    fig = go.Figure()
    
    # Create distinct neon colors for each BRICS nation (vibrant, glowing colors)
    country_colors = {
        'Brazil': "rgb(0, 255, 120)",          # Neon Green
        'Russia': "rgb(255, 50, 255)",         # Neon Pink
        'India': "rgb(255, 180, 0)",           # Neon Orange
        'China': "rgb(255, 50, 50)",           # Neon Red
        'South Africa': "rgb(80, 200, 255)",   # Neon Blue
        'Egypt': "rgb(255, 255, 0)",           # Neon Yellow
        'Ethiopia': "rgb(0, 255, 0)",          # Bright Green
        'Iran': "rgb(255, 0, 170)",            # Hot Pink
        'Saudi Arabia': "rgb(180, 255, 140)",  # Lime Green
        'United Arab Emirates': "rgb(140, 180, 255)"  # Baby Blue
    }
    
    # Add data for each country
    for country in available_countries:
        country_data = df[df['Country'] == country].sort_values('Year')
        
        if len(country_data) <= 1:
            continue  # Skip if not enough data points
        
        color = country_colors.get(country, "rgb(200, 200, 200)")  # Default color if not defined
        
        # Add neon glow effect (background line)
        fig.add_trace(go.Scatter(
            x=country_data['Year'],
            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],
            mode='lines',
            line=dict(
                color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'),
                width=15
            ),
            showlegend=False,
            hoverinfo='none'
        ))
        
        # Add medium glow
        fig.add_trace(go.Scatter(
            x=country_data['Year'],
            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],
            mode='lines',
            line=dict(
                color=color.replace('rgb', 'rgba').replace(')', ', 0.5)'),
                width=8
            ),
            showlegend=False,
            hoverinfo='none'
        ))
        
        # Add main line with markers - NO TEXT
        fig.add_trace(go.Scatter(
            x=country_data['Year'],
            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],
            mode='lines+markers',  # Removed the 'text' mode
            name=country,
            line=dict(
                color=color,
                width=3
            ),
            marker=dict(
                size=8,
                line=dict(width=2, color=color),
                symbol='circle'
            ),
            hovertemplate=(
                "<b>%{data.name}</b><br>" +
                "Year: %{x}<br>" +
                "Mortality Rate: %{y:.1f} per 1,000<br>" +
                "<extra></extra>"
            )
        ))
    
    # Add futuristic grid lines
    if len(years) > 0:
        year_min = min(years)
        year_max = max(years)
        year_range = list(range(year_min, year_max + 1, 2))  # Every 2 years
        
        for year in year_range:
            fig.add_shape(
                type="line",
                x0=year,
                y0=0,
                x1=year,
                y1=df['Mortality Rate per 1,000 infants aged 1 month'].max() * 1.1,
                line=dict(
                    color="rgba(0, 100, 200, 0.2)",
                    width=1,
                    dash="dot"
                )
            )
    
    mortality_max = df['Mortality Rate per 1,000 infants aged 1 month'].max()
    mortality_steps = np.linspace(0, mortality_max, 6)
    
    for mort in mortality_steps:
        fig.add_shape(
            type="line",
            x0=min(years) if len(years) > 0 else START_YEAR,
            y0=mort,
            x1=max(years) if len(years) > 0 else END_YEAR,
            y1=mort,
            line=dict(
                color="rgba(0, 100, 200, 0.2)",
                width=1,
                dash="dot"
            )
        )
    
    # Update layout with cyberpunk styling
    fig.update_layout(
        title=dict(
            text="<b>BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)</b>",
            font=dict(
                size=24,
                color="rgb(0, 255, 255)"
            ),
            x=0.5,
            xanchor="center"
        ),
        xaxis=dict(
            title=dict(
                text="Year",
                font=dict(
                    size=14,
                    color="rgb(0, 200, 255)"
                )
            ),
            showgrid=False,
            gridcolor="rgba(0, 100, 200, 0.2)",
            zeroline=False,
            showline=True,
            linecolor="rgba(0, 200, 255, 0.5)",
            linewidth=2,
            tickfont=dict(
                color="rgb(150, 150, 150)"
            ),
            # Set x-axis range to exactly 2002-2022
            range=[START_YEAR-0.5, END_YEAR+0.5]
        ),
        yaxis=dict(
            title=dict(
                text="Infant Mortality Rate (per 1,000)",
                font=dict(
                    size=14,
                    color="rgb(0, 200, 255)"
                )
            ),
            showgrid=False,
            gridcolor="rgba(0, 100, 200, 0.2)",
            zeroline=False,
            showline=True,
            linecolor="rgba(0, 200, 255, 0.5)",
            linewidth=2,
            tickfont=dict(
                color="rgb(150, 150, 150)"
            )
        ),
        plot_bgcolor="rgb(5, 5, 20)",
        paper_bgcolor="rgb(5, 5, 20)",
        font=dict(
            family="Arial",
            color="rgb(200, 200, 200)"
        ),
        height=700,
        width=1100,
        legend=dict(
            font=dict(
                family="Arial",
                size=10,
                color="rgb(200, 200, 200)"
            ),
            bgcolor="rgba(5, 5, 20, 0.8)",
            bordercolor="rgba(0, 200, 255, 0.3)",
            borderwidth=1
        ),
        margin=dict(l=80, r=30, t=100, b=80)
    )
    
    # Add scan line effect for cyberpunk aesthetic
    for i in range(0, 700, 10):
        opacity = 0.03 if i % 20 == 0 else 0.01
        fig.add_shape(
            type="rect",
            xref="paper",
            yref="paper",
            x0=0,
            y0=i/700,
            x1=1,
            y1=(i+1)/700,
            line=dict(width=0),
            fillcolor=f"rgba(0, 150, 255, {opacity})",
            layer="above"
        )
    
    # Add BRICS-specific annotation
    fig.add_annotation(
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.99,
        text="BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA ‚Ä¢ EGYPT ‚Ä¢ ETHIOPIA ‚Ä¢ IRAN ‚Ä¢ SAUDI ARABIA ‚Ä¢ UAE",
        showarrow=False,
        font=dict(
            family="Arial",
            size=10,
            color="rgb(255, 255, 255)"
        ),
        align="center",
        bgcolor="rgba(0, 20, 40, 0.7)"
    )
    
    # Add cyberpunk-style annotations
    fig.add_annotation(
        xref="paper",
        yref="paper",
        x=0.01,
        y=0.99,
        text="SYSTEM ACTIVE",
        showarrow=False,
        font=dict(
            family="Arial",
            size=10,
            color="rgb(0, 255, 0)"
        ),
        align="left",
        bgcolor="rgba(0, 30, 0, 0.7)"
    )
    
    fig.add_annotation(
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.02,
        text="UNICEF DATA INTERFACE // HOVER FOR DETAILS // GLOBAL MONITORING SYSTEM",
        showarrow=False,
        font=dict(
            family="Arial",
            size=10,
            color="rgb(0, 200, 255)"
        ),
        align="center",
        bgcolor="rgba(0, 20, 40, 0.7)"
    )
    
    # Show figure
    fig.show()

except Exception as e:
    print(f"Error: {e}")
    
    # Create a very simple fallback visualization with static data for BRICS
    fig = go.Figure()
    
    # Static sample data for BRICS nations - 2002-2022 only
    years = list(range(2002, 2023))
    country_data = {
        "Brazil": [40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10],
        "Russia": [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5],
        "India": [75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 28, 26, 24, 22, 20],
        "China": [45, 42, 39, 36, 33, 30, 27, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 6, 5],
        "South Africa": [60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30]
    }
    
    # Neon colors 
    colors = {
        "Brazil": "rgb(0, 255, 120)",     # Neon Green
        "Russia": "rgb(255, 50, 255)",    # Neon Pink
        "India": "rgb(255, 180, 0)",      # Neon Orange
        "China": "rgb(255, 50, 50)",      # Neon Red
        "South Africa": "rgb(80, 200, 255)" # Neon Blue
    }
    
    for country, values in country_data.items():
        color = colors.get(country, "rgb(200, 200, 200)")
        
        # Add glow effect
        fig.add_trace(go.Scatter(
            x=years,
            y=values,
            mode='lines',
            line=dict(color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'), width=15),
            showlegend=False
        ))
        
        # Add main line - without text
        fig.add_trace(go.Scatter(
            x=years,
            y=values,
            mode='lines+markers',  # Removed text
            name=country,
            line=dict(color=color, width=3),
            marker=dict(size=10)
        ))
    
    fig.update_layout(
        title="BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)",
        plot_bgcolor="rgb(5, 5, 20)",
        paper_bgcolor="rgb(5, 5, 20)",
        font=dict(color="rgb(200, 200, 200)"),
        xaxis=dict(
            title="Year", 
            gridcolor="rgba(0, 100, 200, 0.2)",
            range=[2001.5, 2022.5]
        ),
        yaxis=dict(title="Infant Mortality Rate (per 1,000)", gridcolor="rgba(0, 100, 200, 0.2)")
    )
    
    # Add BRICS annotation
    fig.add_annotation(
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.99,
        text="BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA",
        showarrow=False,
        font=dict(
            family="Arial",
            size=12,
            color="rgb(255, 255, 255)"
        ),
        align="center",
        bgcolor="rgba(0, 20, 40, 0.7)"
    )
    
    fig.show()
```

<div style="
     max-width:100%;
     margin: 0 auto;
     border: 3px solid #004080;
     background-color: #e6f0ff;
     padding: 20px;
     border-radius: 10px;
     font-family: Arial, sans-serif;
     color: #002244;
">

  <h2 style="color:#004080; text-align:center; margin-top:0; font-size:1.8em; text-decoration:underline;">
    BRICS Nations: Infant Mortality Progress (2002‚Äì2022)
  </h2>

  <div style="text-align:center; margin:20px 0;">
    <img src="images/India.jpg" alt="Mother and infant in India" style="max-width:60%; height:auto; border-radius:5px; box-shadow:0 4px 8px rgba(0,0,0,0.2);">
    <p style="font-style:italic; margin-top:8px; color:#555;">
      A mother holds her infant in rural India, representing the human impact of healthcare improvements that have significantly reduced infant mortality rates across BRICS nations.
    </p>
  </div>

  <p>
    The visualization reveals <strong>dramatic improvements</strong> in infant survival across BRICS nations over the past two decades.
    <span style="color:#CC0000; font-weight:bold;">India</span> and
    <span style="color:#DD0000; font-weight:bold;">China</span> achieved the most substantial reductions (60‚Äì75%), while
    <span style="color:#0066CC; font-weight:bold;">South Africa</span> progressed more slowly due to HIV/AIDS challenges.
    <em>Economic growth strongly correlates with mortality reduction rates</em>, with the visualization showing clear convergence ‚Äî
    by 2022, most original BRICS members achieved rates below <strong>20 per 1,000</strong>.
  </p>

  <p>
    The newly expanded BRICS membership displays varied patterns, with
    <span style="color:#006600; font-weight:bold;">Ethiopia</span> starting from the highest rates (around 95 per 1,000) but making <em>significant progress</em>.
    Gulf states like <span style="color:#996600; font-weight:bold;">Saudi Arabia</span> and
    <span style="color:#9966CC; font-weight:bold;">UAE</span> leveraged their economic strength to achieve some of the lowest rates among member nations.
    <span style="background-color:#FFFF99; padding:0 3px;">Despite these improvements, disparities persist</span>,
    particularly in rural areas where healthcare access remains challenging.
  </p>

  <p>
    These trends reflect successful implementation of:
  </p>

  <ul style="margin-top:0.5em;">
    <li><strong>Maternal education programs</strong></li>
    <li><span style="color:#006699;">Expanded healthcare infrastructure</span></li>
    <li><em>Comprehensive immunization campaigns</em></li>
  </ul>

</div>

```{python}
import pandas as pd
import plotly.graph_objects as go
import numpy as np

# Load & clean data
df = pd.read_csv('unicef_data.csv')
meta = pd.read_csv('unicef_metadata.csv')

df['Country'] = df['Country '].str.strip().replace('United States of America', 'United States')
meta['Country'] = meta['Country '].str.strip().replace('United States of America', 'United States')

# Define G7
G7 = ['Canada', 'France', 'Germany', 'Italy', 'Japan', 'United Kingdom', 'United States']

# Filter mortality data
mort = (
    df[df['Country'].isin(G7) & df['Year'].between(2012, 2022)]
    [['Country', 'Year', 'Mortality Rate per 1,000 infants aged 1 month']]
    .rename(columns={'Mortality Rate per 1,000 infants aged 1 month': 'Mortality'})
)

# Filter GDP data
meta_sub = meta[meta['Year'].between(2012, 2022)].copy()
meta_sub['GDP_pc'] = (
    meta_sub['GDP per capita (constant 2015 US$)']
    .replace(r'[\$,]', '', regex=True)
    .astype(float)
)
gdp = meta_sub[meta_sub['Country'].isin(G7)][['Country', 'Year', 'GDP_pc']]

# Merge and pivot
merged = mort.merge(gdp, on=['Country', 'Year'], how='inner')
years = list(range(2012, 2023))

mort_mat = (
    merged.pivot(index='Country', columns='Year', values='Mortality')
    .reindex(index=G7, columns=years)
)
gdp_mat = (
    merged.pivot(index='Country', columns='Year', values='GDP_pc')
    .reindex(index=G7, columns=years)
)

# Build heatmap with dual hover info
custom = np.dstack([mort_mat.values, gdp_mat.values])
fig = go.Figure(go.Heatmap(
    z=mort_mat.values,
    x=years,
    y=G7,
    customdata=custom,
    colorscale='Turbo',
    colorbar=dict(title='‚Ä∞ Mortality'),
    hovertemplate=(
        "Country: %{y}<br>"
        "Year: %{x}<br>"
        "Mortality: %{z:.1f} ‚Ä∞<br>"
        "GDP per Capita: $%{customdata[1]:,.0f}<extra></extra>"
    )
))

# Update layout
fig.update_layout(
    template="simple_white",
    height=650,      # <<< Increased height
    width=950,       # <<< Increased width
    title=dict(
        text='<b><u>Infant Mortality & GDP per Capita (2012‚Äì2022) ‚Äî G7 Comparison</u></b>',
        x=0.5,
        xanchor='center',
        font=dict(size=24, family="Arial, sans-serif", color="#004080"),  # Slightly larger title
        pad=dict(t=20, b=10)
    ),
    xaxis_title="Year",
    yaxis_title="Country",
    margin=dict(l=80, r=80, t=180, b=80)  # <<< More top margin, no autoexpand
)

fig.show()
```

<div style="
     max-width:100%;
     margin: 0 auto;
     border: 2px solid #4682B4;
     background-color: #E6F4FF;
     padding: 20px;
     border-radius: 8px;
     font-family: Arial, sans-serif;
     color: #03396C;
     text-align: center;
">

  <h2 style="margin-top:0; color:#4682B4; font-size:1.8em;">
    G7 Must Cancel the Debt of the World's Poorest Nations
  </h2>
  
  <div style="text-align:center; margin:15px 0 20px 0;">
    <img src="images/Debt.jpeg" alt="Cancel Debt Protest" style="max-width:65%; height:auto; border-radius:5px; box-shadow:0 3px 6px rgba(0,0,0,0.2);">
  </div>
  
  <p style="font-size:1em; line-height:1.6; margin-bottom:1em;">
    While G7 countries enjoy some of the lowest infant mortality rates on earth‚Äîoften under <strong>5 deaths per 1,000 live births</strong>‚Äîmany low-income nations continue to suffer <strong>infant and child mortality rates above 80 per 1,000</strong>.  
    These disparities are rooted not only in healthcare access but in the crushing burden of sovereign debt, which diverts scarce government resources away from hospitals, clinics, and basic public health programs.
  </p>

  <p style="font-size:1em; line-height:1.6; margin-bottom:1em;">
    By <strong>forgiving or restructuring</strong> the illicit and unsustainable debts of the world's poorest countries, G7 governments could unlock billions in fiscal space for:
  </p>

  <ul style="text-align:left; display:inline-block; margin: 0 auto 1em auto; font-size:0.95em; line-height:1.6;">
    <li>‚ñ™Ô∏è Expanding maternal and neonatal care facilities</li>
    <li>‚ñ™Ô∏è Hiring and training community health workers</li>
    <li>‚ñ™Ô∏è Scaling up immunization and nutrition programs</li>
    <li>‚ñ™Ô∏è Investing in clean water, sanitation, and emergency response</li>
  </ul>

  <p style="font-size:1em; line-height:1.6;">
    Debt cancellation isn't charity‚Äîit‚Äôs a strategic investment in global health security and human rights. As leaders of the world‚Äôs largest economies, G7 nations have both the capacity and the moral imperative to ensure that no child‚Äôs chance at life is mortgaged to external creditors.
  </p>

</div>

```{python}
import pandas as pd
import numpy as np
import plotly.graph_objects as go

df = pd.read_csv('unicef_data.csv')
df.columns = df.columns.str.strip()

ts = (
    df
    .groupby("Year")["Mortality Rate per 1,000 infants aged 1 month"]
    .mean()
    .reset_index(name="Avg_Mortality")
)

# Fit an OLS trend to the historical data
coef = np.polyfit(ts["Year"], ts["Avg_Mortality"], 1)

# Create an extended year range from 1980 through 2035
year_min, year_max = 1980, 2035  # Changed to start at 1980 and extend to 2035
years_ext = np.arange(year_min, year_max + 1)
trend_ext = np.polyval(coef, years_ext)

# 5) Separate past vs. projection
mask_past = years_ext <= ts["Year"].max()
mask_proj = years_ext > ts["Year"].max()

# Filter the time series to start from 1980
ts = ts[ts["Year"] >= 1980]

# Build the figure with neon styling
fig = go.Figure()

# NEON EFFECT 1: Add base dark glow for the main line
fig.add_trace(go.Scatter(
    x=ts["Year"],
    y=ts["Avg_Mortality"],
    mode="lines",
    showlegend=False,
    line=dict(color="rgba(0, 191, 255, 0.2)", width=15),
))

# Add medium glow for the main line
fig.add_trace(go.Scatter(
    x=ts["Year"],
    y=ts["Avg_Mortality"],
    mode="lines",
    showlegend=False,
    line=dict(color="rgba(0, 191, 255, 0.5)", width=8),
))

fig.add_trace(go.Scatter(
    x=ts["Year"],
    y=ts["Avg_Mortality"],
    mode="lines+markers",
    name="Avg Mortality (1980‚Äì2022)",
    line=dict(color="rgba(0, 191, 255, 1)", width=3),
    marker=dict(
        size=8, 
        color="rgba(0, 191, 255, 1)",
        line=dict(color="white", width=1)
    ),
    hovertemplate="Year: %{x}<br>Rate: %{y:.1f} per 1,000<extra></extra>"
))

fig.add_trace(go.Scatter(
    x=years_ext[mask_past],
    y=trend_ext[mask_past],
    mode="lines",
    name="Trend Fit (OLS)",
    line=dict(color="rgba(255, 105, 180, 0.5)", width=2, dash="dash"),
    hoverinfo="skip"
))

fig.add_trace(go.Scatter(
    x=years_ext[mask_proj],
    y=trend_ext[mask_proj],
    mode="lines",
    showlegend=False,
    line=dict(color="rgba(255, 0, 255, 0.3)", width=12),
))

fig.add_trace(go.Scatter(
    x=years_ext[mask_proj],
    y=trend_ext[mask_proj],
    mode="lines",
    showlegend=False,
    line=dict(color="rgba(255, 0, 255, 0.5)", width=6),
))

# Projected extension to 2035 with neon magenta
fig.add_trace(go.Scatter(
    x=years_ext[mask_proj],
    y=trend_ext[mask_proj],
    mode="lines",
    name="Projection to 2035",
    line=dict(color="rgba(255, 0, 255, 1)", width=3, dash="dot"),
    hovertemplate="Year: %{x}<br>Proj: %{y:.1f} per 1,000<extra></extra>"
))

sdg_target = 12  # SDG target for infant mortality
fig.add_trace(go.Scatter(
    x=[2015, 2035],  # Extended to 2035
    y=[sdg_target, sdg_target],
    mode="lines",
    name="SDG Target (‚â§12 per 1,000)",
    line=dict(
        color="rgba(50, 205, 50, 0.8)",
        width=2,
        dash="dot"
    ),
))

# Layout with neon styling and dark theme
fig.update_layout(
    title=dict(
        text='<b>Global Average Infant Mortality Rate (1980‚Äì2035) with Projection</b>',
        x=0.5,
        xanchor='center',
        font=dict(
            size=24, 
            family="Arial, sans-serif", 
            color="#00BFFF"  # Deep sky blue
        ),
        pad=dict(t=10, b=10)
    ),
    plot_bgcolor="rgba(0, 0, 0, 0.95)",
    paper_bgcolor="rgba(0, 0, 0, 0.95)",
    font=dict(
        family="Arial, sans-serif",
        size=14,
        color="white"
    ),
    xaxis=dict(
        title="Year",
        title_font=dict(
            size=16,
            color="#00BFFF"
        ),
        showgrid=True,
        gridcolor="rgba(50, 50, 50, 0.5)",
        gridwidth=1,
        range=[1980, 2035],  # Fixed range from 1980 to 2035
        rangeslider=dict(
            visible=True,
            bgcolor="rgba(30, 30, 30, 0.95)",
            bordercolor="rgba(100, 100, 100, 0.5)"
        ),
        rangeselector=dict(
            buttons=[
                dict(step="all", label="All"),
                dict(count=20, step="year", stepmode="backward", label="20 Y"),
                dict(count=10, step="year", stepmode="backward", label="10 Y"),
                dict(count=5, step="year", stepmode="backward", label="5 Y"),
            ],
            bgcolor="rgba(0, 0, 0, 0.7)",
            activecolor="rgba(0, 191, 255, 0.3)"
        ),
        tickmode='linear',
        tick0=1980,
        dtick=5,
        tickfont=dict(color="white")
    ),
    yaxis=dict(
        title="Deaths per 1,000 Infants",
        title_font=dict(
            size=16,
            color="#00BFFF"
        ),
        showgrid=True,
        gridcolor="rgba(50, 50, 50, 0.5)",
        gridwidth=1,
        rangemode="tozero",
        tickfont=dict(color="white")
    ),
    height=650,
    width=1000,
    hovermode="x unified",
    margin=dict(l=80, r=80, t=80, b=80),
    legend=dict(
        font=dict(color="white", size=12),
        bgcolor="rgba(0, 0, 0, 0.7)",
        bordercolor="rgba(255, 255, 255, 0.2)",
        borderwidth=1
    ),
    annotations=[
        dict(
            text=f"Trend Equation: y = {coef[0]:.2f}x + {coef[1]:.2f}",
            xref="paper", yref="paper",
            x=0.02, y=0.05,
            showarrow=False,
            font=dict(size=12, color="rgba(200, 200, 200, 0.8)"),
            bgcolor="rgba(0, 0, 0, 0.7)",
            borderpad=4
        ),
        dict(
            text=f"2035 Projection: ‚âà {trend_ext[-1]:.1f} per 1,000",
            xref="x", yref="y",
            x=2033, y=trend_ext[-1],
            showarrow=True,
            arrowhead=2,
            arrowsize=1,
            arrowwidth=2,
            arrowcolor="rgba(255, 0, 255, 0.8)",
            font=dict(size=12, color="rgba(255, 0, 255, 0.8)"),
            bgcolor="rgba(0, 0, 0, 0.7)",
            bordercolor="rgba(255, 0, 255, 0.5)",
            borderpad=4,
            ax=50, ay=-40
        )
    ]
)

fig.update_xaxes(
    showgrid=True,
    gridwidth=1,
    gridcolor="rgba(50, 50, 50, 0.3)",
    zeroline=False
)

fig.update_yaxes(
    showgrid=True,
    gridwidth=1,
    gridcolor="rgba(50, 50, 50, 0.3)",
    zeroline=False
)

fig.show()
```

<div style="max-width:100%; margin: 0 auto; border: 3px solid #1F77B4; background-color: #E6F2FF; padding: 20px; border-radius: 10px; font-family: Arial, sans-serif; color: #002244;">

  <h2 style="text-align:center; color:#1F77B4; margin-top:0;">
    üìâ Global Infant Mortality Rate (1980‚Äì2035) ‚Äî Neon Trend & Projection
  </h2>

  <p>
    This neon-styled chart visualizes the global decline in <strong>infant mortality</strong> from <strong>‚âà90 deaths per 1,000</strong> in 1980 to just <strong>‚âà14 per 1,000</strong> in 2022. The chart also includes a trendline projection showing a possible drop to <strong>‚âà6 per 1,000</strong> by 2035, well beyond the <strong>SDG target</strong> of ‚â§12 by 2030.
  </p>

  <h3 style="color:#1F77B4;">üìà Observed Trends</h3>
  <ul>
    <li><strong>1980‚Äì2000:</strong> Rapid decline (~1.7 fewer deaths/year) due to immunization campaigns and oral rehydration therapy.</li>
    <li><strong>2000‚Äì2015:</strong> Continued progress (~1.4 deaths/year) supported by expanded maternal care and health system investments.</li>
    <li><strong>Post-2015:</strong> Signs of plateauing in many countries‚Äîslower progress as inequality and fragility persist.</li>
  </ul>

  <h3 style="color:#DA70D6;">üîÆ Projection to 2035</h3>
  <ul>
    <li>The magenta-glow line shows the <strong>OLS trendline projection</strong> from 2022 to 2035.</li>
    <li>The projected rate by 2035 is <strong>‚âà6 per 1,000 infants</strong>, assuming the historical trend continues.</li>
    <li>The neon green dashed line represents the <strong>SDG Target</strong> of ‚â§12 deaths per 1,000 infants by 2030.</li>
  </ul>

  <h3 style="color:#FF7F0E;">üéØ Policy Implications</h3>
  <ul>
    <li><strong>Last-Mile Focus:</strong> Reach high-burden zones with weak infrastructure‚Äîrural areas, conflict zones, and urban slums.</li>
    <li><strong>Digital Health Equity:</strong> Use district-level dashboards to target interventions and monitor change in real time.</li>
    <li><strong>Neonatal Innovation:</strong> Expand use of affordable newborn monitoring, diagnostics, and remote care.</li>
    <li><strong>Post-2030 Planning:</strong> Frame a long-term strategy to sustain momentum and reduce preventable deaths beyond the SDGs.</li>
  </ul>

  <p style="font-style:italic; text-align:center; color:#004080; margin-top:20px;">
    "Every drop in the curve represents lives saved. With continued global focus, 2035 could mark a new era of child survival."
  </p>

</div>

