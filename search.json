[
  {
    "objectID": "Quarto Assignment.html",
    "href": "Quarto Assignment.html",
    "title": "Global Child Mortality Trends",
    "section": "",
    "text": "Global Child Mortality Trends\n\n\nand Influencing Factors\n\n\n\n\nThe Shocking Truth.\n\n\n\n\n\nChildren are not afforded the same opportunities for survival on a global scale. Four out of five children perish before the age of five, with Sub-Saharan Africa (57 %) and South Asia (26 %) experiencing the highest rates of child mortality. In these two regions, only three out of five births are live deliveries. Wealth is also correlated with survival, as twice as many children from impoverished households die before the age of five as those from wealthy families.\n\n\n\n\nCode\nimport pandas as pd\nimport itertools\nimport plotly.express as px\n\ndf1 = pd.read_csv('unicef_data.csv').rename(columns={\n    'Country ': 'country',\n    'Year': 'year',\n    'Mortality Rate per 1,000 infants aged 1 month': 'infant_mortality_rate'\n})\ndf1['year'] = df1['year'].astype(int)\ndf1['country'] = df1['country'].str.strip()\n\n# Create full country-year combinations for animation\ncountries = sorted(df1['country'].unique())\nyears = list(range(1980, 2023))\nfull_index = list(itertools.product(countries, years))\nfull_df = pd.DataFrame(full_index, columns=['country','year'])\n\n# Merge with actual data\nfull_df = full_df.merge(\n    df1[['country','year','infant_mortality_rate']],\n    on=['country','year'], how='left'\n)\n\n# Create animated choropleth map\nfig = px.choropleth(\n    full_df,\n    locations='country',\n    locationmode='country names',\n    color='infant_mortality_rate',\n    hover_name='country',\n    animation_frame='year',\n    animation_group='country',\n    projection='natural earth',\n    category_orders={'year': years},\n    title='&lt;b&gt;&lt;u&gt;Infant Mortality Rate Over Time (1980‚Äì2022)&lt;/u&gt;&lt;/b&gt;',\n    color_continuous_scale=px.colors.sequential.Reds,\n    labels={'infant_mortality_rate': 'Infant Mortality (per 1 000)'}\n)\n\nfig.update_layout(\n    title_x=0.5,                    # center the title\n    title_font=dict(                # adjust font settings\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    )\n)\n\n# Style map: ocean and land colors\nfig.update_geos(\n    showocean=True,\n    oceancolor='rgb(0, 105, 148)',\n    showland=True,\n    landcolor='white'\n)\n\n# Colorbar title vertical with dynamic scaling per frame\ndef_colorbar = dict(title='Deaths per 1,000 Infants', title_side='right')\nfig.update_layout(\n    height=700,\n    width=1100,\n    margin=dict(l=0, r=0, t=50, b=0),\n    coloraxis_colorbar=def_colorbar\n)\n\n# Animation speed\nif fig.layout.updatemenus:\n    btn = fig.layout.updatemenus[0].buttons[0]\n    btn.args[1]['frame']['duration'] = 500\n    btn.args[1]['transition']['duration'] = 300\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nA Global Journey in Shades of Red: Infant Mortality (1980‚Äì2022)\n\n\nToday‚Äôs Snapshot (2022)\n\n\nOn the map‚Äôs final frame‚Äî2022‚Äîwe confront a world of progress and persistence:\n\n\n\nNiger (‚âà86 ‚Ä∞): Still the darkest red, reflecting entrenched malnutrition and fragile health services that leave one in twelve newborns at risk of not surviving their first month.\n\n\nSomalia (‚âà82 ‚Ä∞) & Chad (‚âà75 ‚Ä∞): Conflict and displacement perpetuate high mortality despite modest economic gains‚Äîshowing how stability is as crucial as wealth.\n\n\nCentral African Republic (‚âà73 ‚Ä∞) & Sierra Leone (‚âà71 ‚Ä∞): Emerging from crises yet trapped in a high-mortality band, underscoring that recovery must be paired with sustained health-system rebuilds.\n\n\nSouth Asia‚Äôs Hotspots: Afghanistan (~65 ‚Ä∞) and Pakistan (~55 ‚Ä∞) remain deeper shades of red than their regional peers, highlighting gaps in vaccination coverage and maternal care.\n\n\nBright Spots: Rwanda (~25 ‚Ä∞), Bangladesh (~22 ‚Ä∞), and Vietnam (~14 ‚Ä∞) stand out in pastel hues, emblematic of how targeted immunization drives and primary-care networks can rewrite national trajectories.\n\n\n\n1980 vs.¬†2022: Dramatic Shifts\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport math\n\ncountry_replacements = {\n    'United States': 'United States of America',\n    'Czechia': 'Czech Republic',\n    'Bahamas': 'The Bahamas',\n    'Congo, the Democratic Republic of the': 'Democratic Republic of the Congo',\n    'Micronesia, Federated States of': 'Micronesia',\n    'Macedonia, the former Yugoslav Republic of': 'North Macedonia',\n    'Palestinian Territory, Occupied': 'Palestine'\n}\n\ndf = pd.read_csv('unicef_data.csv', skipinitialspace=True)\ndf.columns = df.columns.str.strip()\ndf['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n\nmeta = pd.read_csv('unicef_metadata.csv', skipinitialspace=True)\nmeta.columns = meta.columns.str.strip()\nmeta['Year'] = pd.to_numeric(meta['Year'], errors='coerce')\n\ndf_2022 = df[df['Year'] == 2022].copy()\nmeta_2022 = meta[meta['Year'] == 2022].copy()\n\n# Apply country name replacements\ndf_2022['Country'] = df_2022['Country'].replace(country_replacements)\nmeta_2022['Country'] = meta_2022['Country'].replace(country_replacements)\n\n# Merge in Population and Life expectancy\ndf_2022 = df_2022.merge(\n    meta_2022[\n        ['Country',\n         'Population, total',\n         'Life expectancy at birth, total (years)']\n    ],\n    on='Country',\n    how='left'\n)\n\n# Rename columns for clarity\ndf_2022 = df_2022.rename(columns={\n    'Mortality Rate per 1,000 infants aged 1 month': 'Infant Mortality Rate',\n    'Population, total': 'Population',\n    'Life expectancy at birth, total (years)': 'Life Expectancy'\n})\n\n# Convert columns to numeric and drop rows with missing mortality data\nfor col in ['Infant Mortality Rate', 'Population', 'Life Expectancy']:\n    df_2022[col] = pd.to_numeric(df_2022[col], errors='coerce')\ndf_2022 = df_2022.dropna(subset=['Infant Mortality Rate'])\n\n# Create choropleth map visualization\nfig = px.choropleth(\n    df_2022,\n    locations='Country',\n    locationmode='country names',\n    color='Infant Mortality Rate',\n    color_continuous_scale='OrRd',\n    title='üåçüöÄ Infant Mortality Rate per 1,000 Infants (2022) - Satellite View',\n    labels={'Infant Mortality Rate': 'Infant Mortality Rate'},\n    hover_name='Country',\n    hover_data={\n        'Infant Mortality Rate': ':.2f',\n        'Population': ':.0f',\n        'Life Expectancy': ':.1f',\n        'Year': False\n    },\n    template='plotly_dark'\n)\n\n# Add star-like points for space effect\nfig.add_trace(go.Scattergeo(\n    lon=np.random.uniform(-180, 180, 500),\n    lat=np.random.uniform(-90, 90, 500),\n    mode='markers',\n    marker=dict(size=1, color='white', opacity=0.3),\n    showlegend=False\n))\n\n# Create satellite orbit path\norbit_lon = 70  # Orbit longitudinal center\norbit_lat = 30  # Orbit latitudinal center\norbit_radius_lon = 30\norbit_radius_lat = 15\ntheta = np.linspace(0, 2*np.pi, 100)\norbit_lons = orbit_lon + orbit_radius_lon * np.cos(theta)\norbit_lats = orbit_lat + orbit_radius_lat * np.sin(theta)\n\n# Add orbit path\nfig.add_trace(go.Scattergeo(\n    lon=orbit_lons,\n    lat=orbit_lats,\n    mode='lines',\n    line=dict(width=1, color='rgba(100,150,255,0.3)'),\n    showlegend=False\n))\n\n# Add satellite at a position on the orbit\nsatellite_pos = 45  # Position along orbit (in degrees)\nsatellite_lon = orbit_lon + orbit_radius_lon * np.cos(np.radians(satellite_pos))\nsatellite_lat = orbit_lat + orbit_radius_lat * np.sin(np.radians(satellite_pos))\n\n# Create a simple satellite icon using a custom marker\nfig.add_trace(go.Scattergeo(\n    lon=[satellite_lon],\n    lat=[satellite_lat],\n    mode='markers+text',\n    text=['üõ∞Ô∏è'],\n    textfont=dict(size=30),\n    textposition='middle center',\n    marker=dict(size=0),  # Hide the marker, only show the text emoji\n    showlegend=False\n))\n\n# Configure map projection and appearance\nfig.update_geos(\n    projection_type='orthographic',\n    center=dict(lon=20, lat=10),\n    projection_rotation=dict(lon=20, lat=10, roll=0),\n    showframe=False,\n    showcoastlines=True,\n    coastlinecolor='rgba(255,255,255,0.2)',\n    bgcolor='black',\n    lakecolor='rgba(0,50,100,0.3)',\n    showland=True,\n    landcolor='rgb(10,30,50)',\n    showocean=True,\n    oceancolor='rgba(0,30,80,0.8)',\n    subunitcolor='gray'\n)\n\n# Update layout with space-themed styling\nfig.update_layout(\n    paper_bgcolor='black',\n    plot_bgcolor='black',\n    coloraxis_colorbar=dict(\n        title='Infant Mortality Rate',\n        tickformat='.1f',\n        len=0.75,\n        thickness=20,\n        outlinewidth=1,\n        outlinecolor='white',\n        title_side='right'\n    ),\n    title_font=dict(size=28, family='Arial', color='white'),\n    margin=dict(l=0, r=0, t=80, b=0),\n    annotations=[\n        # Original citation\n        dict(\n            text=\"Data: UNICEF, 2022 | Visualization: Planetary Science Division\",\n            x=0.01, y=0.01, xref='paper', yref='paper',\n            showarrow=False,\n            font=dict(size=12, color='white'),\n            bgcolor='rgba(0,0,0,0.5)'\n        )\n    ]\n)\n\n# Display the figure\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüåçüöÄ Figure: Infant Mortality Rate per 1,000 Infants (2022) ‚Äì Satellite View\n\n\nThe orthographic choropleth above reveals the stark global disparities in infant mortality around the world. By mapping each country‚Äôs 2022 rate‚Äîshaded from light amber (low rates) to deep red (high rates)‚Äîthe visualization captures both the immense progress achieved in many regions and the persistent challenges that remain.\n\n0.1  Overarching Global Landscape\n\nLow-Mortality ‚ÄúGreen Zone‚Äù: Much of Europe, East Asia, North America, and Australasia appear in the palest amber‚Äîoften fewer than 5 deaths per 1,000 infants. These countries have near-universal immunization and advanced neonatal care.\n\nIntermediate Rates: Large swathes of Latin America, North Africa, and parts of South-East Asia cluster around 5‚Äì15 per 1,000, reflecting substantial gains but ongoing rural and urban disparities.\n\nHigh-Mortality ‚ÄúRed Belt‚Äù: The deepest reds emerge over sub-Saharan Africa‚Äîespecially in the Sahel, Horn, and Central Africa‚Äîwhere rates often exceed 50‚Äì60 per 1,000, driven by conflict, poverty, and fragmented health systems.\n\n\n\n0.2  Regional Deep Dives\n\nSub-Saharan Africa:\n\nThe Democratic Republic of the Congo, Niger, Chad, and Somalia sit at the top (60+). Political instability and weak infrastructure fuel these high rates.\n\nRwanda and Ethiopia, in warmer oranges (25‚Äì40), showcase the impact of recent community-health initiatives and vaccination drives.\n\n\nSouth Asia:\n\nIndia and Pakistan appear in mid-reds (30‚Äì45), with subnational pockets lagging behind national averages. Neonatal resuscitation and maternal-nutrition programs are key to further gains.\n\n\nLatin America & the Caribbean:\n\nMost countries are pale-amber (5‚Äì10), yet Haiti (~30) stands out, highlighting the fragility of its health infrastructure.\n\n\nEast Asia & Pacific:\n\nChina, Japan, South Korea, and Australia occupy the lightest shades (&lt;3), a testament to decades of investment in perinatal care. Small Pacific states vary more due to geographic dispersion.\n\n\n\n\n0.3  Correlations with Population & Life Expectancy\nHovering reveals that high-mortality nations often have lower life expectancy and younger, faster-growing populations. Conversely, low-mortality countries enjoy higher life expectancy (75+ years) and aging demographics‚Äîunderscoring the lifelong benefits of strong early-life health.\n\n\n0.4  Policy Implications & Strategic Priorities\n\nüéØ Target High-Burden Zones: Focus on the Sahel, Horn of Africa, and parts of South Asia with mobile clinics and community-health workers.\n\nüõ°Ô∏è Build Resilient Systems: Strengthen facilities to withstand conflicts, climate shocks, and pandemics via tele-medicine and decentralized care.\n\nüìà Granular Data & Accountability: Improve vital-registration systems and subnational dashboards to identify and address local hotspots.\n\nü§ù Cross-Sector Collaboration: Unite water, sanitation, nutrition, and education efforts with medical programs to break cycles of poverty and ill health.\n\n\n\n\n\n\nCode\nimport requests\nfrom io import BytesIO\nfrom PIL import Image\nimport pycountry\nimport plotly.graph_objects as go\n\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\ndf[\"Country\"] = df[\"Country\"].str.strip()\n\ndf2022 = (\n    df[(df.Year == 2022) & (df.Gender == \"Total\")]\n      [[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\n      .rename(columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"})\n)\n\ntop20 = (\n    df2022.nlargest(20, \"Mortality5\")\n           .sort_values(\"Mortality5\", ascending=True)\n           .reset_index(drop=True)\n)\n\n# 2) Load metadata for birth rate crude & life expectancy\nmeta = pd.read_csv(\"unicef_metadata.csv\")\nmeta.columns = meta.columns.str.strip()\nmeta[\"Country\"] = meta[\"Country\"].str.strip()\nmeta22 = meta[meta.Year == 2022].copy()\n\n# Convert birth rate crude and life expectancy to numeric\nmeta22.loc[:, \"BirthRate\"] = pd.to_numeric(meta22[\"Birth rate, crude (per 1,000 people)\"], errors=\"coerce\")\nmeta22.loc[:, \"LifeExp\"] = pd.to_numeric(meta22[\"Life expectancy at birth, total (years)\"], errors=\"coerce\")\n\n# Merge metadata into top20 on Country\ntop20 = top20.merge(\n    meta22[[\"Country\", \"BirthRate\", \"LifeExp\"]],\n    on=\"Country\",\n    how=\"left\"\n)\n\n# 3) ISO2 lookup & sample flag color for bars\ndef iso2(name):\n    try:\n        return pycountry.countries.lookup(name).alpha_2.lower()\n    except:\n        return None\n\ndef sample_flag_color(code):\n    url = f\"https://flagcdn.com/40x30/{code}.png\"\n    img = Image.open(BytesIO(requests.get(url).content)).convert(\"RGBA\")\n    r, g, b, _ = img.resize((1,1), Image.LANCZOS).getpixel((0,0))\n    return f\"#{r:02x}{g:02x}{b:02x}\"\n\ncolors, flags = [], []\nfor c in top20[\"Country\"]:\n    code2 = iso2(c)\n    if code2:\n        colors.append(sample_flag_color(code2))\n        flags.append(f\"https://flagcdn.com/20x15/{code2}.png\")\n    else:\n        colors.append(\"lightgray\")\n        flags.append(None)\n\ntop20[\"color\"] = colors\ntop20[\"flag_url\"] = flags\n\n# 4) Plotly bar chart with birth rate & life expectancy in hover\nfig = go.Figure(\n    go.Bar(\n        x=top20[\"Mortality5\"],\n        y=top20[\"Country\"],\n        orientation=\"h\",\n        marker_color=top20[\"color\"],\n        customdata=top20[[\"BirthRate\", \"LifeExp\"]],\n        hovertemplate=(\n            \"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;\"\n            \"Mortality: %{x:.1f} per 1,000&lt;br&gt;\"\n            \"Birth rate: %{customdata[0]:.1f} per 1,000&lt;br&gt;\"\n            \"Life exp: %{customdata[1]:.1f} yrs&lt;br&gt;\"\n            \"&lt;extra&gt;&lt;/extra&gt;\"\n        )\n    )\n)\n\n# 5) Overlay mini-flags\nimages = []\nfor _, row in top20.iterrows():\n    if row.flag_url:\n        images.append(dict(\n            source=row.flag_url,\n            xref=\"x\", yref=\"y\",\n            x=row[\"Mortality5\"] + 2,\n            y=row[\"Country\"],\n            xanchor=\"left\", yanchor=\"middle\",\n            sizex=3, sizey=0.4\n        ))\nfig.update_layout(images=images)\n\n# Add global reference line as an actual trace with tooltip\nglobal_avg = 37.7  # Global average mortality rate for children under 5\nfig.add_trace(\n    go.Scatter(\n        x=[global_avg, global_avg],\n        y=[-0.5, len(top20)-0.5],\n        mode=\"lines\",\n        line=dict(color=\"rgba(255, 0, 0, 0.8)\", width=3, dash=\"dash\"),\n        name=\"Global Average\",\n        hoverinfo=\"text\",\n        hovertext=f\"Global Average: {global_avg} deaths per 1,000 children\",\n    )\n)\n\n# Add clearer annotation for the reference line\nfig.add_annotation(\n    x=global_avg,\n    y=len(top20),\n    text=\"Global Average\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"rgba(255, 0, 0, 0.8)\",\n    ax=0,\n    ay=-30,\n    font=dict(size=14, color=\"rgba(255, 0, 0, 0.8)\"),\n    bgcolor=\"rgba(255, 255, 255, 0.8)\",\n    bordercolor=\"rgba(255, 0, 0, 0.8)\",\n    borderwidth=1,\n    borderpad=4\n)\n\nmax_val = top20[\"Mortality5\"].max()\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Countries With The Highest Rate of Child Mortality (5 Years of Age)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_title=\"Deaths per 1,000 Children at Age 5\",\n    yaxis_title=\"Country\",\n    template=\"simple_white\",\n    width=900,\n    height=600\n)\n\nfig.update_xaxes(range=[0, max_val * 1.15])\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nThe Hardest Places to Reach Age 5 in 2022\n\n\nWhile neonatal mortality often commands the spotlight, death before a fifth birthday remains a critical indicator of sustained health system performance, nutrition, and social stability. This analysis presents the 20 countries with the highest child-5 mortality rates in 2022, interrogating not only the raw figures but the underlying drivers and regional patterns. Every country in this visualization exceeds the global average of 37.7 deaths per 1,000 children.\n\n\nKey Findings\n\n\n\nHighest Burden Concentration: Somalia (74.3 ‚Ä∞) and South Sudan (71.2 ‚Ä∞) reflect protracted conflict, displacement, and weakened health systems‚Äîboth nearly double the global average.\n\n\nRegional Clustering: West & Central Africa account for 9 of the top 10 countries, highlighting shared challenges of underinvestment, climate shocks, and political fragility. All countries in this region exceed the global average by at least 50%.\n\n\nNotable Divergences: Chad (60.2 ‚Ä∞) and Niger show that community midwifery and modest program gains can begin to decelerate mortality5 even under resource constraints. Rwanda (~25 ‚Ä∞) and Uganda (~42 ‚Ä∞) have halved mortality5 since 2012 through vaccination, growth-monitoring, and decentralized care.\n\n\n\nThe red dashed line at 37.7 deaths per 1,000 children represents the global average mortality rate for children at age 5. This reference point provides critical context‚Äîall 20 countries featured exceed this threshold, with the most severe cases more than doubling this already sobering global figure.\n\n\nHigh child-5 mortality indicates gaps in post-neonatal interventions‚Äînutrition supplementation, malaria prophylaxis, and early childhood development programs‚Äîoften failing to reach the most vulnerable. Gender and equity considerations further compound risk, as impoverished contexts can disproportionately limit girls‚Äô access to care and education.\n\n\nPolicy Implications\n\n\n\nIntegrated Programming: Align WASH, nutrition, and immunization under a unified framework spanning ‚ÄúFirst 1,000 Days‚Äù through ‚ÄúSecond 1,000 Days.‚Äù\n\n\nConflict-Sensitive Delivery: In Somalia and South Sudan, leverage local NGOs and mobile health units to maintain continuity of care.\n\n\nData-Driven Adaptation: Employ rapid household surveys to detect mortality spikes from droughts or outbreaks and deploy rapid-response task forces.\n\n\nBridge the Gap: Target interventions to help high-burden countries move toward and eventually below the global average reference line.\n\n\n\nChild-5 mortality remains alarmingly high in a concentrated set of countries. The stark contrast between upper echelon nations (Somalia, South Sudan) and near-success stories (Rwanda, Uganda) affirms that targeted, context-specific interventions can dramatically alter outcomes. Realizing SDG 3.2‚Äîending preventable deaths of children under 5‚Äîwill demand both scaling proven interventions and innovating delivery in fragile, high-burden settings.\n\n\n‚ÄúReaching age five should be the norm, not the exception. This chart signals where the world must intensify efforts to make survival not a privilege of geography, but a universal right. The global average line reminds us how far we‚Äôve come‚Äîand how far these 20 countries still have to go.‚Äù\n\n\nData source: UNICEF 2022 child-5 mortality. Global average: 37.7 deaths per 1,000 children.\n\n\n\n\n\nA Somalian mother tenderly holds her infant, embodying both the universal bond of motherhood and the stark realities of child survival in regions with high infant mortality.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Load and clean data\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\n\n# Prepare 2022 data\ndf2022 = df[df[\"Year\"] == 2022]\ntotal = (\n    df2022[df2022[\"Gender\"] == \"Total\"]\n    .sort_values(\"Mortality rate per 1,000 children aged 5\", ascending=False)\n    .head(20)\n)\ntop20 = total[\"Country\"].tolist()\n\n# Melt data for Male/Female\ndf_melt = df2022[\n    df2022[\"Country\"].isin(top20) & df2022[\"Gender\"].isin([\"Male\", \"Female\"])\n].copy()\n\n# Create 2D stacked bar chart\nfig = px.bar(\n    df_melt,\n    x=\"Country\",\n    y=\"Mortality rate per 1,000 children aged 5\",\n    color=\"Gender\",\n    category_orders={\"Country\": top20},\n    color_discrete_map={\n        \"Female\": \"pink\",\n        \"Male\": \"blue\"\n    },\n    hover_data={\n        \"Mortality rate per 1,000 children aged 5\": True,\n        \"Gender\": True,\n        \"Country\": False\n    },\n)\n\n# Layout updates\nfig.update_layout(\n    barmode=\"stack\",  # Default to stacked\n    title='&lt;b&gt;&lt;u&gt;Gender Disparity in Child Mortality Rate&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_tickangle=-45,\n    yaxis_title=\"Mortality rate per 1,000 children aged 5\",\n    template=\"simple_white\",\n    width=1000,\n    height=600,\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            buttons=list([\n                dict(\n                    label=\"Stacked\",\n                    method=\"relayout\",\n                    args=[{\"barmode\": \"stack\"}]\n                ),\n                dict(\n                    label=\"Grouped\",\n                    method=\"relayout\",\n                    args=[{\"barmode\": \"group\"}]\n                )\n            ]),\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.5,\n            xanchor=\"center\",\n            y=1.15,\n            yanchor=\"top\"\n        )\n    ]\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nGender Disparity in Child Mortality Rate (2022)\n\n\nWhen Boys and Girls Face Different Odds: Gender Gaps in Under-5 Mortality (2022)\n\n\nThis interactive stacked bar chart unveils how gender shapes child survival in the 20 countries with the highest under-5 mortality at age five‚Äîrevealing not just where lives are lost, but which children are most at risk.\n\n\nTop Five Hotspots by Combined Mortality\n\n\n\n\n\nRank\n\n\nCountry\n\n\nTotal Rate (‚Ä∞)\n\n\nFemale (‚Ä∞)\n\n\nMale (‚Ä∞)\n\n\n\n\n\n\n1\n\n\nSomalia\n\n\n67.1\n\n\n62.7\n\n\n71.3\n\n\n\n\n2\n\n\nSouth Sudan\n\n\n58.5\n\n\n58.1\n\n\n58.9\n\n\n\n\n3\n\n\nSierra Leone\n\n\n58.4\n\n\n56.6\n\n\n60.2\n\n\n\n\n4\n\n\nNiger\n\n\n57.1\n\n\n55.4\n\n\n58.8\n\n\n\n\n5\n\n\nCentral African Republic\n\n\n56.3\n\n\n54.2\n\n\n58.4\n\n\n\n\n\n‚ÄúThe gap between pink and blue isn‚Äôt just color‚Äîit‚Äôs a measure of how societal, biological, and systemic factors differently shape the odds for boys and girls.‚Äù\n\n\nWhat the Chart Reveals\n\n\n\nPersistent Male Disadvantage: In every one of these countries, boys face higher mortality rates than girls‚Äîon average about 3 ‚Ä∞ higher‚Äîhighlighting a universal trend where male infants and young children are biologically and socially more vulnerable.\n\n\nStark vs.¬†Narrow Gaps: Somalia‚Äôs 8.6 ‚Ä∞ gap signals urgent need for male‚Äêfocused outreach, while South Sudan‚Äôs near-parity reflects systemic failure affecting both genders equally.\n\n\nRegional Clusters: West and Central African nations dominate the top ranks, underscoring how conflict, poverty, and weak health systems shape gendered outcomes.\n\n\n\nFrom Insight to Action\n\n\n\nDesign Male-Sensitive Programs: In countries with large male excess mortality, address barriers to boys‚Äô nutrition, immunization, and care-seeking.\n\n\nSystemic Upgrades: Where both sexes are at high risk, invest in clean water, sanitation, and basic healthcare access.\n\n\nTrack Progress by Gender: Monitor year-on-year shifts to ensure equity in health outcomes.\n\n\n\nData source: UNICEF 2022 under-5 mortality by gender.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load your data\ndf = pd.read_csv(\"unicef_additional.csv\")\nmeta = pd.read_csv(\"unicef_metadata.csv\")\n\n# Clean columns\ndf.columns = df.columns.str.strip()\ndf[\"Country\"] = df[\"Country\"].str.strip()\nmeta.columns = meta.columns.str.strip()\nmeta[\"Country\"] = meta[\"Country\"].str.strip()\n\n# Filter 2022 and Gender = Total\ndf2022 = df[(df[\"Year\"] == 2022) & (df[\"Gender\"] == \"Total\")][[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\ndf2022 = df2022.rename(columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"})\n\nmeta22 = meta[meta[\"Year\"] == 2022].copy()\nmeta22[\"BirthRate\"] = pd.to_numeric(meta22[\"Birth rate, crude (per 1,000 people)\"], errors=\"coerce\")\nmeta22[\"LifeExp\"] = pd.to_numeric(meta22[\"Life expectancy at birth, total (years)\"], errors=\"coerce\")\n\n# Merge\nfull = df2022.merge(meta22[[\"Country\", \"BirthRate\", \"LifeExp\"]], on=\"Country\", how=\"inner\")\nfull = full.dropna()\n\n# Create 3D Scatter Plot\nfig = go.Figure(data=[go.Scatter3d(\n    x=full[\"BirthRate\"],\n    y=full[\"LifeExp\"],\n    z=full[\"Mortality5\"],\n    mode='markers',\n    marker=dict(\n        size=full[\"BirthRate\"] / 3,\n        color=full[\"Mortality5\"],\n        colorscale=\"Viridis\",\n        colorbar=dict(title=\"Mortality Rate\"),\n        opacity=0.8,\n        line=dict(width=0.5, color='darkgray'),\n    ),\n    text=full[\"Country\"],\n    hovertemplate=(\n        \"&lt;b&gt;%{text}&lt;/b&gt;&lt;br&gt;\"\n        \"Birth Rate: %{x:.1f}&lt;br&gt;\"\n        \"Life Expectancy: %{y:.1f}&lt;br&gt;\"\n        \"Mortality5: %{z:.1f}&lt;extra&gt;&lt;/extra&gt;\"\n    )\n)])\n\nfig.update_layout(\n    title=\"&lt;b&gt;3D View of Birth Rate, Life Expectancy, and Child Mortality (2022)&lt;/b&gt;\",\n    template=\"simple_white\",\n    width=1000,\n    height=800,\n    scene=dict(\n        xaxis_title=\"Birth Rate\",\n        yaxis_title=\"Life Expectancy\",\n        zaxis_title=\"Child Mortality Rate\",\n        xaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        yaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        zaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        bgcolor=\"white\"\n    ),\n    scene_camera=dict(\n        eye=dict(x=1.6, y=1.6, z=1.2)  # 3D tilt\n    ),\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüåç 3D Analysis: Birth Rate, Life Expectancy, and Child Mortality (2022)\n\n\n\nSomalia is once again on the brink of starvation.\n\n\n\n\nThis interactive 3D visualization reveals the complex and often tragic relationship between birth rates, life expectancy, and child mortality around the world.\n\n\n\nX-axis: Birth Rate (per 1,000 people)\n\n\nY-axis: Life Expectancy at Birth (years)\n\n\nZ-axis: Mortality Rate of Children Aged 5 (deaths per 1,000)\n\n\n\nüìä Key Insights\n\n\n\nSomalia emerges as a devastating outlier, with a birth rate above 40, life expectancy barely above 55, and one of the highest child mortality rates globally. These factors reflect a deep humanitarian crisis.\n\n\nCountries like Nigeria, Chad, and the Central African Republic also suffer from high fertility and fragile systems that exacerbate mortality.\n\n\nLife expectancy remains low in these regions due to poor access to prenatal care, clean water, education, and postnatal services.\n\n\nIn contrast, countries like Japan, Germany, and Australia show the impact of low birth rates, high life expectancy, and strong investment in healthcare and education.\n\n\n\n‚ö° Deeper Analysis\n\n\nA high birth rate is not inherently negative, but when paired with low life expectancy and high child mortality, it often signals systemic failures. In such environments, large families can be a response to expected loss.\n\n\nThe 3D chart visualizes this structural inequality ‚Äî a clear divide between the Global North and South ‚Äî despite decades of development aid. It underscores how public health is inseparable from issues of poverty, conflict, education, and climate vulnerability.\n\n\nüí¨ Conclusion: The 3D chart makes it clear: where you are born still largely determines whether you survive childhood. Immediate humanitarian aid is essential, but only long-term, systemic investments in health, education, and equity will close the survival gap.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\nmort = pd.read_csv(\"unicef_data.csv\")\nmeta = pd.read_csv(\"unicef_metadata.csv\")\n\nmort.columns = mort.columns.str.strip()\nmeta.columns = meta.columns.str.strip()\n\nmort2022 = mort[mort[\"Year\"] == 2022].copy()\nmort2022.rename(columns={\"Mortality Rate per 1,000 infants aged 1 month\": \"Mortality\"}, inplace=True)\n\nmeta2022 = meta[meta[\"Year\"] == 2022].copy()\n\n# CHANGE: Use GNI instead of GDP\nmeta2022[\"GNI_pc\"] = (\n    meta2022[\"GNI (current US$)\"]   # &lt;- Adjusted here\n    .str.replace(r\"[\\$,]\", \"\", regex=True)\n    .astype(float)\n)\nmeta2022[\"Population\"] = meta2022[\"Population, total\"].astype(float)\n\nafrican_countries = [\n    \"Algeria\", \"Angola\", \"Benin\", \"Botswana\", \"Burkina Faso\", \"Burundi\",\n    \"Cabo Verde\", \"Cameroon\", \"Central African Republic\", \"Chad\", \"Comoros\",\n    \"Congo, the Democratic Republic of the\", \"Congo\", \"Cote d'Ivoire\",\n    \"Djibouti\", \"Egypt\", \"Equatorial Guinea\", \"Eritrea\", \"Eswatini\",\n    \"Ethiopia\", \"Gabon\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Kenya\",\n    \"Lesotho\", \"Liberia\", \"Libya\", \"Madagascar\", \"Malawi\", \"Mali\", \"Mauritania\",\n    \"Mauritius\", \"Morocco\", \"Mozambique\", \"Namibia\", \"Niger\", \"Nigeria\", \"Rwanda\",\n    \"Sao Tome and Principe\", \"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Somalia\",\n    \"South Africa\", \"South Sudan\", \"Sudan\", \"Tanzania\", \"Togo\", \"Tunisia\", \"Uganda\",\n    \"Zambia\", \"Zimbabwe\"\n]\n\ndf = pd.merge(\n    mort2022[mort2022[\"Country\"].isin(african_countries)][[\"Country\", \"Mortality\"]],\n    meta2022[meta2022[\"Country\"].isin(african_countries)][[\"Country\", \"GNI_pc\", \"Population\"]],\n    on=\"Country\"\n).dropna()\n\nfig = px.scatter(\n    df,\n    x=\"GNI_pc\",  # &lt;-- CHANGED from GDP_pc to GNI_pc\n    y=\"Mortality\",\n    size=\"Population\",\n    color=\"Mortality\",\n    color_continuous_scale=\"Reds\",\n    size_max=60,\n    hover_name=\"Country\",\n    hover_data={\"GNI_pc\": \":.0f\", \"Mortality\": \":.1f\", \"Population\": \":.0f\"},\n    labels={\"GNI_pc\": \"GNI per Capita (2015 US$)\", \"Mortality\": \"Infant Mortality (per 1‚ÄØ000)\"},\n    title=\"Infant Mortality vs. GNI per Capita for African Countries (2022)\",\n)\n\nfig.update_xaxes(type=\"log\")\n\nX = np.log(df[\"GNI_pc\"].values).reshape(-1, 1)\ny = df[\"Mortality\"].values\nmodel = LinearRegression().fit(X, y)\nx_range = np.linspace(X.min(), X.max(), 100)\ny_pred = model.predict(x_range.reshape(-1, 1))\n\nresid = y - model.predict(X)\nsigma = resid.std(ddof=1)\nci = 1.96 * sigma\nupper = y_pred + ci\nlower = y_pred - ci\n\nfig.add_trace(go.Scatter(\n    x=np.exp(x_range),\n    y=y_pred,\n    mode=\"lines\",\n    name=\"Trendline\",\n    line=dict(color=\"black\", dash=\"dash\")\n))\nfig.add_trace(go.Scatter(\n    x=np.concatenate([np.exp(x_range), np.exp(x_range)[::-1]]),\n    y=np.concatenate([upper, lower[::-1]]),\n    fill=\"toself\",\n    fillcolor=\"rgba(0,0,0,0.1)\",\n    line=dict(color=\"rgba(255,255,255,0)\"),\n    hoverinfo=\"skip\",\n    showlegend=False,\n))\n\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Infant Mortality vs. GNI per Capita for African Countries (2022)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    template=\"simple_white\",\n    width=900,\n    height=550,\n    yaxis_title=\"Infant Mortality (per 1 000)\",\n    legend=dict(title=\"\", yanchor=\"top\", y=0.99, xanchor=\"left\", x=0.01)\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nGross National Income per Capita vs.¬†African Infant Mortality\n\n\nThe scatter plot reveals a pronounced inverse relationship between GNI per capita and infant mortality: generally, the poorer a country, the higher the infant mortality rate. However, the analysis uncovers severe disparities that suggest economic wealth alone does not fully protect children‚Äôs survival.\n\n\nCountries such as Nigeria, Chad, Central African Republic, and Somalia stand out with alarmingly high infant mortality rates, despite varying income levels. Nigeria, notably Africa‚Äôs largest economy by total GDP, exhibits one of the highest infant mortality rates, exposing deep inequalities in wealth distribution, governance failure, and healthcare system fragility.\n\n\nConversely, countries like Mauritius, Seychelles, and Tunisia demonstrate exceptional performance, achieving low mortality rates even with moderate GNI figures compared to richer nations. These successes highlight that strategic investments in maternal health, education, and public health systems can outperform mere economic growth.\n\n\nThe dispersion of points around the regression line also signals that regional instability, conflict, and weak institutions significantly worsen outcomes. South Sudan and Somalia, for example, suffer from persistent humanitarian crises that are not captured by GNI metrics alone.\n\n\nIn summary, while higher GNI per capita tends to correlate with lower infant mortality, the data compellingly argue that political stability, equitable healthcare access, and targeted social investments are critical determinants of child survival in Africa ‚Äî far beyond economic figures alone.\n\n\n\n\nCode\nimport numpy as np\nimport plotly.express as px\n\nafrican_countries = [\n    'Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo', \n    'Congo, Democratic Republic of the', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', \n    'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', \n    'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa', 'South Sudan', 'Sudan', \n    'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe'\n]\n\n# Load data\nmort = pd.read_csv('unicef_data.csv')\ngdp = pd.read_csv('unicef_metadata.csv')\n\n# Clean column names (remove leading/trailing spaces)\nmort.columns = mort.columns.str.strip()\ngdp.columns = gdp.columns.str.strip()\n\ncountry_col = 'Country'  # Change if needed, e.g., 'Country Name'\nyear_col = 'Year'        # Change if needed\n\n# Filter for African countries and make copies\nmort_africa = mort[mort[country_col].isin(african_countries)].copy()\ngdp_africa = gdp[gdp[country_col].isin(african_countries)].copy()\n\n# Clean GDP and population columns\ngdp_africa['GDP per capita (constant 2015 US$)'] = pd.to_numeric(\n    gdp_africa['GDP per capita (constant 2015 US$)'].replace(r'[\\$,]', '', regex=True), errors='coerce'\n)\ngdp_africa['Population, total'] = pd.to_numeric(\n    gdp_africa['Population, total'].replace(r'[\\$,]', '', regex=True), errors='coerce'\n)\n\n# Clean mortality column if necessary\nmort_africa['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(\n    mort_africa['Mortality Rate per 1,000 infants aged 1 month'], errors='coerce'\n)\n\n# Merge on country and year\nmerged = pd.merge(\n    mort_africa,\n    gdp_africa,\n    left_on=[country_col, year_col],\n    right_on=[country_col, year_col],\n    how='inner'\n)\n\n# Drop rows with missing required data\nmerged = merged.dropna(subset=[\n    'GDP per capita (constant 2015 US$)',\n    'Mortality Rate per 1,000 infants aged 1 month',\n    'Population, total'\n])\n\nfig = px.scatter(\n    merged,\n    x='GDP per capita (constant 2015 US$)',\n    y='Mortality Rate per 1,000 infants aged 1 month',\n    animation_frame=year_col,\n    animation_group=country_col,\n    size='Population, total',\n    color=country_col,\n    hover_name=country_col,\n    log_x=True,\n    size_max=60,\n    width=1200,\n    height=600,\n    title='&lt;b&gt;&lt;u&gt;African Countries: GDP vs. Infant Mortality (Animated, 1980‚Äì2022)&lt;/u&gt;&lt;/b&gt;'\n)\n\nfig.update_layout(\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    )\n)\n\nfig.update_layout(\n    xaxis_title='GDP per Capita (constant 2015 US$)', \n    yaxis_title='Infant Mortality Rate (per 1,000 infants)'\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nAfrican Economies & Infant Survival in Motion (1980‚Äì2022)\n\n\n&lt;img src=\"images/GDP.png\" alt=\"Africa GDP and Infant Mortality\" style=\"width:300px; height:auto; border-radius:8px; border:1px solid #4682B4;\"&gt;\n\n\nAfrica bears both the heaviest burden of infant mortality and some of the most dynamic economic changes ‚Äî this animated bubble chart zooms in on the continent to reveal where progress has ‚Äî and hasn‚Äôt ‚Äî translated into lives saved.\n\n\n1980 Snapshot\n\n\n\nSomalia, Chad, Niger: Clustered around $200‚Äì$400 GDP per capita with mortality above 150‚Ä∞ ‚Äî fragile beginnings for newborns.\n\n\nSouth Africa & Egypt: Slightly ahead at $1,000‚Äì$2,000 GDP, but still facing mortality rates near 80‚Äì100‚Ä∞.\n\n\n\n2022 Today\n\n\n\nRwanda: Leapt from ~$300 & 150‚Ä∞ in 1980 to ~$800 & 25‚Ä∞ ‚Äî a testament to targeted health and economic reforms.\n\n\nGhana: Progressed from ~$500 & 120‚Ä∞ to $2,400 & ~22‚Ä∞ ‚Äî outpacing peers in child survival despite moderate wealth.\n\n\nSomalia & Chad: Still near the bottom-left in 2022 ($500‚Äì$1,600 GDP & 75‚Äì85‚Ä∞ mortality), highlighting persistent conflict and fragility.\n\n\nSouth Africa: Now at ~$6,000 GDP with mortality ~27‚Ä∞, showing that higher income alone does not erase health inequalities.\n\n\n\nExplore the Journey\n\n\n\nPlay/Pause to witness critical turning points ‚Äî post-2000 health campaigns, economic reforms, and emerging challenges.\n\n\nHover on a bubble at any frame to see country name, GDP per capita, mortality rate, and population for that year.\n\n\nZoom & Pan to explore regional divergence ‚Äî observe how West African nations, for example, evolved differently over time.\n\n\n\nData sources: UNICEF 1980‚Äì2022 Infant Mortality and GDP per Capita (constant 2015 US$)\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\ndf_tot = df[(df[\"Year\"] == 2022) & (df[\"Gender\"] == \"Total\")].copy()\ndf_tot = df_tot[[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\n\ndf_top20 = (\n    df_tot\n    .sort_values(\"Mortality rate per 1,000 children aged 5\", ascending=False)\n    .head(20)\n)\n\n# Military expenditure data\nmeta = pd.read_csv(\"unicef_metadata.csv\")\nmeta.columns = meta.columns.str.strip()\nmeta_2022 = meta[meta[\"Year\"] == 2022].copy()\nmeta_2022[\"Mil_Exp_pctGDP\"] = pd.to_numeric(\n    meta_2022[\"Military expenditure (% of GDP)\"], errors=\"coerce\"\n)\n\n# Merge for the same 20 countries\ndf_merge = pd.merge(\n    df_top20,\n    meta_2022[[\"Country\", \"Mil_Exp_pctGDP\"]],\n    on=\"Country\",\n    how=\"left\"\n).dropna()\n\ndf_merge = df_merge.sort_values(\n    \"Mortality rate per 1,000 children aged 5\", ascending=False\n)\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Bar(\n        x=df_merge[\"Country\"],\n        y=df_merge[\"Mortality rate per 1,000 children aged 5\"],\n        name=\"Child Mortality (per 1 000 at age 5)\",\n        marker_color=\"indianred\"\n    ),\n    secondary_y=False\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df_merge[\"Country\"],\n        y=df_merge[\"Mil_Exp_pctGDP\"],\n        name=\"Military Expenditure (% of GDP)\",\n        mode=\"lines+markers\",\n        marker=dict(color=\"darkblue\")\n    ),\n    secondary_y=True\n)\n\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Top 20 Countries by Child-5 Mortality vs. Military Spending (2022)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_tickangle=-45,\n    template=\"simple_white\",\n    width=900,\n    height=500,\n)\n\nfig.update_yaxes(\n    title_text=\"Mortality rate per 1 000 children (age 5)\",\n    secondary_y=False\n)\nfig.update_yaxes(\n    title_text=\"Military Expenditure (% of GDP)\",\n    secondary_y=True\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nChild Mortality (5 years of age or less) vs.¬†Military Spending (2022)\n\nThe dual-axis chart uncovers key insights into how child mortality and defense budgets intersect among the 20 worst-affected countries:\n\nNiger exhibits the highest child mortality rate, exceeding 200 deaths per 1 000 infants, while its military spending remains relatively low, underscoring a dire health crisis unaddressed by defense allocations.\n\nSouth Sudan boosted its military spedning to $0.38 billion in 2022‚Äîa 77.68 % increase from 2021, despite its high child mortality rate of 58.8 per 1,000 children.\n\nCountries with lower military spending, such as Zambia and Benin, generally record lower mortality rates, suggesting that redirecting resources from defense to healthcare could significantly improve outcomes.\n\nThe chart suggests an inverse relationship in several cases, where higher military expenditure does not correlate with better health, highlighting potential misallocation of resources.\n\n\nThese findings emphasize the urgent need for policymakers to shift budget priorities toward health infrastructure‚Äîsuch as hospitals, clinics, and nutrition programs‚Äîto drive down child mortality.\n\n\n\n\n\nDespite high infant mortality rates, Sudan allocates significant resources to military spending rather than healthcare infrastructure, highlighting a critical policy imbalance affecting child survival.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Load your data\ndf_m = pd.read_csv(\"unicef_additional.csv\", skipinitialspace=True)\ndf_m.columns = df_m.columns.str.strip()\nmeta = pd.read_csv(\"unicef_metadata.csv\", skipinitialspace=True)\nmeta.columns = meta.columns.str.strip()\n\ncountries = [\n    \"Nepal\", \"Niger\", \"Afghanistan\", \"Mali\", \"Madagascar\", \"Yemen\",\n    \"Ivory Coast\", \"Mauritania\", \"Benin\", \"Chad\", \"Pakistan\",\n    \"Senegal\", \"Bangladesh\", \"Guinea\"\n]\n\n# Mortality\nmort2022 = df_m[\n    (df_m[\"Year\"] == 2022) &\n    (df_m[\"Country\"].isin(countries))\n][[\"Country\", \"Mortality rate per 1,000 children aged 5\"]].rename(\n    columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"}\n)\n\n# Hospital beds\nbeds = meta[meta[\"Country\"].isin(countries)][[\"Country\", \"Year\", \"Hospital beds (per 1,000 people)\"]]\nbeds[\"Beds_per_1000\"] = pd.to_numeric(beds[\"Hospital beds (per 1,000 people)\"], errors=\"coerce\")\nbeds_latest = beds.dropna(subset=[\"Beds_per_1000\"]).sort_values(\"Year\").groupby(\"Country\").tail(1)\n\n# Merge\ndf = mort2022.merge(\n    beds_latest[[\"Country\", \"Beds_per_1000\", \"Year\"]],\n    on=\"Country\", how=\"left\"\n)\n\n# Sort by mortality rate for better visualization\ndf = df.sort_values(\"Mortality5\", ascending=False).reset_index(drop=True)\n\n# Make mortality negative for butterfly effect\ndf[\"Mortality5_negative\"] = -df[\"Mortality5\"]\n\n# Calculate max values for axis scaling\nmax_mortality = df[\"Mortality5\"].max()\nmax_beds = df[\"Beds_per_1000\"].max()\naxis_max = max(max_mortality, max_beds) * 1.1  # Add 10% padding\n\n# Create a single figure\nfig = go.Figure()\n\n# Add custom x-axis labels\ntickvals = list(np.arange(0, axis_max, 10))\ntickvals += list(np.arange(0, -axis_max, -10))\nticktext = [str(abs(val)) for val in tickvals]\n\n# Add Hospital Beds Bars (right) - FIXED COLOR TO BLUE\nfig.add_trace(go.Bar(\n    x=df[\"Beds_per_1000\"], \n    y=df[\"Country\"],\n    orientation=\"h\",\n    name=\"Hospital Beds per 1,000\",  # Fixed name\n    marker=dict(color=\"#1E88E5\", opacity=0.85),  # Blue color for hospital beds\n    hovertemplate=\"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;Hospital Beds: %{x:.2f} per 1,000&lt;br&gt;Data Year: %{customdata[0]}&lt;extra&gt;&lt;/extra&gt;\",\n    customdata=df[[\"Year\"]],\n    width=0.7  # Slightly thinner bars\n))\n\n# Add Mortality Bars (left) - FIXED COLOR TO RED\nfig.add_trace(go.Bar(\n    x=df[\"Mortality5_negative\"], \n    y=df[\"Country\"],\n    orientation=\"h\",\n    name=\"Child Mortality per 1,000\",  # Fixed name\n    marker=dict(color=\"#D32F2F\", opacity=0.85),  # Red color for mortality\n    hovertemplate=\"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;Child Mortality: %{customdata:.1f} per 1,000&lt;br&gt;Data Year: 2022&lt;extra&gt;&lt;/extra&gt;\",\n    customdata=df[\"Mortality5\"],\n    width=0.7  # Slightly thinner bars\n))\n\n# Add a zero vertical line\nfig.add_vline(x=0, line_width=2, line_color=\"black\")\n\n# Add average lines\navg_mortality = df[\"Mortality5\"].mean()\navg_beds = df[\"Beds_per_1000\"].mean()\n\nfig.add_shape(\n    type=\"line\",\n    x0=-avg_mortality, y0=-0.5,\n    x1=-avg_mortality, y1=len(df)-0.5,\n    line=dict(color=\"#D32F2F\", width=2, dash=\"dash\"),\n)\n\nfig.add_shape(\n    type=\"line\",\n    x0=avg_beds, y0=-0.5,\n    x1=avg_beds, y1=len(df)-0.5,\n    line=dict(color=\"#1E88E5\", width=2, dash=\"dash\"),\n)\n\n# Add annotations for averages\nfig.add_annotation(\n    x=-avg_mortality,\n    y=-0.5,\n    text=f\"Average: {avg_mortality:.1f}\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"#D32F2F\",\n    ax=-40,\n    ay=20,\n    font=dict(size=12, color=\"#D32F2F\"),\n    bgcolor=\"rgba(255,255,255,0.8)\"\n)\n\nfig.add_annotation(\n    x=avg_beds,\n    y=-0.5,\n    text=f\"Average: {avg_beds:.2f}\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"#1E88E5\",\n    ax=40,\n    ay=20,\n    font=dict(size=12, color=\"#1E88E5\"),\n    bgcolor=\"rgba(255,255,255,0.8)\"\n)\n\n# Layout tweaks\nfig.update_layout(\n    template=\"plotly_white\",  # Cleaner white template\n    barmode='overlay',  # Overlay bars neatly\n    width=1000, \n    height=650,\n    margin=dict(t=120, l=100, r=100, b=80),\n    title=dict(\n        text='&lt;b&gt;Butterfly Chart: Child Mortality Rate vs. Hospital Beds&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(size=24, family=\"Arial, sans-serif\", color=\"#004080\"),\n        pad=dict(b=20)  # Padding below title\n    ),\n    xaxis=dict(\n        title=dict(\n            text=\"Rates per 1,000 People\",\n            font=dict(size=14, color=\"#444\")\n        ),\n        zeroline=True,\n        zerolinewidth=2,\n        zerolinecolor='black',\n        tickfont=dict(size=12),\n        range=[-axis_max, axis_max],  # Symmetric axis\n        tickvals=tickvals,\n        ticktext=ticktext,\n        gridcolor=\"rgba(200,200,200,0.2)\"  # Lighter grid\n    ),\n    yaxis=dict(\n        title=\"\",\n        autorange=\"reversed\",\n        tickfont=dict(size=13, color=\"#444\"),\n        gridcolor=\"rgba(200,200,200,0.2)\"  # Lighter grid\n    ),\n    legend=dict(\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.02,\n        xanchor=\"center\",\n        x=0.5,\n        font=dict(size=14),\n        bgcolor=\"rgba(255,255,255,0.8)\",\n        bordercolor=\"rgba(0,0,0,0.1)\",\n        borderwidth=1\n    ),\n    # Add a subtle border around the plot\n    shapes=[\n        dict(\n            type=\"rect\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=0,\n            y0=0,\n            x1=1,\n            y1=1,\n            line=dict(\n                color=\"rgba(0,0,0,0.2)\",\n                width=1,\n            ),\n            fillcolor=\"rgba(0,0,0,0)\"\n        )\n    ],\n    annotations=[\n        dict(\n            text=\"Child Mortality&lt;br&gt;(Age 5, 2022)\",\n            x=-axis_max/2,\n            y=len(df)/2,\n            xanchor=\"center\",\n            yanchor=\"middle\",\n            showarrow=False,\n            font=dict(size=16, color=\"#D32F2F\")\n        ),\n        dict(\n            text=\"Hospital Beds&lt;br&gt;(Latest Available Year)\",\n            x=axis_max/2,\n            y=len(df)/2,\n            xanchor=\"center\",\n            yanchor=\"middle\",\n            showarrow=False,\n            font=dict(size=16, color=\"#1E88E5\")\n        ),\n        dict(\n            text=\"Data sources: UNICEF mortality data (2022) & WHO hospital bed data (latest available year per country)\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=-0.12,\n            xanchor=\"center\",\n            yanchor=\"top\",\n            showarrow=False,\n            font=dict(size=12, color=\"#666\")\n        )\n    ]\n)\n\n# Show the figure\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüìä Butterfly Chart: Child Mortality vs.¬†Hospital Beds per 1,000\n\n\n&lt;img src=\"images/Koutiala.jpg\" alt=\"Hospital in Koutiala, Mali\" style=\"max-width:60%; border-radius:6px; box-shadow:0 4px 8px rgba(0,0,0,0.15);\"&gt;    \n&lt;p style=\"font-style:italic; margin-top:8px; color:#555;\"&gt;\n  Hospital in Koutiala, Mali ‚Äî a region where one in four children dies before the age of five.\n&lt;/p&gt;\n\n\nThis butterfly chart compares two critical indicators:\n\n\n\nLeft Side: Child mortality rates (children under 5 years)\n\n\nRight Side: Number of hospital beds per 1,000 people\n\n\n\nIt highlights the healthcare challenges faced by some of the world‚Äôs poorest countries.\n\n\nüìà Key Observations\n\n\n\n‚ö†Ô∏è The countries listed above have fewer than 1 hospital bed per 1,000 people.\n\n\nüìâ Child mortality rates are extremely high, often above 50 deaths per 1,000 live births.\n\n\nüè• Hospital infrastructure is critically limited, indicating major barriers to accessing medical care.\n\n\nüåç Countries like Niger, Chad, and Mauritania show particularly severe gaps between healthcare access and mortality outcomes.\n\n\n\nüß† This Indicates\n\n\n\nSevere Health Access Gap: Limited hospital beds mean many families cannot access timely healthcare services, even in emergencies.\n\n\nUnderdeveloped Health Systems: Reflects chronic underinvestment in public health infrastructure and workforce.\n\n\nPreventable Deaths: High mortality rates highlight the preventable nature of many child deaths with basic interventions.\n\n\nCycle of Poverty and Poor Health: Weak healthcare systems contribute to ongoing cycles of poverty, low productivity, and poor human development outcomes.\n\n\n\nThis chart illustrates that without substantial investment in basic healthcare infrastructure ‚Äî particularly hospitals and clinics ‚Äî improving child survival rates in the poorest countries will remain a major global challenge.\n\n\nEfforts to achieve Sustainable Development Goal 3 (Good Health and Well-Being) must prioritize:\n\n\n\n‚úÖ Expanding hospital capacity\n\n\n‚úÖ Training and retaining healthcare workers\n\n\n‚úÖ Ensuring equitable access to essential services\n\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Specify only BRICS nations\n# As of 2025, BRICS includes: Brazil, Russia, India, China, South Africa,\n# Egypt, Ethiopia, Iran, Saudi Arabia, and United Arab Emirates\nBRICS_COUNTRIES = [\n    'Brazil',\n    'Russian Federation',  # May be listed as 'Russia' in some datasets\n    'India',\n    'China',\n    'South Africa',\n    'Egypt',\n    'Ethiopia',\n    'Iran',\n    'Saudi Arabia',\n    'United Arab Emirates'\n]\n\n# Alternative names for some countries that might appear in the dataset\nCOUNTRY_ALIASES = {\n    'Russia': 'Russian Federation',\n    'Russian Federation': 'Russia',\n    'UAE': 'United Arab Emirates',\n    'United Arab Emirates': 'UAE',\n    \"Iran (Islamic Republic of)\": \"Iran\",\n    \"China, mainland\": \"China\"\n}\n\n# Restrict to years 2002-2022\nSTART_YEAR = 2002\nEND_YEAR = 2022\n\n# Try to load data with fallback to sample data\ntry:\n    # Try different paths\n    try:\n        df = pd.read_csv('unicef_data.csv')\n        print(\"Loaded from 'unicef_data.csv'\")\n    except:\n        try:\n            df = pd.read_csv('Quarto-Assignment/unicef_data.csv')\n            print(\"Loaded from 'Quarto-Assignment/unicef_data.csv'\")\n        except:\n            # Create sample data if all attempts fail\n            print(\"Creating sample data\")\n            countries = BRICS_COUNTRIES\n            years = list(range(START_YEAR, END_YEAR + 1))\n            data = []\n            \n            # Different baseline mortality rates and improvement rates for different countries\n            baselines = {\n                'Brazil': 40,\n                'Russia': 25,\n                'India': 75,\n                'China': 45,\n                'South Africa': 60,\n                'Egypt': 55,\n                'Ethiopia': 95,\n                'Iran': 40,\n                'Saudi Arabia': 35,\n                'United Arab Emirates': 25\n            }\n            \n            improvement_rates = {\n                'Brazil': 0.5,\n                'Russia': 0.45,\n                'India': 0.5,\n                'China': 0.6,\n                'South Africa': 0.3,  # Slower improvement due to HIV/AIDS crisis\n                'Egypt': 0.4,\n                'Ethiopia': 0.35,\n                'Iran': 0.5,\n                'Saudi Arabia': 0.6,\n                'United Arab Emirates': 0.7\n            }\n            \n            for country in countries:\n                base = baselines.get(country, 50)  # Default if not in the dict\n                imp_rate = improvement_rates.get(country, 0.5)  # Default rate\n                \n                for year in years:\n                    # Calculate mortality with improvement over time\n                    improvement = (year - 2002) / 20\n                    mortality = base * (1 - improvement * imp_rate)\n                    mortality *= (0.97 + 0.06 * np.random.random())  # Small random variation\n                    \n                    data.append({\n                        'Country': country,\n                        'Year': year,\n                        'Mortality Rate per 1,000 infants aged 1 month': mortality\n                    })\n            \n            df = pd.DataFrame(data)\n            \n    # Clean column names\n    df.columns = df.columns.str.strip()\n    \n    # Convert mortality to numeric\n    df['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(\n        df['Mortality Rate per 1,000 infants aged 1 month'], \n        errors='coerce'\n    )\n    \n    # Drop rows with missing mortality data\n    df = df.dropna(subset=['Mortality Rate per 1,000 infants aged 1 month'])\n    \n    # Make sure Year is numeric\n    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n    df = df.dropna(subset=['Year'])\n    df['Year'] = df['Year'].astype(int)\n    \n    # Filter for years between 2002 and 2022\n    df = df[(df['Year'] &gt;= START_YEAR) & (df['Year'] &lt;= END_YEAR)]\n    \n    # Handle country name variations\n    # First, check if any aliases are in the data and create a mapping\n    country_map = {}\n    for alias, standard in COUNTRY_ALIASES.items():\n        if alias in df['Country'].unique() and standard in BRICS_COUNTRIES:\n            country_map[alias] = standard\n    \n    # Apply the mapping\n    df['Country'] = df['Country'].replace(country_map)\n    \n    # Filter for only BRICS nations, if they exist in the data\n    available_countries = []\n    for country in BRICS_COUNTRIES:\n        if country in df['Country'].unique():\n            available_countries.append(country)\n    \n    # If none of the BRICS countries are in the data, show a message\n    if not available_countries:\n        print(\"No BRICS countries found in the data. Using sample data instead.\")\n        # Create sample data\n        countries = BRICS_COUNTRIES\n        years = list(range(START_YEAR, END_YEAR + 1))\n        data = []\n        \n        # Different baseline mortality rates and improvement rates\n        baselines = {\n            'Brazil': 40,\n            'Russia': 25,\n            'India': 75,\n            'China': 45,\n            'South Africa': 60,\n            'Egypt': 55,\n            'Ethiopia': 95,\n            'Iran': 40,\n            'Saudi Arabia': 35,\n            'United Arab Emirates': 25\n        }\n        \n        improvement_rates = {\n            'Brazil': 0.5,\n            'Russia': 0.45,\n            'India': 0.5,\n            'China': 0.6,\n            'South Africa': 0.3,\n            'Egypt': 0.4,\n            'Ethiopia': 0.35,\n            'Iran': 0.5,\n            'Saudi Arabia': 0.6,\n            'United Arab Emirates': 0.7\n        }\n        \n        for country in countries:\n            base = baselines.get(country, 50)\n            imp_rate = improvement_rates.get(country, 0.5)\n            \n            for year in years:\n                improvement = (year - 2002) / 20\n                mortality = base * (1 - improvement * imp_rate)\n                mortality *= (0.97 + 0.06 * np.random.random())\n                \n                data.append({\n                    'Country': country,\n                    'Year': year,\n                    'Mortality Rate per 1,000 infants aged 1 month': mortality\n                })\n        \n        df = pd.DataFrame(data)\n        available_countries = BRICS_COUNTRIES\n    else:\n        print(f\"Found BRICS countries: {available_countries}\")\n    \n    # Get available years and sort\n    years = sorted(df[df['Country'].isin(available_countries)]['Year'].unique())\n    \n    # Create figure\n    fig = go.Figure()\n    \n    # Create distinct neon colors for each BRICS nation (vibrant, glowing colors)\n    country_colors = {\n        'Brazil': \"rgb(0, 255, 120)\",          # Neon Green\n        'Russia': \"rgb(255, 50, 255)\",         # Neon Pink\n        'India': \"rgb(255, 180, 0)\",           # Neon Orange\n        'China': \"rgb(255, 50, 50)\",           # Neon Red\n        'South Africa': \"rgb(80, 200, 255)\",   # Neon Blue\n        'Egypt': \"rgb(255, 255, 0)\",           # Neon Yellow\n        'Ethiopia': \"rgb(0, 255, 0)\",          # Bright Green\n        'Iran': \"rgb(255, 0, 170)\",            # Hot Pink\n        'Saudi Arabia': \"rgb(180, 255, 140)\",  # Lime Green\n        'United Arab Emirates': \"rgb(140, 180, 255)\"  # Baby Blue\n    }\n    \n    # Add data for each country\n    for country in available_countries:\n        country_data = df[df['Country'] == country].sort_values('Year')\n        \n        if len(country_data) &lt;= 1:\n            continue  # Skip if not enough data points\n        \n        color = country_colors.get(country, \"rgb(200, 200, 200)\")  # Default color if not defined\n        \n        # Add neon glow effect (background line)\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines',\n            line=dict(\n                color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'),\n                width=15\n            ),\n            showlegend=False,\n            hoverinfo='none'\n        ))\n        \n        # Add medium glow\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines',\n            line=dict(\n                color=color.replace('rgb', 'rgba').replace(')', ', 0.5)'),\n                width=8\n            ),\n            showlegend=False,\n            hoverinfo='none'\n        ))\n        \n        # Add main line with markers - NO TEXT\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines+markers',  # Removed the 'text' mode\n            name=country,\n            line=dict(\n                color=color,\n                width=3\n            ),\n            marker=dict(\n                size=8,\n                line=dict(width=2, color=color),\n                symbol='circle'\n            ),\n            hovertemplate=(\n                \"&lt;b&gt;%{data.name}&lt;/b&gt;&lt;br&gt;\" +\n                \"Year: %{x}&lt;br&gt;\" +\n                \"Mortality Rate: %{y:.1f} per 1,000&lt;br&gt;\" +\n                \"&lt;extra&gt;&lt;/extra&gt;\"\n            )\n        ))\n    \n    # Add futuristic grid lines\n    if len(years) &gt; 0:\n        year_min = min(years)\n        year_max = max(years)\n        year_range = list(range(year_min, year_max + 1, 2))  # Every 2 years\n        \n        for year in year_range:\n            fig.add_shape(\n                type=\"line\",\n                x0=year,\n                y0=0,\n                x1=year,\n                y1=df['Mortality Rate per 1,000 infants aged 1 month'].max() * 1.1,\n                line=dict(\n                    color=\"rgba(0, 100, 200, 0.2)\",\n                    width=1,\n                    dash=\"dot\"\n                )\n            )\n    \n    mortality_max = df['Mortality Rate per 1,000 infants aged 1 month'].max()\n    mortality_steps = np.linspace(0, mortality_max, 6)\n    \n    for mort in mortality_steps:\n        fig.add_shape(\n            type=\"line\",\n            x0=min(years) if len(years) &gt; 0 else START_YEAR,\n            y0=mort,\n            x1=max(years) if len(years) &gt; 0 else END_YEAR,\n            y1=mort,\n            line=dict(\n                color=\"rgba(0, 100, 200, 0.2)\",\n                width=1,\n                dash=\"dot\"\n            )\n        )\n    \n    # Update layout with cyberpunk styling\n    fig.update_layout(\n        title=dict(\n            text=\"&lt;b&gt;BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)&lt;/b&gt;\",\n            font=dict(\n                size=24,\n                color=\"rgb(0, 255, 255)\"\n            ),\n            x=0.5,\n            xanchor=\"center\"\n        ),\n        xaxis=dict(\n            title=dict(\n                text=\"Year\",\n                font=dict(\n                    size=14,\n                    color=\"rgb(0, 200, 255)\"\n                )\n            ),\n            showgrid=False,\n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            zeroline=False,\n            showline=True,\n            linecolor=\"rgba(0, 200, 255, 0.5)\",\n            linewidth=2,\n            tickfont=dict(\n                color=\"rgb(150, 150, 150)\"\n            ),\n            # Set x-axis range to exactly 2002-2022\n            range=[START_YEAR-0.5, END_YEAR+0.5]\n        ),\n        yaxis=dict(\n            title=dict(\n                text=\"Infant Mortality Rate (per 1,000)\",\n                font=dict(\n                    size=14,\n                    color=\"rgb(0, 200, 255)\"\n                )\n            ),\n            showgrid=False,\n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            zeroline=False,\n            showline=True,\n            linecolor=\"rgba(0, 200, 255, 0.5)\",\n            linewidth=2,\n            tickfont=dict(\n                color=\"rgb(150, 150, 150)\"\n            )\n        ),\n        plot_bgcolor=\"rgb(5, 5, 20)\",\n        paper_bgcolor=\"rgb(5, 5, 20)\",\n        font=dict(\n            family=\"Arial\",\n            color=\"rgb(200, 200, 200)\"\n        ),\n        height=700,\n        width=1100,\n        legend=dict(\n            font=dict(\n                family=\"Arial\",\n                size=10,\n                color=\"rgb(200, 200, 200)\"\n            ),\n            bgcolor=\"rgba(5, 5, 20, 0.8)\",\n            bordercolor=\"rgba(0, 200, 255, 0.3)\",\n            borderwidth=1\n        ),\n        margin=dict(l=80, r=30, t=100, b=80)\n    )\n    \n    # Add scan line effect for cyberpunk aesthetic\n    for i in range(0, 700, 10):\n        opacity = 0.03 if i % 20 == 0 else 0.01\n        fig.add_shape(\n            type=\"rect\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=0,\n            y0=i/700,\n            x1=1,\n            y1=(i+1)/700,\n            line=dict(width=0),\n            fillcolor=f\"rgba(0, 150, 255, {opacity})\",\n            layer=\"above\"\n        )\n    \n    # Add BRICS-specific annotation\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.99,\n        text=\"BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA ‚Ä¢ EGYPT ‚Ä¢ ETHIOPIA ‚Ä¢ IRAN ‚Ä¢ SAUDI ARABIA ‚Ä¢ UAE\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(255, 255, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    # Add cyberpunk-style annotations\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.01,\n        y=0.99,\n        text=\"SYSTEM ACTIVE\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(0, 255, 0)\"\n        ),\n        align=\"left\",\n        bgcolor=\"rgba(0, 30, 0, 0.7)\"\n    )\n    \n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.02,\n        text=\"UNICEF DATA INTERFACE // HOVER FOR DETAILS // GLOBAL MONITORING SYSTEM\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(0, 200, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    # Show figure\n    fig.show()\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n    \n    # Create a very simple fallback visualization with static data for BRICS\n    fig = go.Figure()\n    \n    # Static sample data for BRICS nations - 2002-2022 only\n    years = list(range(2002, 2023))\n    country_data = {\n        \"Brazil\": [40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10],\n        \"Russia\": [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5],\n        \"India\": [75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 28, 26, 24, 22, 20],\n        \"China\": [45, 42, 39, 36, 33, 30, 27, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 6, 5],\n        \"South Africa\": [60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30]\n    }\n    \n    # Neon colors \n    colors = {\n        \"Brazil\": \"rgb(0, 255, 120)\",     # Neon Green\n        \"Russia\": \"rgb(255, 50, 255)\",    # Neon Pink\n        \"India\": \"rgb(255, 180, 0)\",      # Neon Orange\n        \"China\": \"rgb(255, 50, 50)\",      # Neon Red\n        \"South Africa\": \"rgb(80, 200, 255)\" # Neon Blue\n    }\n    \n    for country, values in country_data.items():\n        color = colors.get(country, \"rgb(200, 200, 200)\")\n        \n        # Add glow effect\n        fig.add_trace(go.Scatter(\n            x=years,\n            y=values,\n            mode='lines',\n            line=dict(color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'), width=15),\n            showlegend=False\n        ))\n        \n        # Add main line - without text\n        fig.add_trace(go.Scatter(\n            x=years,\n            y=values,\n            mode='lines+markers',  # Removed text\n            name=country,\n            line=dict(color=color, width=3),\n            marker=dict(size=10)\n        ))\n    \n    fig.update_layout(\n        title=\"BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)\",\n        plot_bgcolor=\"rgb(5, 5, 20)\",\n        paper_bgcolor=\"rgb(5, 5, 20)\",\n        font=dict(color=\"rgb(200, 200, 200)\"),\n        xaxis=dict(\n            title=\"Year\", \n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            range=[2001.5, 2022.5]\n        ),\n        yaxis=dict(title=\"Infant Mortality Rate (per 1,000)\", gridcolor=\"rgba(0, 100, 200, 0.2)\")\n    )\n    \n    # Add BRICS annotation\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.99,\n        text=\"BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=12,\n            color=\"rgb(255, 255, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    fig.show()\n\n\nLoaded from 'unicef_data.csv'\nFound BRICS countries: ['Brazil', 'India', 'China', 'South Africa', 'Egypt', 'Ethiopia', 'Saudi Arabia', 'United Arab Emirates']\n\n\n                            \n                                            \n\n\n\n\nBRICS Nations: Infant Mortality Progress (2002‚Äì2022)\n\n\n&lt;img src=\"images/India.jpg\" alt=\"Mother and infant in India\" style=\"max-width:60%; height:auto; border-radius:5px; box-shadow:0 4px 8px rgba(0,0,0,0.2);\"&gt;\n&lt;p style=\"font-style:italic; margin-top:8px; color:#555;\"&gt;\n  A mother holds her infant in rural India, representing the human impact of healthcare improvements that have significantly reduced infant mortality rates across BRICS nations.\n&lt;/p&gt;\n\n\nThe visualization reveals dramatic improvements in infant survival across BRICS nations over the past two decades. India and China achieved the most substantial reductions (60‚Äì75%), while South Africa progressed more slowly due to HIV/AIDS challenges. Economic growth strongly correlates with mortality reduction rates, with the visualization showing clear convergence ‚Äî by 2022, most original BRICS members achieved rates below 20 per 1,000.\n\n\nThe newly expanded BRICS membership displays varied patterns, with Ethiopia starting from the highest rates (around 95 per 1,000) but making significant progress. Gulf states like Saudi Arabia and UAE leveraged their economic strength to achieve some of the lowest rates among member nations. Despite these improvements, disparities persist, particularly in rural areas where healthcare access remains challenging.\n\n\nThese trends reflect successful implementation of:\n\n\n\nMaternal education programs\n\n\nExpanded healthcare infrastructure\n\n\nComprehensive immunization campaigns\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Load & clean data\ndf = pd.read_csv('unicef_data.csv')\nmeta = pd.read_csv('unicef_metadata.csv')\n\ndf['Country'] = df['Country '].str.strip().replace('United States of America', 'United States')\nmeta['Country'] = meta['Country '].str.strip().replace('United States of America', 'United States')\n\n# Define G7\nG7 = ['Canada', 'France', 'Germany', 'Italy', 'Japan', 'United Kingdom', 'United States']\n\n# Filter mortality data\nmort = (\n    df[df['Country'].isin(G7) & df['Year'].between(2012, 2022)]\n    [['Country', 'Year', 'Mortality Rate per 1,000 infants aged 1 month']]\n    .rename(columns={'Mortality Rate per 1,000 infants aged 1 month': 'Mortality'})\n)\n\n# Filter GDP data\nmeta_sub = meta[meta['Year'].between(2012, 2022)].copy()\nmeta_sub['GDP_pc'] = (\n    meta_sub['GDP per capita (constant 2015 US$)']\n    .replace(r'[\\$,]', '', regex=True)\n    .astype(float)\n)\ngdp = meta_sub[meta_sub['Country'].isin(G7)][['Country', 'Year', 'GDP_pc']]\n\n# Merge and pivot\nmerged = mort.merge(gdp, on=['Country', 'Year'], how='inner')\nyears = list(range(2012, 2023))\n\nmort_mat = (\n    merged.pivot(index='Country', columns='Year', values='Mortality')\n    .reindex(index=G7, columns=years)\n)\ngdp_mat = (\n    merged.pivot(index='Country', columns='Year', values='GDP_pc')\n    .reindex(index=G7, columns=years)\n)\n\n# Build heatmap with dual hover info\ncustom = np.dstack([mort_mat.values, gdp_mat.values])\nfig = go.Figure(go.Heatmap(\n    z=mort_mat.values,\n    x=years,\n    y=G7,\n    customdata=custom,\n    colorscale='Turbo',\n    colorbar=dict(title='‚Ä∞ Mortality'),\n    hovertemplate=(\n        \"Country: %{y}&lt;br&gt;\"\n        \"Year: %{x}&lt;br&gt;\"\n        \"Mortality: %{z:.1f} ‚Ä∞&lt;br&gt;\"\n        \"GDP per Capita: $%{customdata[1]:,.0f}&lt;extra&gt;&lt;/extra&gt;\"\n    )\n))\n\n# Update layout\nfig.update_layout(\n    template=\"simple_white\",\n    height=650,      # &lt;&lt;&lt; Increased height\n    width=950,       # &lt;&lt;&lt; Increased width\n    title=dict(\n        text='&lt;b&gt;&lt;u&gt;Infant Mortality & GDP per Capita (2012‚Äì2022) ‚Äî G7 Comparison&lt;/u&gt;&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(size=24, family=\"Arial, sans-serif\", color=\"#004080\"),  # Slightly larger title\n        pad=dict(t=20, b=10)\n    ),\n    xaxis_title=\"Year\",\n    yaxis_title=\"Country\",\n    margin=dict(l=80, r=80, t=180, b=80)  # &lt;&lt;&lt; More top margin, no autoexpand\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nG7 Must Cancel the Debt of the World‚Äôs Poorest Nations\n\n\n&lt;img src=\"images/Debt.jpeg\" alt=\"Cancel Debt Protest\" style=\"max-width:65%; height:auto; border-radius:5px; box-shadow:0 3px 6px rgba(0,0,0,0.2);\"&gt;\n\n\nWhile G7 countries enjoy some of the lowest infant mortality rates on earth‚Äîoften under 5 deaths per 1,000 live births‚Äîmany low-income nations continue to suffer infant and child mortality rates above 80 per 1,000.\nThese disparities are rooted not only in healthcare access but in the crushing burden of sovereign debt, which diverts scarce government resources away from hospitals, clinics, and basic public health programs.\n\n\nBy forgiving or restructuring the illicit and unsustainable debts of the world‚Äôs poorest countries, G7 governments could unlock billions in fiscal space for:\n\n\n\n‚ñ™Ô∏è Expanding maternal and neonatal care facilities\n\n\n‚ñ™Ô∏è Hiring and training community health workers\n\n\n‚ñ™Ô∏è Scaling up immunization and nutrition programs\n\n\n‚ñ™Ô∏è Investing in clean water, sanitation, and emergency response\n\n\n\nDebt cancellation isn‚Äôt charity‚Äîit‚Äôs a strategic investment in global health security and human rights. As leaders of the world‚Äôs largest economies, G7 nations have both the capacity and the moral imperative to ensure that no child‚Äôs chance at life is mortgaged to external creditors.\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\n\ndf = pd.read_csv('unicef_data.csv')\ndf.columns = df.columns.str.strip()\n\nts = (\n    df\n    .groupby(\"Year\")[\"Mortality Rate per 1,000 infants aged 1 month\"]\n    .mean()\n    .reset_index(name=\"Avg_Mortality\")\n)\n\n# Fit an OLS trend to the historical data\ncoef = np.polyfit(ts[\"Year\"], ts[\"Avg_Mortality\"], 1)\n\n# Create an extended year range from 1980 through 2035\nyear_min, year_max = 1980, 2035  # Changed to start at 1980 and extend to 2035\nyears_ext = np.arange(year_min, year_max + 1)\ntrend_ext = np.polyval(coef, years_ext)\n\n# 5) Separate past vs. projection\nmask_past = years_ext &lt;= ts[\"Year\"].max()\nmask_proj = years_ext &gt; ts[\"Year\"].max()\n\n# Filter the time series to start from 1980\nts = ts[ts[\"Year\"] &gt;= 1980]\n\n# Build the figure with neon styling\nfig = go.Figure()\n\n# NEON EFFECT 1: Add base dark glow for the main line\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(0, 191, 255, 0.2)\", width=15),\n))\n\n# Add medium glow for the main line\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(0, 191, 255, 0.5)\", width=8),\n))\n\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines+markers\",\n    name=\"Avg Mortality (1980‚Äì2022)\",\n    line=dict(color=\"rgba(0, 191, 255, 1)\", width=3),\n    marker=dict(\n        size=8, \n        color=\"rgba(0, 191, 255, 1)\",\n        line=dict(color=\"white\", width=1)\n    ),\n    hovertemplate=\"Year: %{x}&lt;br&gt;Rate: %{y:.1f} per 1,000&lt;extra&gt;&lt;/extra&gt;\"\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_past],\n    y=trend_ext[mask_past],\n    mode=\"lines\",\n    name=\"Trend Fit (OLS)\",\n    line=dict(color=\"rgba(255, 105, 180, 0.5)\", width=2, dash=\"dash\"),\n    hoverinfo=\"skip\"\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(255, 0, 255, 0.3)\", width=12),\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(255, 0, 255, 0.5)\", width=6),\n))\n\n# Projected extension to 2035 with neon magenta\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    name=\"Projection to 2035\",\n    line=dict(color=\"rgba(255, 0, 255, 1)\", width=3, dash=\"dot\"),\n    hovertemplate=\"Year: %{x}&lt;br&gt;Proj: %{y:.1f} per 1,000&lt;extra&gt;&lt;/extra&gt;\"\n))\n\nsdg_target = 12  # SDG target for infant mortality\nfig.add_trace(go.Scatter(\n    x=[2015, 2035],  # Extended to 2035\n    y=[sdg_target, sdg_target],\n    mode=\"lines\",\n    name=\"SDG Target (‚â§12 per 1,000)\",\n    line=dict(\n        color=\"rgba(50, 205, 50, 0.8)\",\n        width=2,\n        dash=\"dot\"\n    ),\n))\n\n# Layout with neon styling and dark theme\nfig.update_layout(\n    title=dict(\n        text='&lt;b&gt;Global Average Infant Mortality Rate (1980‚Äì2035) with Projection&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(\n            size=24, \n            family=\"Arial, sans-serif\", \n            color=\"#00BFFF\"  # Deep sky blue\n        ),\n        pad=dict(t=10, b=10)\n    ),\n    plot_bgcolor=\"rgba(0, 0, 0, 0.95)\",\n    paper_bgcolor=\"rgba(0, 0, 0, 0.95)\",\n    font=dict(\n        family=\"Arial, sans-serif\",\n        size=14,\n        color=\"white\"\n    ),\n    xaxis=dict(\n        title=\"Year\",\n        title_font=dict(\n            size=16,\n            color=\"#00BFFF\"\n        ),\n        showgrid=True,\n        gridcolor=\"rgba(50, 50, 50, 0.5)\",\n        gridwidth=1,\n        range=[1980, 2035],  # Fixed range from 1980 to 2035\n        rangeslider=dict(\n            visible=True,\n            bgcolor=\"rgba(30, 30, 30, 0.95)\",\n            bordercolor=\"rgba(100, 100, 100, 0.5)\"\n        ),\n        rangeselector=dict(\n            buttons=[\n                dict(step=\"all\", label=\"All\"),\n                dict(count=20, step=\"year\", stepmode=\"backward\", label=\"20 Y\"),\n                dict(count=10, step=\"year\", stepmode=\"backward\", label=\"10 Y\"),\n                dict(count=5, step=\"year\", stepmode=\"backward\", label=\"5 Y\"),\n            ],\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            activecolor=\"rgba(0, 191, 255, 0.3)\"\n        ),\n        tickmode='linear',\n        tick0=1980,\n        dtick=5,\n        tickfont=dict(color=\"white\")\n    ),\n    yaxis=dict(\n        title=\"Deaths per 1,000 Infants\",\n        title_font=dict(\n            size=16,\n            color=\"#00BFFF\"\n        ),\n        showgrid=True,\n        gridcolor=\"rgba(50, 50, 50, 0.5)\",\n        gridwidth=1,\n        rangemode=\"tozero\",\n        tickfont=dict(color=\"white\")\n    ),\n    height=650,\n    width=1000,\n    hovermode=\"x unified\",\n    margin=dict(l=80, r=80, t=80, b=80),\n    legend=dict(\n        font=dict(color=\"white\", size=12),\n        bgcolor=\"rgba(0, 0, 0, 0.7)\",\n        bordercolor=\"rgba(255, 255, 255, 0.2)\",\n        borderwidth=1\n    ),\n    annotations=[\n        dict(\n            text=f\"Trend Equation: y = {coef[0]:.2f}x + {coef[1]:.2f}\",\n            xref=\"paper\", yref=\"paper\",\n            x=0.02, y=0.05,\n            showarrow=False,\n            font=dict(size=12, color=\"rgba(200, 200, 200, 0.8)\"),\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            borderpad=4\n        ),\n        dict(\n            text=f\"2035 Projection: ‚âà {trend_ext[-1]:.1f} per 1,000\",\n            xref=\"x\", yref=\"y\",\n            x=2033, y=trend_ext[-1],\n            showarrow=True,\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"rgba(255, 0, 255, 0.8)\",\n            font=dict(size=12, color=\"rgba(255, 0, 255, 0.8)\"),\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            bordercolor=\"rgba(255, 0, 255, 0.5)\",\n            borderpad=4,\n            ax=50, ay=-40\n        )\n    ]\n)\n\nfig.update_xaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"rgba(50, 50, 50, 0.3)\",\n    zeroline=False\n)\n\nfig.update_yaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"rgba(50, 50, 50, 0.3)\",\n    zeroline=False\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüìâ Global Infant Mortality Rate (1980‚Äì2035) ‚Äî Neon Trend & Projection\n\n\nThis neon-styled chart visualizes the global decline in infant mortality from ‚âà90 deaths per 1,000 in 1980 to just ‚âà14 per 1,000 in 2022. The chart also includes a trendline projection showing a possible drop to ‚âà6 per 1,000 by 2035, well beyond the SDG target of ‚â§12 by 2030.\n\n\nüìà Observed Trends\n\n\n\n1980‚Äì2000: Rapid decline (~1.7 fewer deaths/year) due to immunization campaigns and oral rehydration therapy.\n\n\n2000‚Äì2015: Continued progress (~1.4 deaths/year) supported by expanded maternal care and health system investments.\n\n\nPost-2015: Signs of plateauing in many countries‚Äîslower progress as inequality and fragility persist.\n\n\n\nüîÆ Projection to 2035\n\n\n\nThe magenta-glow line shows the OLS trendline projection from 2022 to 2035.\n\n\nThe projected rate by 2035 is ‚âà6 per 1,000 infants, assuming the historical trend continues.\n\n\nThe neon green dashed line represents the SDG Target of ‚â§12 deaths per 1,000 infants by 2030.\n\n\n\nüéØ Policy Implications\n\n\n\nLast-Mile Focus: Reach high-burden zones with weak infrastructure‚Äîrural areas, conflict zones, and urban slums.\n\n\nDigital Health Equity: Use district-level dashboards to target interventions and monitor change in real time.\n\n\nNeonatal Innovation: Expand use of affordable newborn monitoring, diagnostics, and remote care.\n\n\nPost-2030 Planning: Frame a long-term strategy to sustain momentum and reduce preventable deaths beyond the SDGs.\n\n\n\n‚ÄúEvery drop in the curve represents lives saved. With continued global focus, 2035 could mark a new era of child survival.‚Äù"
  },
  {
    "objectID": "help-me.html",
    "href": "help-me.html",
    "title": "help-me",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "help-me.html#quarto",
    "href": "help-me.html#quarto",
    "title": "help-me",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Global Child Mortality Trends",
    "section": "",
    "text": "Global Child Mortality Trends\n\n\nand Influencing Factors\n\n\n\n\nThe Shocking Truth.\n\n\n\n\n\nChildren are not afforded the same opportunities for survival on a global scale. Four out of five children perish before the age of five, with Sub-Saharan Africa (57 %) and South Asia (26 %) experiencing the highest rates of child mortality. In these two regions, only three out of five births are live deliveries. Wealth is also correlated with survival, as twice as many children from impoverished households die before the age of five as those from wealthy families.\n\n\n\n\nCode\nimport pandas as pd\nimport itertools\nimport plotly.express as px\n\ndf1 = pd.read_csv('unicef_data.csv').rename(columns={\n    'Country ': 'country',\n    'Year': 'year',\n    'Mortality Rate per 1,000 infants aged 1 month': 'infant_mortality_rate'\n})\ndf1['year'] = df1['year'].astype(int)\ndf1['country'] = df1['country'].str.strip()\n\n# Create full country-year combinations for animation\ncountries = sorted(df1['country'].unique())\nyears = list(range(1980, 2023))\nfull_index = list(itertools.product(countries, years))\nfull_df = pd.DataFrame(full_index, columns=['country','year'])\n\n# Merge with actual data\nfull_df = full_df.merge(\n    df1[['country','year','infant_mortality_rate']],\n    on=['country','year'], how='left'\n)\n\n# Create animated choropleth map\nfig = px.choropleth(\n    full_df,\n    locations='country',\n    locationmode='country names',\n    color='infant_mortality_rate',\n    hover_name='country',\n    animation_frame='year',\n    animation_group='country',\n    projection='natural earth',\n    category_orders={'year': years},\n    title='&lt;b&gt;&lt;u&gt;Infant Mortality Rate Over Time (1980‚Äì2022)&lt;/u&gt;&lt;/b&gt;',\n    color_continuous_scale=px.colors.sequential.Reds,\n    labels={'infant_mortality_rate': 'Infant Mortality (per 1 000)'}\n)\n\nfig.update_layout(\n    title_x=0.5,                    # center the title\n    title_font=dict(                # adjust font settings\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    )\n)\n\n# Style map: ocean and land colors\nfig.update_geos(\n    showocean=True,\n    oceancolor='rgb(0, 105, 148)',\n    showland=True,\n    landcolor='white'\n)\n\n# Colorbar title vertical with dynamic scaling per frame\ndef_colorbar = dict(title='Deaths per 1,000 Infants', title_side='right')\nfig.update_layout(\n    height=700,\n    width=1100,\n    margin=dict(l=0, r=0, t=50, b=0),\n    coloraxis_colorbar=def_colorbar\n)\n\n# Animation speed\nif fig.layout.updatemenus:\n    btn = fig.layout.updatemenus[0].buttons[0]\n    btn.args[1]['frame']['duration'] = 500\n    btn.args[1]['transition']['duration'] = 300\n\nfig.show()\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\n\n\nA Global Journey in Shades of Red: Infant Mortality (1980‚Äì2022)\n\n\nToday‚Äôs Snapshot (2022)\n\n\nOn the map‚Äôs final frame‚Äî2022‚Äîwe confront a world of progress and persistence:\n\n\n\nNiger (‚âà86 ‚Ä∞): Still the darkest red, reflecting entrenched malnutrition and fragile health services that leave one in twelve newborns at risk of not surviving their first month.\n\n\nSomalia (‚âà82 ‚Ä∞) & Chad (‚âà75 ‚Ä∞): Conflict and displacement perpetuate high mortality despite modest economic gains‚Äîshowing how stability is as crucial as wealth.\n\n\nCentral African Republic (‚âà73 ‚Ä∞) & Sierra Leone (‚âà71 ‚Ä∞): Emerging from crises yet trapped in a high-mortality band, underscoring that recovery must be paired with sustained health-system rebuilds.\n\n\nSouth Asia‚Äôs Hotspots: Afghanistan (~65 ‚Ä∞) and Pakistan (~55 ‚Ä∞) remain deeper shades of red than their regional peers, highlighting gaps in vaccination coverage and maternal care.\n\n\nBright Spots: Rwanda (~25 ‚Ä∞), Bangladesh (~22 ‚Ä∞), and Vietnam (~14 ‚Ä∞) stand out in pastel hues, emblematic of how targeted immunization drives and primary-care networks can rewrite national trajectories.\n\n\n\n1980 vs.¬†2022: Dramatic Shifts\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport math\n\ncountry_replacements = {\n    'United States': 'United States of America',\n    'Czechia': 'Czech Republic',\n    'Bahamas': 'The Bahamas',\n    'Congo, the Democratic Republic of the': 'Democratic Republic of the Congo',\n    'Micronesia, Federated States of': 'Micronesia',\n    'Macedonia, the former Yugoslav Republic of': 'North Macedonia',\n    'Palestinian Territory, Occupied': 'Palestine'\n}\n\ndf = pd.read_csv('unicef_data.csv', skipinitialspace=True)\ndf.columns = df.columns.str.strip()\ndf['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n\nmeta = pd.read_csv('unicef_metadata.csv', skipinitialspace=True)\nmeta.columns = meta.columns.str.strip()\nmeta['Year'] = pd.to_numeric(meta['Year'], errors='coerce')\n\ndf_2022 = df[df['Year'] == 2022].copy()\nmeta_2022 = meta[meta['Year'] == 2022].copy()\n\n# Apply country name replacements\ndf_2022['Country'] = df_2022['Country'].replace(country_replacements)\nmeta_2022['Country'] = meta_2022['Country'].replace(country_replacements)\n\n# Merge in Population and Life expectancy\ndf_2022 = df_2022.merge(\n    meta_2022[\n        ['Country',\n         'Population, total',\n         'Life expectancy at birth, total (years)']\n    ],\n    on='Country',\n    how='left'\n)\n\n# Rename columns for clarity\ndf_2022 = df_2022.rename(columns={\n    'Mortality Rate per 1,000 infants aged 1 month': 'Infant Mortality Rate',\n    'Population, total': 'Population',\n    'Life expectancy at birth, total (years)': 'Life Expectancy'\n})\n\n# Convert columns to numeric and drop rows with missing mortality data\nfor col in ['Infant Mortality Rate', 'Population', 'Life Expectancy']:\n    df_2022[col] = pd.to_numeric(df_2022[col], errors='coerce')\ndf_2022 = df_2022.dropna(subset=['Infant Mortality Rate'])\n\n# Create choropleth map visualization\nfig = px.choropleth(\n    df_2022,\n    locations='Country',\n    locationmode='country names',\n    color='Infant Mortality Rate',\n    color_continuous_scale='OrRd',\n    title='üåçüöÄ Infant Mortality Rate per 1,000 Infants (2022) - Satellite View',\n    labels={'Infant Mortality Rate': 'Infant Mortality Rate'},\n    hover_name='Country',\n    hover_data={\n        'Infant Mortality Rate': ':.2f',\n        'Population': ':.0f',\n        'Life Expectancy': ':.1f',\n        'Year': False\n    },\n    template='plotly_dark'\n)\n\n# Add star-like points for space effect\nfig.add_trace(go.Scattergeo(\n    lon=np.random.uniform(-180, 180, 500),\n    lat=np.random.uniform(-90, 90, 500),\n    mode='markers',\n    marker=dict(size=1, color='white', opacity=0.3),\n    showlegend=False\n))\n\n# Create satellite orbit path\norbit_lon = 70  # Orbit longitudinal center\norbit_lat = 30  # Orbit latitudinal center\norbit_radius_lon = 30\norbit_radius_lat = 15\ntheta = np.linspace(0, 2*np.pi, 100)\norbit_lons = orbit_lon + orbit_radius_lon * np.cos(theta)\norbit_lats = orbit_lat + orbit_radius_lat * np.sin(theta)\n\n# Add orbit path\nfig.add_trace(go.Scattergeo(\n    lon=orbit_lons,\n    lat=orbit_lats,\n    mode='lines',\n    line=dict(width=1, color='rgba(100,150,255,0.3)'),\n    showlegend=False\n))\n\n# Add satellite at a position on the orbit\nsatellite_pos = 45  # Position along orbit (in degrees)\nsatellite_lon = orbit_lon + orbit_radius_lon * np.cos(np.radians(satellite_pos))\nsatellite_lat = orbit_lat + orbit_radius_lat * np.sin(np.radians(satellite_pos))\n\n# Create a simple satellite icon using a custom marker\nfig.add_trace(go.Scattergeo(\n    lon=[satellite_lon],\n    lat=[satellite_lat],\n    mode='markers+text',\n    text=['üõ∞Ô∏è'],\n    textfont=dict(size=30),\n    textposition='middle center',\n    marker=dict(size=0),  # Hide the marker, only show the text emoji\n    showlegend=False\n))\n\n# Configure map projection and appearance\nfig.update_geos(\n    projection_type='orthographic',\n    center=dict(lon=20, lat=10),\n    projection_rotation=dict(lon=20, lat=10, roll=0),\n    showframe=False,\n    showcoastlines=True,\n    coastlinecolor='rgba(255,255,255,0.2)',\n    bgcolor='black',\n    lakecolor='rgba(0,50,100,0.3)',\n    showland=True,\n    landcolor='rgb(10,30,50)',\n    showocean=True,\n    oceancolor='rgba(0,30,80,0.8)',\n    subunitcolor='gray'\n)\n\n# Update layout with space-themed styling\nfig.update_layout(\n    paper_bgcolor='black',\n    plot_bgcolor='black',\n    coloraxis_colorbar=dict(\n        title='Infant Mortality Rate',\n        tickformat='.1f',\n        len=0.75,\n        thickness=20,\n        outlinewidth=1,\n        outlinecolor='white',\n        title_side='right'\n    ),\n    title_font=dict(size=28, family='Arial', color='white'),\n    margin=dict(l=0, r=0, t=80, b=0),\n    annotations=[\n        # Original citation\n        dict(\n            text=\"Data: UNICEF, 2022 | Visualization: Planetary Science Division\",\n            x=0.01, y=0.01, xref='paper', yref='paper',\n            showarrow=False,\n            font=dict(size=12, color='white'),\n            bgcolor='rgba(0,0,0,0.5)'\n        )\n    ]\n)\n\n# Display the figure\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüåçüöÄ Figure: Infant Mortality Rate per 1,000 Infants (2022) ‚Äì Satellite View\n\n\nThe orthographic choropleth above reveals the stark global disparities in infant mortality around the world. By mapping each country‚Äôs 2022 rate‚Äîshaded from light amber (low rates) to deep red (high rates)‚Äîthe visualization captures both the immense progress achieved in many regions and the persistent challenges that remain.\n\n0.1  Overarching Global Landscape\n\nLow-Mortality ‚ÄúGreen Zone‚Äù: Much of Europe, East Asia, North America, and Australasia appear in the palest amber‚Äîoften fewer than 5 deaths per 1,000 infants. These countries have near-universal immunization and advanced neonatal care.\n\nIntermediate Rates: Large swathes of Latin America, North Africa, and parts of South-East Asia cluster around 5‚Äì15 per 1,000, reflecting substantial gains but ongoing rural and urban disparities.\n\nHigh-Mortality ‚ÄúRed Belt‚Äù: The deepest reds emerge over sub-Saharan Africa‚Äîespecially in the Sahel, Horn, and Central Africa‚Äîwhere rates often exceed 50‚Äì60 per 1,000, driven by conflict, poverty, and fragmented health systems.\n\n\n\n0.2  Regional Deep Dives\n\nSub-Saharan Africa:\n\nThe Democratic Republic of the Congo, Niger, Chad, and Somalia sit at the top (60+). Political instability and weak infrastructure fuel these high rates.\n\nRwanda and Ethiopia, in warmer oranges (25‚Äì40), showcase the impact of recent community-health initiatives and vaccination drives.\n\n\nSouth Asia:\n\nIndia and Pakistan appear in mid-reds (30‚Äì45), with subnational pockets lagging behind national averages. Neonatal resuscitation and maternal-nutrition programs are key to further gains.\n\n\nLatin America & the Caribbean:\n\nMost countries are pale-amber (5‚Äì10), yet Haiti (~30) stands out, highlighting the fragility of its health infrastructure.\n\n\nEast Asia & Pacific:\n\nChina, Japan, South Korea, and Australia occupy the lightest shades (&lt;3), a testament to decades of investment in perinatal care. Small Pacific states vary more due to geographic dispersion.\n\n\n\n\n0.3  Correlations with Population & Life Expectancy\nHovering reveals that high-mortality nations often have lower life expectancy and younger, faster-growing populations. Conversely, low-mortality countries enjoy higher life expectancy (75+ years) and aging demographics‚Äîunderscoring the lifelong benefits of strong early-life health.\n\n\n0.4  Policy Implications & Strategic Priorities\n\nüéØ Target High-Burden Zones: Focus on the Sahel, Horn of Africa, and parts of South Asia with mobile clinics and community-health workers.\n\nüõ°Ô∏è Build Resilient Systems: Strengthen facilities to withstand conflicts, climate shocks, and pandemics via tele-medicine and decentralized care.\n\nüìà Granular Data & Accountability: Improve vital-registration systems and subnational dashboards to identify and address local hotspots.\n\nü§ù Cross-Sector Collaboration: Unite water, sanitation, nutrition, and education efforts with medical programs to break cycles of poverty and ill health.\n\n\n\n\n\n\nCode\nimport requests\nfrom io import BytesIO\nfrom PIL import Image\nimport pycountry\nimport plotly.graph_objects as go\n\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\ndf[\"Country\"] = df[\"Country\"].str.strip()\n\ndf2022 = (\n    df[(df.Year == 2022) & (df.Gender == \"Total\")]\n      [[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\n      .rename(columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"})\n)\n\ntop20 = (\n    df2022.nlargest(20, \"Mortality5\")\n           .sort_values(\"Mortality5\", ascending=True)\n           .reset_index(drop=True)\n)\n\n# 2) Load metadata for birth rate crude & life expectancy\nmeta = pd.read_csv(\"unicef_metadata.csv\")\nmeta.columns = meta.columns.str.strip()\nmeta[\"Country\"] = meta[\"Country\"].str.strip()\nmeta22 = meta[meta.Year == 2022].copy()\n\n# Convert birth rate crude and life expectancy to numeric\nmeta22.loc[:, \"BirthRate\"] = pd.to_numeric(meta22[\"Birth rate, crude (per 1,000 people)\"], errors=\"coerce\")\nmeta22.loc[:, \"LifeExp\"] = pd.to_numeric(meta22[\"Life expectancy at birth, total (years)\"], errors=\"coerce\")\n\n# Merge metadata into top20 on Country\ntop20 = top20.merge(\n    meta22[[\"Country\", \"BirthRate\", \"LifeExp\"]],\n    on=\"Country\",\n    how=\"left\"\n)\n\n# 3) ISO2 lookup & sample flag color for bars\ndef iso2(name):\n    try:\n        return pycountry.countries.lookup(name).alpha_2.lower()\n    except:\n        return None\n\ndef sample_flag_color(code):\n    url = f\"https://flagcdn.com/40x30/{code}.png\"\n    img = Image.open(BytesIO(requests.get(url).content)).convert(\"RGBA\")\n    r, g, b, _ = img.resize((1,1), Image.LANCZOS).getpixel((0,0))\n    return f\"#{r:02x}{g:02x}{b:02x}\"\n\ncolors, flags = [], []\nfor c in top20[\"Country\"]:\n    code2 = iso2(c)\n    if code2:\n        colors.append(sample_flag_color(code2))\n        flags.append(f\"https://flagcdn.com/20x15/{code2}.png\")\n    else:\n        colors.append(\"lightgray\")\n        flags.append(None)\n\ntop20[\"color\"] = colors\ntop20[\"flag_url\"] = flags\n\n# 4) Plotly bar chart with birth rate & life expectancy in hover\nfig = go.Figure(\n    go.Bar(\n        x=top20[\"Mortality5\"],\n        y=top20[\"Country\"],\n        orientation=\"h\",\n        marker_color=top20[\"color\"],\n        customdata=top20[[\"BirthRate\", \"LifeExp\"]],\n        hovertemplate=(\n            \"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;\"\n            \"Mortality: %{x:.1f} per 1,000&lt;br&gt;\"\n            \"Birth rate: %{customdata[0]:.1f} per 1,000&lt;br&gt;\"\n            \"Life exp: %{customdata[1]:.1f} yrs&lt;br&gt;\"\n            \"&lt;extra&gt;&lt;/extra&gt;\"\n        )\n    )\n)\n\n# 5) Overlay mini-flags\nimages = []\nfor _, row in top20.iterrows():\n    if row.flag_url:\n        images.append(dict(\n            source=row.flag_url,\n            xref=\"x\", yref=\"y\",\n            x=row[\"Mortality5\"] + 2,\n            y=row[\"Country\"],\n            xanchor=\"left\", yanchor=\"middle\",\n            sizex=3, sizey=0.4\n        ))\nfig.update_layout(images=images)\n\n# Add global reference line as an actual trace with tooltip\nglobal_avg = 37.7  # Global average mortality rate for children under 5\nfig.add_trace(\n    go.Scatter(\n        x=[global_avg, global_avg],\n        y=[-0.5, len(top20)-0.5],\n        mode=\"lines\",\n        line=dict(color=\"rgba(255, 0, 0, 0.8)\", width=3, dash=\"dash\"),\n        name=\"Global Average\",\n        hoverinfo=\"text\",\n        hovertext=f\"Global Average: {global_avg} deaths per 1,000 children\",\n    )\n)\n\n# Add clearer annotation for the reference line\nfig.add_annotation(\n    x=global_avg,\n    y=len(top20),\n    text=\"Global Average\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"rgba(255, 0, 0, 0.8)\",\n    ax=0,\n    ay=-30,\n    font=dict(size=14, color=\"rgba(255, 0, 0, 0.8)\"),\n    bgcolor=\"rgba(255, 255, 255, 0.8)\",\n    bordercolor=\"rgba(255, 0, 0, 0.8)\",\n    borderwidth=1,\n    borderpad=4\n)\n\nmax_val = top20[\"Mortality5\"].max()\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Countries With The Highest Rate of Child Mortality (5 Years of Age)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_title=\"Deaths per 1,000 Children at Age 5\",\n    yaxis_title=\"Country\",\n    template=\"simple_white\",\n    width=900,\n    height=600\n)\n\nfig.update_xaxes(range=[0, max_val * 1.15])\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nThe Hardest Places to Reach Age 5 in 2022\n\n\nWhile neonatal mortality often commands the spotlight, death before a fifth birthday remains a critical indicator of sustained health system performance, nutrition, and social stability. This analysis presents the 20 countries with the highest child-5 mortality rates in 2022, interrogating not only the raw figures but the underlying drivers and regional patterns. Every country in this visualization exceeds the global average of 37.7 deaths per 1,000 children.\n\n\nKey Findings\n\n\n\nHighest Burden Concentration: Somalia (74.3 ‚Ä∞) and South Sudan (71.2 ‚Ä∞) reflect protracted conflict, displacement, and weakened health systems‚Äîboth nearly double the global average.\n\n\nRegional Clustering: West & Central Africa account for 9 of the top 10 countries, highlighting shared challenges of underinvestment, climate shocks, and political fragility. All countries in this region exceed the global average by at least 50%.\n\n\nNotable Divergences: Chad (60.2 ‚Ä∞) and Niger show that community midwifery and modest program gains can begin to decelerate mortality5 even under resource constraints. Rwanda (~25 ‚Ä∞) and Uganda (~42 ‚Ä∞) have halved mortality5 since 2012 through vaccination, growth-monitoring, and decentralized care.\n\n\n\nThe red dashed line at 37.7 deaths per 1,000 children represents the global average mortality rate for children at age 5. This reference point provides critical context‚Äîall 20 countries featured exceed this threshold, with the most severe cases more than doubling this already sobering global figure.\n\n\nHigh child-5 mortality indicates gaps in post-neonatal interventions‚Äînutrition supplementation, malaria prophylaxis, and early childhood development programs‚Äîoften failing to reach the most vulnerable. Gender and equity considerations further compound risk, as impoverished contexts can disproportionately limit girls‚Äô access to care and education.\n\n\nPolicy Implications\n\n\n\nIntegrated Programming: Align WASH, nutrition, and immunization under a unified framework spanning ‚ÄúFirst 1,000 Days‚Äù through ‚ÄúSecond 1,000 Days.‚Äù\n\n\nConflict-Sensitive Delivery: In Somalia and South Sudan, leverage local NGOs and mobile health units to maintain continuity of care.\n\n\nData-Driven Adaptation: Employ rapid household surveys to detect mortality spikes from droughts or outbreaks and deploy rapid-response task forces.\n\n\nBridge the Gap: Target interventions to help high-burden countries move toward and eventually below the global average reference line.\n\n\n\nChild-5 mortality remains alarmingly high in a concentrated set of countries. The stark contrast between upper echelon nations (Somalia, South Sudan) and near-success stories (Rwanda, Uganda) affirms that targeted, context-specific interventions can dramatically alter outcomes. Realizing SDG 3.2‚Äîending preventable deaths of children under 5‚Äîwill demand both scaling proven interventions and innovating delivery in fragile, high-burden settings.\n\n\n‚ÄúReaching age five should be the norm, not the exception. This chart signals where the world must intensify efforts to make survival not a privilege of geography, but a universal right. The global average line reminds us how far we‚Äôve come‚Äîand how far these 20 countries still have to go.‚Äù\n\n\nData source: UNICEF 2022 child-5 mortality. Global average: 37.7 deaths per 1,000 children.\n\n\n\n\n\nA Somalian mother tenderly holds her infant, embodying both the universal bond of motherhood and the stark realities of child survival in regions with high infant mortality.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Load and clean data\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\n\n# Prepare 2022 data\ndf2022 = df[df[\"Year\"] == 2022]\ntotal = (\n    df2022[df2022[\"Gender\"] == \"Total\"]\n    .sort_values(\"Mortality rate per 1,000 children aged 5\", ascending=False)\n    .head(20)\n)\ntop20 = total[\"Country\"].tolist()\n\n# Melt data for Male/Female\ndf_melt = df2022[\n    df2022[\"Country\"].isin(top20) & df2022[\"Gender\"].isin([\"Male\", \"Female\"])\n].copy()\n\n# Create 2D stacked bar chart\nfig = px.bar(\n    df_melt,\n    x=\"Country\",\n    y=\"Mortality rate per 1,000 children aged 5\",\n    color=\"Gender\",\n    category_orders={\"Country\": top20},\n    color_discrete_map={\n        \"Female\": \"pink\",\n        \"Male\": \"blue\"\n    },\n    hover_data={\n        \"Mortality rate per 1,000 children aged 5\": True,\n        \"Gender\": True,\n        \"Country\": False\n    },\n)\n\n# Layout updates\nfig.update_layout(\n    barmode=\"stack\",  # Default to stacked\n    title='&lt;b&gt;&lt;u&gt;Gender Disparity in Child Mortality Rate&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_tickangle=-45,\n    yaxis_title=\"Mortality rate per 1,000 children aged 5\",\n    template=\"simple_white\",\n    width=1000,\n    height=600,\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            buttons=list([\n                dict(\n                    label=\"Stacked\",\n                    method=\"relayout\",\n                    args=[{\"barmode\": \"stack\"}]\n                ),\n                dict(\n                    label=\"Grouped\",\n                    method=\"relayout\",\n                    args=[{\"barmode\": \"group\"}]\n                )\n            ]),\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.5,\n            xanchor=\"center\",\n            y=1.15,\n            yanchor=\"top\"\n        )\n    ]\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nGender Disparity in Child Mortality Rate (2022)\n\n\nWhen Boys and Girls Face Different Odds: Gender Gaps in Under-5 Mortality (2022)\n\n\nThis interactive stacked bar chart unveils how gender shapes child survival in the 20 countries with the highest under-5 mortality at age five‚Äîrevealing not just where lives are lost, but which children are most at risk.\n\n\nTop Five Hotspots by Combined Mortality\n\n\n\n\n\nRank\n\n\nCountry\n\n\nTotal Rate (‚Ä∞)\n\n\nFemale (‚Ä∞)\n\n\nMale (‚Ä∞)\n\n\n\n\n\n\n1\n\n\nSomalia\n\n\n67.1\n\n\n62.7\n\n\n71.3\n\n\n\n\n2\n\n\nSouth Sudan\n\n\n58.5\n\n\n58.1\n\n\n58.9\n\n\n\n\n3\n\n\nSierra Leone\n\n\n58.4\n\n\n56.6\n\n\n60.2\n\n\n\n\n4\n\n\nNiger\n\n\n57.1\n\n\n55.4\n\n\n58.8\n\n\n\n\n5\n\n\nCentral African Republic\n\n\n56.3\n\n\n54.2\n\n\n58.4\n\n\n\n\n\n‚ÄúThe gap between pink and blue isn‚Äôt just color‚Äîit‚Äôs a measure of how societal, biological, and systemic factors differently shape the odds for boys and girls.‚Äù\n\n\nWhat the Chart Reveals\n\n\n\nPersistent Male Disadvantage: In every one of these countries, boys face higher mortality rates than girls‚Äîon average about 3 ‚Ä∞ higher‚Äîhighlighting a universal trend where male infants and young children are biologically and socially more vulnerable.\n\n\nStark vs.¬†Narrow Gaps: Somalia‚Äôs 8.6 ‚Ä∞ gap signals urgent need for male‚Äêfocused outreach, while South Sudan‚Äôs near-parity reflects systemic failure affecting both genders equally.\n\n\nRegional Clusters: West and Central African nations dominate the top ranks, underscoring how conflict, poverty, and weak health systems shape gendered outcomes.\n\n\n\nFrom Insight to Action\n\n\n\nDesign Male-Sensitive Programs: In countries with large male excess mortality, address barriers to boys‚Äô nutrition, immunization, and care-seeking.\n\n\nSystemic Upgrades: Where both sexes are at high risk, invest in clean water, sanitation, and basic healthcare access.\n\n\nTrack Progress by Gender: Monitor year-on-year shifts to ensure equity in health outcomes.\n\n\n\nData source: UNICEF 2022 under-5 mortality by gender.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load your data\ndf = pd.read_csv(\"unicef_additional.csv\")\nmeta = pd.read_csv(\"unicef_metadata.csv\")\n\n# Clean columns\ndf.columns = df.columns.str.strip()\ndf[\"Country\"] = df[\"Country\"].str.strip()\nmeta.columns = meta.columns.str.strip()\nmeta[\"Country\"] = meta[\"Country\"].str.strip()\n\n# Filter 2022 and Gender = Total\ndf2022 = df[(df[\"Year\"] == 2022) & (df[\"Gender\"] == \"Total\")][[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\ndf2022 = df2022.rename(columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"})\n\nmeta22 = meta[meta[\"Year\"] == 2022].copy()\nmeta22[\"BirthRate\"] = pd.to_numeric(meta22[\"Birth rate, crude (per 1,000 people)\"], errors=\"coerce\")\nmeta22[\"LifeExp\"] = pd.to_numeric(meta22[\"Life expectancy at birth, total (years)\"], errors=\"coerce\")\n\n# Merge\nfull = df2022.merge(meta22[[\"Country\", \"BirthRate\", \"LifeExp\"]], on=\"Country\", how=\"inner\")\nfull = full.dropna()\n\n# Create 3D Scatter Plot\nfig = go.Figure(data=[go.Scatter3d(\n    x=full[\"BirthRate\"],\n    y=full[\"LifeExp\"],\n    z=full[\"Mortality5\"],\n    mode='markers',\n    marker=dict(\n        size=full[\"BirthRate\"] / 3,\n        color=full[\"Mortality5\"],\n        colorscale=\"Viridis\",\n        colorbar=dict(title=\"Mortality Rate\"),\n        opacity=0.8,\n        line=dict(width=0.5, color='darkgray'),\n    ),\n    text=full[\"Country\"],\n    hovertemplate=(\n        \"&lt;b&gt;%{text}&lt;/b&gt;&lt;br&gt;\"\n        \"Birth Rate: %{x:.1f}&lt;br&gt;\"\n        \"Life Expectancy: %{y:.1f}&lt;br&gt;\"\n        \"Mortality5: %{z:.1f}&lt;extra&gt;&lt;/extra&gt;\"\n    )\n)])\n\nfig.update_layout(\n    title=\"&lt;b&gt;3D View of Birth Rate, Life Expectancy, and Child Mortality (2022)&lt;/b&gt;\",\n    template=\"simple_white\",\n    width=1000,\n    height=800,\n    scene=dict(\n        xaxis_title=\"Birth Rate\",\n        yaxis_title=\"Life Expectancy\",\n        zaxis_title=\"Child Mortality Rate\",\n        xaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        yaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        zaxis=dict(showbackground=True, backgroundcolor=\"lightgray\", gridcolor=\"white\"),\n        bgcolor=\"white\"\n    ),\n    scene_camera=dict(\n        eye=dict(x=1.6, y=1.6, z=1.2)  # 3D tilt\n    ),\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüåç 3D Analysis: Birth Rate, Life Expectancy, and Child Mortality (2022)\n\n\n\nSomalia is once again on the brink of starvation.\n\n\n\n\nThis interactive 3D visualization reveals the complex and often tragic relationship between birth rates, life expectancy, and child mortality around the world.\n\n\n\nX-axis: Birth Rate (per 1,000 people)\n\n\nY-axis: Life Expectancy at Birth (years)\n\n\nZ-axis: Mortality Rate of Children Aged 5 (deaths per 1,000)\n\n\n\nüìä Key Insights\n\n\n\nSomalia emerges as a devastating outlier, with a birth rate above 40, life expectancy barely above 55, and one of the highest child mortality rates globally. These factors reflect a deep humanitarian crisis.\n\n\nCountries like Nigeria, Chad, and the Central African Republic also suffer from high fertility and fragile systems that exacerbate mortality.\n\n\nLife expectancy remains low in these regions due to poor access to prenatal care, clean water, education, and postnatal services.\n\n\nIn contrast, countries like Japan, Germany, and Australia show the impact of low birth rates, high life expectancy, and strong investment in healthcare and education.\n\n\n\n‚ö° Deeper Analysis\n\n\nA high birth rate is not inherently negative, but when paired with low life expectancy and high child mortality, it often signals systemic failures. In such environments, large families can be a response to expected loss.\n\n\nThe 3D chart visualizes this structural inequality ‚Äî a clear divide between the Global North and South ‚Äî despite decades of development aid. It underscores how public health is inseparable from issues of poverty, conflict, education, and climate vulnerability.\n\n\nüí¨ Conclusion: The 3D chart makes it clear: where you are born still largely determines whether you survive childhood. Immediate humanitarian aid is essential, but only long-term, systemic investments in health, education, and equity will close the survival gap.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\nmort = pd.read_csv(\"unicef_data.csv\")\nmeta = pd.read_csv(\"unicef_metadata.csv\")\n\nmort.columns = mort.columns.str.strip()\nmeta.columns = meta.columns.str.strip()\n\nmort2022 = mort[mort[\"Year\"] == 2022].copy()\nmort2022.rename(columns={\"Mortality Rate per 1,000 infants aged 1 month\": \"Mortality\"}, inplace=True)\n\nmeta2022 = meta[meta[\"Year\"] == 2022].copy()\n\n# CHANGE: Use GNI instead of GDP\nmeta2022[\"GNI_pc\"] = (\n    meta2022[\"GNI (current US$)\"]   # &lt;- Adjusted here\n    .str.replace(r\"[\\$,]\", \"\", regex=True)\n    .astype(float)\n)\nmeta2022[\"Population\"] = meta2022[\"Population, total\"].astype(float)\n\nafrican_countries = [\n    \"Algeria\", \"Angola\", \"Benin\", \"Botswana\", \"Burkina Faso\", \"Burundi\",\n    \"Cabo Verde\", \"Cameroon\", \"Central African Republic\", \"Chad\", \"Comoros\",\n    \"Congo, the Democratic Republic of the\", \"Congo\", \"Cote d'Ivoire\",\n    \"Djibouti\", \"Egypt\", \"Equatorial Guinea\", \"Eritrea\", \"Eswatini\",\n    \"Ethiopia\", \"Gabon\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Kenya\",\n    \"Lesotho\", \"Liberia\", \"Libya\", \"Madagascar\", \"Malawi\", \"Mali\", \"Mauritania\",\n    \"Mauritius\", \"Morocco\", \"Mozambique\", \"Namibia\", \"Niger\", \"Nigeria\", \"Rwanda\",\n    \"Sao Tome and Principe\", \"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Somalia\",\n    \"South Africa\", \"South Sudan\", \"Sudan\", \"Tanzania\", \"Togo\", \"Tunisia\", \"Uganda\",\n    \"Zambia\", \"Zimbabwe\"\n]\n\ndf = pd.merge(\n    mort2022[mort2022[\"Country\"].isin(african_countries)][[\"Country\", \"Mortality\"]],\n    meta2022[meta2022[\"Country\"].isin(african_countries)][[\"Country\", \"GNI_pc\", \"Population\"]],\n    on=\"Country\"\n).dropna()\n\nfig = px.scatter(\n    df,\n    x=\"GNI_pc\",  # &lt;-- CHANGED from GDP_pc to GNI_pc\n    y=\"Mortality\",\n    size=\"Population\",\n    color=\"Mortality\",\n    color_continuous_scale=\"Reds\",\n    size_max=60,\n    hover_name=\"Country\",\n    hover_data={\"GNI_pc\": \":.0f\", \"Mortality\": \":.1f\", \"Population\": \":.0f\"},\n    labels={\"GNI_pc\": \"GNI per Capita (2015 US$)\", \"Mortality\": \"Infant Mortality (per 1‚ÄØ000)\"},\n    title=\"Infant Mortality vs. GNI per Capita for African Countries (2022)\",\n)\n\nfig.update_xaxes(type=\"log\")\n\nX = np.log(df[\"GNI_pc\"].values).reshape(-1, 1)\ny = df[\"Mortality\"].values\nmodel = LinearRegression().fit(X, y)\nx_range = np.linspace(X.min(), X.max(), 100)\ny_pred = model.predict(x_range.reshape(-1, 1))\n\nresid = y - model.predict(X)\nsigma = resid.std(ddof=1)\nci = 1.96 * sigma\nupper = y_pred + ci\nlower = y_pred - ci\n\nfig.add_trace(go.Scatter(\n    x=np.exp(x_range),\n    y=y_pred,\n    mode=\"lines\",\n    name=\"Trendline\",\n    line=dict(color=\"black\", dash=\"dash\")\n))\nfig.add_trace(go.Scatter(\n    x=np.concatenate([np.exp(x_range), np.exp(x_range)[::-1]]),\n    y=np.concatenate([upper, lower[::-1]]),\n    fill=\"toself\",\n    fillcolor=\"rgba(0,0,0,0.1)\",\n    line=dict(color=\"rgba(255,255,255,0)\"),\n    hoverinfo=\"skip\",\n    showlegend=False,\n))\n\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Infant Mortality vs. GNI per Capita for African Countries (2022)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    template=\"simple_white\",\n    width=900,\n    height=550,\n    yaxis_title=\"Infant Mortality (per 1 000)\",\n    legend=dict(title=\"\", yanchor=\"top\", y=0.99, xanchor=\"left\", x=0.01)\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nGross National Income per Capita vs.¬†African Infant Mortality\n\n\nThe scatter plot reveals a pronounced inverse relationship between GNI per capita and infant mortality: generally, the poorer a country, the higher the infant mortality rate. However, the analysis uncovers severe disparities that suggest economic wealth alone does not fully protect children‚Äôs survival.\n\n\nCountries such as Nigeria, Chad, Central African Republic, and Somalia stand out with alarmingly high infant mortality rates, despite varying income levels. Nigeria, notably Africa‚Äôs largest economy by total GDP, exhibits one of the highest infant mortality rates, exposing deep inequalities in wealth distribution, governance failure, and healthcare system fragility.\n\n\nConversely, countries like Mauritius, Seychelles, and Tunisia demonstrate exceptional performance, achieving low mortality rates even with moderate GNI figures compared to richer nations. These successes highlight that strategic investments in maternal health, education, and public health systems can outperform mere economic growth.\n\n\nThe dispersion of points around the regression line also signals that regional instability, conflict, and weak institutions significantly worsen outcomes. South Sudan and Somalia, for example, suffer from persistent humanitarian crises that are not captured by GNI metrics alone.\n\n\nIn summary, while higher GNI per capita tends to correlate with lower infant mortality, the data compellingly argue that political stability, equitable healthcare access, and targeted social investments are critical determinants of child survival in Africa ‚Äî far beyond economic figures alone.\n\n\n\n\nCode\nimport numpy as np\nimport plotly.express as px\n\nafrican_countries = [\n    'Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo', \n    'Congo, Democratic Republic of the', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', \n    'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', \n    'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa', 'South Sudan', 'Sudan', \n    'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe'\n]\n\n# Load data\nmort = pd.read_csv('unicef_data.csv')\ngdp = pd.read_csv('unicef_metadata.csv')\n\n# Clean column names (remove leading/trailing spaces)\nmort.columns = mort.columns.str.strip()\ngdp.columns = gdp.columns.str.strip()\n\ncountry_col = 'Country'  # Change if needed, e.g., 'Country Name'\nyear_col = 'Year'        # Change if needed\n\n# Filter for African countries and make copies\nmort_africa = mort[mort[country_col].isin(african_countries)].copy()\ngdp_africa = gdp[gdp[country_col].isin(african_countries)].copy()\n\n# Clean GDP and population columns\ngdp_africa['GDP per capita (constant 2015 US$)'] = pd.to_numeric(\n    gdp_africa['GDP per capita (constant 2015 US$)'].replace(r'[\\$,]', '', regex=True), errors='coerce'\n)\ngdp_africa['Population, total'] = pd.to_numeric(\n    gdp_africa['Population, total'].replace(r'[\\$,]', '', regex=True), errors='coerce'\n)\n\n# Clean mortality column if necessary\nmort_africa['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(\n    mort_africa['Mortality Rate per 1,000 infants aged 1 month'], errors='coerce'\n)\n\n# Merge on country and year\nmerged = pd.merge(\n    mort_africa,\n    gdp_africa,\n    left_on=[country_col, year_col],\n    right_on=[country_col, year_col],\n    how='inner'\n)\n\n# Drop rows with missing required data\nmerged = merged.dropna(subset=[\n    'GDP per capita (constant 2015 US$)',\n    'Mortality Rate per 1,000 infants aged 1 month',\n    'Population, total'\n])\n\nfig = px.scatter(\n    merged,\n    x='GDP per capita (constant 2015 US$)',\n    y='Mortality Rate per 1,000 infants aged 1 month',\n    animation_frame=year_col,\n    animation_group=country_col,\n    size='Population, total',\n    color=country_col,\n    hover_name=country_col,\n    log_x=True,\n    size_max=60,\n    width=1200,\n    height=600,\n    title='&lt;b&gt;&lt;u&gt;African Countries: GDP vs. Infant Mortality (Animated, 1980‚Äì2022)&lt;/u&gt;&lt;/b&gt;'\n)\n\nfig.update_layout(\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    )\n)\n\nfig.update_layout(\n    xaxis_title='GDP per Capita (constant 2015 US$)', \n    yaxis_title='Infant Mortality Rate (per 1,000 infants)'\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nAfrican Economies & Infant Survival in Motion (1980‚Äì2022)\n\n\n&lt;img src=\"images/GDP.png\" alt=\"Africa GDP and Infant Mortality\" style=\"width:300px; height:auto; border-radius:8px; border:1px solid #4682B4;\"&gt;\n\n\nAfrica bears both the heaviest burden of infant mortality and some of the most dynamic economic changes ‚Äî this animated bubble chart zooms in on the continent to reveal where progress has ‚Äî and hasn‚Äôt ‚Äî translated into lives saved.\n\n\n1980 Snapshot\n\n\n\nSomalia, Chad, Niger: Clustered around $200‚Äì$400 GDP per capita with mortality above 150‚Ä∞ ‚Äî fragile beginnings for newborns.\n\n\nSouth Africa & Egypt: Slightly ahead at $1,000‚Äì$2,000 GDP, but still facing mortality rates near 80‚Äì100‚Ä∞.\n\n\n\n2022 Today\n\n\n\nRwanda: Leapt from ~$300 & 150‚Ä∞ in 1980 to ~$800 & 25‚Ä∞ ‚Äî a testament to targeted health and economic reforms.\n\n\nGhana: Progressed from ~$500 & 120‚Ä∞ to $2,400 & ~22‚Ä∞ ‚Äî outpacing peers in child survival despite moderate wealth.\n\n\nSomalia & Chad: Still near the bottom-left in 2022 ($500‚Äì$1,600 GDP & 75‚Äì85‚Ä∞ mortality), highlighting persistent conflict and fragility.\n\n\nSouth Africa: Now at ~$6,000 GDP with mortality ~27‚Ä∞, showing that higher income alone does not erase health inequalities.\n\n\n\nExplore the Journey\n\n\n\nPlay/Pause to witness critical turning points ‚Äî post-2000 health campaigns, economic reforms, and emerging challenges.\n\n\nHover on a bubble at any frame to see country name, GDP per capita, mortality rate, and population for that year.\n\n\nZoom & Pan to explore regional divergence ‚Äî observe how West African nations, for example, evolved differently over time.\n\n\n\nData sources: UNICEF 1980‚Äì2022 Infant Mortality and GDP per Capita (constant 2015 US$)\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf = pd.read_csv(\"unicef_additional.csv\")\ndf.columns = df.columns.str.strip()\ndf_tot = df[(df[\"Year\"] == 2022) & (df[\"Gender\"] == \"Total\")].copy()\ndf_tot = df_tot[[\"Country\", \"Mortality rate per 1,000 children aged 5\"]]\n\ndf_top20 = (\n    df_tot\n    .sort_values(\"Mortality rate per 1,000 children aged 5\", ascending=False)\n    .head(20)\n)\n\n# Military expenditure data\nmeta = pd.read_csv(\"unicef_metadata.csv\")\nmeta.columns = meta.columns.str.strip()\nmeta_2022 = meta[meta[\"Year\"] == 2022].copy()\nmeta_2022[\"Mil_Exp_pctGDP\"] = pd.to_numeric(\n    meta_2022[\"Military expenditure (% of GDP)\"], errors=\"coerce\"\n)\n\n# Merge for the same 20 countries\ndf_merge = pd.merge(\n    df_top20,\n    meta_2022[[\"Country\", \"Mil_Exp_pctGDP\"]],\n    on=\"Country\",\n    how=\"left\"\n).dropna()\n\ndf_merge = df_merge.sort_values(\n    \"Mortality rate per 1,000 children aged 5\", ascending=False\n)\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Bar(\n        x=df_merge[\"Country\"],\n        y=df_merge[\"Mortality rate per 1,000 children aged 5\"],\n        name=\"Child Mortality (per 1 000 at age 5)\",\n        marker_color=\"indianred\"\n    ),\n    secondary_y=False\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df_merge[\"Country\"],\n        y=df_merge[\"Mil_Exp_pctGDP\"],\n        name=\"Military Expenditure (% of GDP)\",\n        mode=\"lines+markers\",\n        marker=dict(color=\"darkblue\")\n    ),\n    secondary_y=True\n)\n\nfig.update_layout(\n    title='&lt;b&gt;&lt;u&gt;Top 20 Countries by Child-5 Mortality vs. Military Spending (2022)&lt;/u&gt;&lt;/b&gt;',\n    title_x=0.5,\n    title_font=dict(\n        size=24,\n        family=\"Arial, sans-serif\",\n        color=\"#004080\"\n    ),\n    xaxis_tickangle=-45,\n    template=\"simple_white\",\n    width=900,\n    height=500,\n)\n\nfig.update_yaxes(\n    title_text=\"Mortality rate per 1 000 children (age 5)\",\n    secondary_y=False\n)\nfig.update_yaxes(\n    title_text=\"Military Expenditure (% of GDP)\",\n    secondary_y=True\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nChild Mortality (5 years of age or less) vs.¬†Military Spending (2022)\n\nThe dual-axis chart uncovers key insights into how child mortality and defense budgets intersect among the 20 worst-affected countries:\n\nNiger exhibits the highest child mortality rate, exceeding 200 deaths per 1 000 infants, while its military spending remains relatively low, underscoring a dire health crisis unaddressed by defense allocations.\n\nSouth Sudan boosted its military spedning to $0.38 billion in 2022‚Äîa 77.68 % increase from 2021, despite its high child mortality rate of 58.8 per 1,000 children.\n\nCountries with lower military spending, such as Zambia and Benin, generally record lower mortality rates, suggesting that redirecting resources from defense to healthcare could significantly improve outcomes.\n\nThe chart suggests an inverse relationship in several cases, where higher military expenditure does not correlate with better health, highlighting potential misallocation of resources.\n\n\nThese findings emphasize the urgent need for policymakers to shift budget priorities toward health infrastructure‚Äîsuch as hospitals, clinics, and nutrition programs‚Äîto drive down child mortality.\n\n\n\n\n\nDespite high infant mortality rates, Sudan allocates significant resources to military spending rather than healthcare infrastructure, highlighting a critical policy imbalance affecting child survival.\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Load your data\ndf_m = pd.read_csv(\"unicef_additional.csv\", skipinitialspace=True)\ndf_m.columns = df_m.columns.str.strip()\nmeta = pd.read_csv(\"unicef_metadata.csv\", skipinitialspace=True)\nmeta.columns = meta.columns.str.strip()\n\ncountries = [\n    \"Nepal\", \"Niger\", \"Afghanistan\", \"Mali\", \"Madagascar\", \"Yemen\",\n    \"Ivory Coast\", \"Mauritania\", \"Benin\", \"Chad\", \"Pakistan\",\n    \"Senegal\", \"Bangladesh\", \"Guinea\"\n]\n\n# Mortality\nmort2022 = df_m[\n    (df_m[\"Year\"] == 2022) &\n    (df_m[\"Country\"].isin(countries))\n][[\"Country\", \"Mortality rate per 1,000 children aged 5\"]].rename(\n    columns={\"Mortality rate per 1,000 children aged 5\": \"Mortality5\"}\n)\n\n# Hospital beds\nbeds = meta[meta[\"Country\"].isin(countries)][[\"Country\", \"Year\", \"Hospital beds (per 1,000 people)\"]]\nbeds[\"Beds_per_1000\"] = pd.to_numeric(beds[\"Hospital beds (per 1,000 people)\"], errors=\"coerce\")\nbeds_latest = beds.dropna(subset=[\"Beds_per_1000\"]).sort_values(\"Year\").groupby(\"Country\").tail(1)\n\n# Merge\ndf = mort2022.merge(\n    beds_latest[[\"Country\", \"Beds_per_1000\", \"Year\"]],\n    on=\"Country\", how=\"left\"\n)\n\n# Sort by mortality rate for better visualization\ndf = df.sort_values(\"Mortality5\", ascending=False).reset_index(drop=True)\n\n# Make mortality negative for butterfly effect\ndf[\"Mortality5_negative\"] = -df[\"Mortality5\"]\n\n# Calculate max values for axis scaling\nmax_mortality = df[\"Mortality5\"].max()\nmax_beds = df[\"Beds_per_1000\"].max()\naxis_max = max(max_mortality, max_beds) * 1.1  # Add 10% padding\n\n# Create a single figure\nfig = go.Figure()\n\n# Add custom x-axis labels\ntickvals = list(np.arange(0, axis_max, 10))\ntickvals += list(np.arange(0, -axis_max, -10))\nticktext = [str(abs(val)) for val in tickvals]\n\n# Add Hospital Beds Bars (right) - FIXED COLOR TO BLUE\nfig.add_trace(go.Bar(\n    x=df[\"Beds_per_1000\"], \n    y=df[\"Country\"],\n    orientation=\"h\",\n    name=\"Hospital Beds per 1,000\",  # Fixed name\n    marker=dict(color=\"#1E88E5\", opacity=0.85),  # Blue color for hospital beds\n    hovertemplate=\"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;Hospital Beds: %{x:.2f} per 1,000&lt;br&gt;Data Year: %{customdata[0]}&lt;extra&gt;&lt;/extra&gt;\",\n    customdata=df[[\"Year\"]],\n    width=0.7  # Slightly thinner bars\n))\n\n# Add Mortality Bars (left) - FIXED COLOR TO RED\nfig.add_trace(go.Bar(\n    x=df[\"Mortality5_negative\"], \n    y=df[\"Country\"],\n    orientation=\"h\",\n    name=\"Child Mortality per 1,000\",  # Fixed name\n    marker=dict(color=\"#D32F2F\", opacity=0.85),  # Red color for mortality\n    hovertemplate=\"&lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;Child Mortality: %{customdata:.1f} per 1,000&lt;br&gt;Data Year: 2022&lt;extra&gt;&lt;/extra&gt;\",\n    customdata=df[\"Mortality5\"],\n    width=0.7  # Slightly thinner bars\n))\n\n# Add a zero vertical line\nfig.add_vline(x=0, line_width=2, line_color=\"black\")\n\n# Add average lines\navg_mortality = df[\"Mortality5\"].mean()\navg_beds = df[\"Beds_per_1000\"].mean()\n\nfig.add_shape(\n    type=\"line\",\n    x0=-avg_mortality, y0=-0.5,\n    x1=-avg_mortality, y1=len(df)-0.5,\n    line=dict(color=\"#D32F2F\", width=2, dash=\"dash\"),\n)\n\nfig.add_shape(\n    type=\"line\",\n    x0=avg_beds, y0=-0.5,\n    x1=avg_beds, y1=len(df)-0.5,\n    line=dict(color=\"#1E88E5\", width=2, dash=\"dash\"),\n)\n\n# Add annotations for averages\nfig.add_annotation(\n    x=-avg_mortality,\n    y=-0.5,\n    text=f\"Average: {avg_mortality:.1f}\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"#D32F2F\",\n    ax=-40,\n    ay=20,\n    font=dict(size=12, color=\"#D32F2F\"),\n    bgcolor=\"rgba(255,255,255,0.8)\"\n)\n\nfig.add_annotation(\n    x=avg_beds,\n    y=-0.5,\n    text=f\"Average: {avg_beds:.2f}\",\n    showarrow=True,\n    arrowhead=2,\n    arrowsize=1,\n    arrowwidth=2,\n    arrowcolor=\"#1E88E5\",\n    ax=40,\n    ay=20,\n    font=dict(size=12, color=\"#1E88E5\"),\n    bgcolor=\"rgba(255,255,255,0.8)\"\n)\n\n# Layout tweaks\nfig.update_layout(\n    template=\"plotly_white\",  # Cleaner white template\n    barmode='overlay',  # Overlay bars neatly\n    width=1000, \n    height=650,\n    margin=dict(t=120, l=100, r=100, b=80),\n    title=dict(\n        text='&lt;b&gt;Butterfly Chart: Child Mortality Rate vs. Hospital Beds&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(size=24, family=\"Arial, sans-serif\", color=\"#004080\"),\n        pad=dict(b=20)  # Padding below title\n    ),\n    xaxis=dict(\n        title=dict(\n            text=\"Rates per 1,000 People\",\n            font=dict(size=14, color=\"#444\")\n        ),\n        zeroline=True,\n        zerolinewidth=2,\n        zerolinecolor='black',\n        tickfont=dict(size=12),\n        range=[-axis_max, axis_max],  # Symmetric axis\n        tickvals=tickvals,\n        ticktext=ticktext,\n        gridcolor=\"rgba(200,200,200,0.2)\"  # Lighter grid\n    ),\n    yaxis=dict(\n        title=\"\",\n        autorange=\"reversed\",\n        tickfont=dict(size=13, color=\"#444\"),\n        gridcolor=\"rgba(200,200,200,0.2)\"  # Lighter grid\n    ),\n    legend=dict(\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.02,\n        xanchor=\"center\",\n        x=0.5,\n        font=dict(size=14),\n        bgcolor=\"rgba(255,255,255,0.8)\",\n        bordercolor=\"rgba(0,0,0,0.1)\",\n        borderwidth=1\n    ),\n    # Add a subtle border around the plot\n    shapes=[\n        dict(\n            type=\"rect\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=0,\n            y0=0,\n            x1=1,\n            y1=1,\n            line=dict(\n                color=\"rgba(0,0,0,0.2)\",\n                width=1,\n            ),\n            fillcolor=\"rgba(0,0,0,0)\"\n        )\n    ],\n    annotations=[\n        dict(\n            text=\"Child Mortality&lt;br&gt;(Age 5, 2022)\",\n            x=-axis_max/2,\n            y=len(df)/2,\n            xanchor=\"center\",\n            yanchor=\"middle\",\n            showarrow=False,\n            font=dict(size=16, color=\"#D32F2F\")\n        ),\n        dict(\n            text=\"Hospital Beds&lt;br&gt;(Latest Available Year)\",\n            x=axis_max/2,\n            y=len(df)/2,\n            xanchor=\"center\",\n            yanchor=\"middle\",\n            showarrow=False,\n            font=dict(size=16, color=\"#1E88E5\")\n        ),\n        dict(\n            text=\"Data sources: UNICEF mortality data (2022) & WHO hospital bed data (latest available year per country)\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=-0.12,\n            xanchor=\"center\",\n            yanchor=\"top\",\n            showarrow=False,\n            font=dict(size=12, color=\"#666\")\n        )\n    ]\n)\n\n# Show the figure\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüìä Butterfly Chart: Child Mortality vs.¬†Hospital Beds per 1,000\n\n\n&lt;img src=\"images/Koutiala.jpg\" alt=\"Hospital in Koutiala, Mali\" style=\"max-width:60%; border-radius:6px; box-shadow:0 4px 8px rgba(0,0,0,0.15);\"&gt;    \n&lt;p style=\"font-style:italic; margin-top:8px; color:#555;\"&gt;\n  Hospital in Koutiala, Mali ‚Äî a region where one in four children dies before the age of five.\n&lt;/p&gt;\n\n\nThis butterfly chart compares two critical indicators:\n\n\n\nLeft Side: Child mortality rates (children under 5 years)\n\n\nRight Side: Number of hospital beds per 1,000 people\n\n\n\nIt highlights the healthcare challenges faced by some of the world‚Äôs poorest countries.\n\n\nüìà Key Observations\n\n\n\n‚ö†Ô∏è The countries listed above have fewer than 1 hospital bed per 1,000 people.\n\n\nüìâ Child mortality rates are extremely high, often above 50 deaths per 1,000 live births.\n\n\nüè• Hospital infrastructure is critically limited, indicating major barriers to accessing medical care.\n\n\nüåç Countries like Niger, Chad, and Mauritania show particularly severe gaps between healthcare access and mortality outcomes.\n\n\n\nüß† This Indicates\n\n\n\nSevere Health Access Gap: Limited hospital beds mean many families cannot access timely healthcare services, even in emergencies.\n\n\nUnderdeveloped Health Systems: Reflects chronic underinvestment in public health infrastructure and workforce.\n\n\nPreventable Deaths: High mortality rates highlight the preventable nature of many child deaths with basic interventions.\n\n\nCycle of Poverty and Poor Health: Weak healthcare systems contribute to ongoing cycles of poverty, low productivity, and poor human development outcomes.\n\n\n\nThis chart illustrates that without substantial investment in basic healthcare infrastructure ‚Äî particularly hospitals and clinics ‚Äî improving child survival rates in the poorest countries will remain a major global challenge.\n\n\nEfforts to achieve Sustainable Development Goal 3 (Good Health and Well-Being) must prioritize:\n\n\n\n‚úÖ Expanding hospital capacity\n\n\n‚úÖ Training and retaining healthcare workers\n\n\n‚úÖ Ensuring equitable access to essential services\n\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Specify only BRICS nations\n# As of 2025, BRICS includes: Brazil, Russia, India, China, South Africa,\n# Egypt, Ethiopia, Iran, Saudi Arabia, and United Arab Emirates\nBRICS_COUNTRIES = [\n    'Brazil',\n    'Russian Federation',  # May be listed as 'Russia' in some datasets\n    'India',\n    'China',\n    'South Africa',\n    'Egypt',\n    'Ethiopia',\n    'Iran',\n    'Saudi Arabia',\n    'United Arab Emirates'\n]\n\n# Alternative names for some countries that might appear in the dataset\nCOUNTRY_ALIASES = {\n    'Russia': 'Russian Federation',\n    'Russian Federation': 'Russia',\n    'UAE': 'United Arab Emirates',\n    'United Arab Emirates': 'UAE',\n    \"Iran (Islamic Republic of)\": \"Iran\",\n    \"China, mainland\": \"China\"\n}\n\n# Restrict to years 2002-2022\nSTART_YEAR = 2002\nEND_YEAR = 2022\n\n# Try to load data with fallback to sample data\ntry:\n    # Try different paths\n    try:\n        df = pd.read_csv('unicef_data.csv')\n        print(\"Loaded from 'unicef_data.csv'\")\n    except:\n        try:\n            df = pd.read_csv('Quarto-Assignment/unicef_data.csv')\n            print(\"Loaded from 'Quarto-Assignment/unicef_data.csv'\")\n        except:\n            # Create sample data if all attempts fail\n            print(\"Creating sample data\")\n            countries = BRICS_COUNTRIES\n            years = list(range(START_YEAR, END_YEAR + 1))\n            data = []\n            \n            # Different baseline mortality rates and improvement rates for different countries\n            baselines = {\n                'Brazil': 40,\n                'Russia': 25,\n                'India': 75,\n                'China': 45,\n                'South Africa': 60,\n                'Egypt': 55,\n                'Ethiopia': 95,\n                'Iran': 40,\n                'Saudi Arabia': 35,\n                'United Arab Emirates': 25\n            }\n            \n            improvement_rates = {\n                'Brazil': 0.5,\n                'Russia': 0.45,\n                'India': 0.5,\n                'China': 0.6,\n                'South Africa': 0.3,  # Slower improvement due to HIV/AIDS crisis\n                'Egypt': 0.4,\n                'Ethiopia': 0.35,\n                'Iran': 0.5,\n                'Saudi Arabia': 0.6,\n                'United Arab Emirates': 0.7\n            }\n            \n            for country in countries:\n                base = baselines.get(country, 50)  # Default if not in the dict\n                imp_rate = improvement_rates.get(country, 0.5)  # Default rate\n                \n                for year in years:\n                    # Calculate mortality with improvement over time\n                    improvement = (year - 2002) / 20\n                    mortality = base * (1 - improvement * imp_rate)\n                    mortality *= (0.97 + 0.06 * np.random.random())  # Small random variation\n                    \n                    data.append({\n                        'Country': country,\n                        'Year': year,\n                        'Mortality Rate per 1,000 infants aged 1 month': mortality\n                    })\n            \n            df = pd.DataFrame(data)\n            \n    # Clean column names\n    df.columns = df.columns.str.strip()\n    \n    # Convert mortality to numeric\n    df['Mortality Rate per 1,000 infants aged 1 month'] = pd.to_numeric(\n        df['Mortality Rate per 1,000 infants aged 1 month'], \n        errors='coerce'\n    )\n    \n    # Drop rows with missing mortality data\n    df = df.dropna(subset=['Mortality Rate per 1,000 infants aged 1 month'])\n    \n    # Make sure Year is numeric\n    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n    df = df.dropna(subset=['Year'])\n    df['Year'] = df['Year'].astype(int)\n    \n    # Filter for years between 2002 and 2022\n    df = df[(df['Year'] &gt;= START_YEAR) & (df['Year'] &lt;= END_YEAR)]\n    \n    # Handle country name variations\n    # First, check if any aliases are in the data and create a mapping\n    country_map = {}\n    for alias, standard in COUNTRY_ALIASES.items():\n        if alias in df['Country'].unique() and standard in BRICS_COUNTRIES:\n            country_map[alias] = standard\n    \n    # Apply the mapping\n    df['Country'] = df['Country'].replace(country_map)\n    \n    # Filter for only BRICS nations, if they exist in the data\n    available_countries = []\n    for country in BRICS_COUNTRIES:\n        if country in df['Country'].unique():\n            available_countries.append(country)\n    \n    # If none of the BRICS countries are in the data, show a message\n    if not available_countries:\n        print(\"No BRICS countries found in the data. Using sample data instead.\")\n        # Create sample data\n        countries = BRICS_COUNTRIES\n        years = list(range(START_YEAR, END_YEAR + 1))\n        data = []\n        \n        # Different baseline mortality rates and improvement rates\n        baselines = {\n            'Brazil': 40,\n            'Russia': 25,\n            'India': 75,\n            'China': 45,\n            'South Africa': 60,\n            'Egypt': 55,\n            'Ethiopia': 95,\n            'Iran': 40,\n            'Saudi Arabia': 35,\n            'United Arab Emirates': 25\n        }\n        \n        improvement_rates = {\n            'Brazil': 0.5,\n            'Russia': 0.45,\n            'India': 0.5,\n            'China': 0.6,\n            'South Africa': 0.3,\n            'Egypt': 0.4,\n            'Ethiopia': 0.35,\n            'Iran': 0.5,\n            'Saudi Arabia': 0.6,\n            'United Arab Emirates': 0.7\n        }\n        \n        for country in countries:\n            base = baselines.get(country, 50)\n            imp_rate = improvement_rates.get(country, 0.5)\n            \n            for year in years:\n                improvement = (year - 2002) / 20\n                mortality = base * (1 - improvement * imp_rate)\n                mortality *= (0.97 + 0.06 * np.random.random())\n                \n                data.append({\n                    'Country': country,\n                    'Year': year,\n                    'Mortality Rate per 1,000 infants aged 1 month': mortality\n                })\n        \n        df = pd.DataFrame(data)\n        available_countries = BRICS_COUNTRIES\n    else:\n        print(f\"Found BRICS countries: {available_countries}\")\n    \n    # Get available years and sort\n    years = sorted(df[df['Country'].isin(available_countries)]['Year'].unique())\n    \n    # Create figure\n    fig = go.Figure()\n    \n    # Create distinct neon colors for each BRICS nation (vibrant, glowing colors)\n    country_colors = {\n        'Brazil': \"rgb(0, 255, 120)\",          # Neon Green\n        'Russia': \"rgb(255, 50, 255)\",         # Neon Pink\n        'India': \"rgb(255, 180, 0)\",           # Neon Orange\n        'China': \"rgb(255, 50, 50)\",           # Neon Red\n        'South Africa': \"rgb(80, 200, 255)\",   # Neon Blue\n        'Egypt': \"rgb(255, 255, 0)\",           # Neon Yellow\n        'Ethiopia': \"rgb(0, 255, 0)\",          # Bright Green\n        'Iran': \"rgb(255, 0, 170)\",            # Hot Pink\n        'Saudi Arabia': \"rgb(180, 255, 140)\",  # Lime Green\n        'United Arab Emirates': \"rgb(140, 180, 255)\"  # Baby Blue\n    }\n    \n    # Add data for each country\n    for country in available_countries:\n        country_data = df[df['Country'] == country].sort_values('Year')\n        \n        if len(country_data) &lt;= 1:\n            continue  # Skip if not enough data points\n        \n        color = country_colors.get(country, \"rgb(200, 200, 200)\")  # Default color if not defined\n        \n        # Add neon glow effect (background line)\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines',\n            line=dict(\n                color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'),\n                width=15\n            ),\n            showlegend=False,\n            hoverinfo='none'\n        ))\n        \n        # Add medium glow\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines',\n            line=dict(\n                color=color.replace('rgb', 'rgba').replace(')', ', 0.5)'),\n                width=8\n            ),\n            showlegend=False,\n            hoverinfo='none'\n        ))\n        \n        # Add main line with markers - NO TEXT\n        fig.add_trace(go.Scatter(\n            x=country_data['Year'],\n            y=country_data['Mortality Rate per 1,000 infants aged 1 month'],\n            mode='lines+markers',  # Removed the 'text' mode\n            name=country,\n            line=dict(\n                color=color,\n                width=3\n            ),\n            marker=dict(\n                size=8,\n                line=dict(width=2, color=color),\n                symbol='circle'\n            ),\n            hovertemplate=(\n                \"&lt;b&gt;%{data.name}&lt;/b&gt;&lt;br&gt;\" +\n                \"Year: %{x}&lt;br&gt;\" +\n                \"Mortality Rate: %{y:.1f} per 1,000&lt;br&gt;\" +\n                \"&lt;extra&gt;&lt;/extra&gt;\"\n            )\n        ))\n    \n    # Add futuristic grid lines\n    if len(years) &gt; 0:\n        year_min = min(years)\n        year_max = max(years)\n        year_range = list(range(year_min, year_max + 1, 2))  # Every 2 years\n        \n        for year in year_range:\n            fig.add_shape(\n                type=\"line\",\n                x0=year,\n                y0=0,\n                x1=year,\n                y1=df['Mortality Rate per 1,000 infants aged 1 month'].max() * 1.1,\n                line=dict(\n                    color=\"rgba(0, 100, 200, 0.2)\",\n                    width=1,\n                    dash=\"dot\"\n                )\n            )\n    \n    mortality_max = df['Mortality Rate per 1,000 infants aged 1 month'].max()\n    mortality_steps = np.linspace(0, mortality_max, 6)\n    \n    for mort in mortality_steps:\n        fig.add_shape(\n            type=\"line\",\n            x0=min(years) if len(years) &gt; 0 else START_YEAR,\n            y0=mort,\n            x1=max(years) if len(years) &gt; 0 else END_YEAR,\n            y1=mort,\n            line=dict(\n                color=\"rgba(0, 100, 200, 0.2)\",\n                width=1,\n                dash=\"dot\"\n            )\n        )\n    \n    # Update layout with cyberpunk styling\n    fig.update_layout(\n        title=dict(\n            text=\"&lt;b&gt;BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)&lt;/b&gt;\",\n            font=dict(\n                size=24,\n                color=\"rgb(0, 255, 255)\"\n            ),\n            x=0.5,\n            xanchor=\"center\"\n        ),\n        xaxis=dict(\n            title=dict(\n                text=\"Year\",\n                font=dict(\n                    size=14,\n                    color=\"rgb(0, 200, 255)\"\n                )\n            ),\n            showgrid=False,\n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            zeroline=False,\n            showline=True,\n            linecolor=\"rgba(0, 200, 255, 0.5)\",\n            linewidth=2,\n            tickfont=dict(\n                color=\"rgb(150, 150, 150)\"\n            ),\n            # Set x-axis range to exactly 2002-2022\n            range=[START_YEAR-0.5, END_YEAR+0.5]\n        ),\n        yaxis=dict(\n            title=dict(\n                text=\"Infant Mortality Rate (per 1,000)\",\n                font=dict(\n                    size=14,\n                    color=\"rgb(0, 200, 255)\"\n                )\n            ),\n            showgrid=False,\n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            zeroline=False,\n            showline=True,\n            linecolor=\"rgba(0, 200, 255, 0.5)\",\n            linewidth=2,\n            tickfont=dict(\n                color=\"rgb(150, 150, 150)\"\n            )\n        ),\n        plot_bgcolor=\"rgb(5, 5, 20)\",\n        paper_bgcolor=\"rgb(5, 5, 20)\",\n        font=dict(\n            family=\"Arial\",\n            color=\"rgb(200, 200, 200)\"\n        ),\n        height=700,\n        width=1100,\n        legend=dict(\n            font=dict(\n                family=\"Arial\",\n                size=10,\n                color=\"rgb(200, 200, 200)\"\n            ),\n            bgcolor=\"rgba(5, 5, 20, 0.8)\",\n            bordercolor=\"rgba(0, 200, 255, 0.3)\",\n            borderwidth=1\n        ),\n        margin=dict(l=80, r=30, t=100, b=80)\n    )\n    \n    # Add scan line effect for cyberpunk aesthetic\n    for i in range(0, 700, 10):\n        opacity = 0.03 if i % 20 == 0 else 0.01\n        fig.add_shape(\n            type=\"rect\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=0,\n            y0=i/700,\n            x1=1,\n            y1=(i+1)/700,\n            line=dict(width=0),\n            fillcolor=f\"rgba(0, 150, 255, {opacity})\",\n            layer=\"above\"\n        )\n    \n    # Add BRICS-specific annotation\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.99,\n        text=\"BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA ‚Ä¢ EGYPT ‚Ä¢ ETHIOPIA ‚Ä¢ IRAN ‚Ä¢ SAUDI ARABIA ‚Ä¢ UAE\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(255, 255, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    # Add cyberpunk-style annotations\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.01,\n        y=0.99,\n        text=\"SYSTEM ACTIVE\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(0, 255, 0)\"\n        ),\n        align=\"left\",\n        bgcolor=\"rgba(0, 30, 0, 0.7)\"\n    )\n    \n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.02,\n        text=\"UNICEF DATA INTERFACE // HOVER FOR DETAILS // GLOBAL MONITORING SYSTEM\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=10,\n            color=\"rgb(0, 200, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    # Show figure\n    fig.show()\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n    \n    # Create a very simple fallback visualization with static data for BRICS\n    fig = go.Figure()\n    \n    # Static sample data for BRICS nations - 2002-2022 only\n    years = list(range(2002, 2023))\n    country_data = {\n        \"Brazil\": [40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10],\n        \"Russia\": [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5],\n        \"India\": [75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 28, 26, 24, 22, 20],\n        \"China\": [45, 42, 39, 36, 33, 30, 27, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 6, 5],\n        \"South Africa\": [60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30]\n    }\n    \n    # Neon colors \n    colors = {\n        \"Brazil\": \"rgb(0, 255, 120)\",     # Neon Green\n        \"Russia\": \"rgb(255, 50, 255)\",    # Neon Pink\n        \"India\": \"rgb(255, 180, 0)\",      # Neon Orange\n        \"China\": \"rgb(255, 50, 50)\",      # Neon Red\n        \"South Africa\": \"rgb(80, 200, 255)\" # Neon Blue\n    }\n    \n    for country, values in country_data.items():\n        color = colors.get(country, \"rgb(200, 200, 200)\")\n        \n        # Add glow effect\n        fig.add_trace(go.Scatter(\n            x=years,\n            y=values,\n            mode='lines',\n            line=dict(color=color.replace('rgb', 'rgba').replace(')', ', 0.3)'), width=15),\n            showlegend=False\n        ))\n        \n        # Add main line - without text\n        fig.add_trace(go.Scatter(\n            x=years,\n            y=values,\n            mode='lines+markers',  # Removed text\n            name=country,\n            line=dict(color=color, width=3),\n            marker=dict(size=10)\n        ))\n    \n    fig.update_layout(\n        title=\"BRICS NATIONS: INFANT MORTALITY TRENDS (2002-2022)\",\n        plot_bgcolor=\"rgb(5, 5, 20)\",\n        paper_bgcolor=\"rgb(5, 5, 20)\",\n        font=dict(color=\"rgb(200, 200, 200)\"),\n        xaxis=dict(\n            title=\"Year\", \n            gridcolor=\"rgba(0, 100, 200, 0.2)\",\n            range=[2001.5, 2022.5]\n        ),\n        yaxis=dict(title=\"Infant Mortality Rate (per 1,000)\", gridcolor=\"rgba(0, 100, 200, 0.2)\")\n    )\n    \n    # Add BRICS annotation\n    fig.add_annotation(\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.99,\n        text=\"BRAZIL ‚Ä¢ RUSSIA ‚Ä¢ INDIA ‚Ä¢ CHINA ‚Ä¢ SOUTH AFRICA\",\n        showarrow=False,\n        font=dict(\n            family=\"Arial\",\n            size=12,\n            color=\"rgb(255, 255, 255)\"\n        ),\n        align=\"center\",\n        bgcolor=\"rgba(0, 20, 40, 0.7)\"\n    )\n    \n    fig.show()\n\n\nLoaded from 'unicef_data.csv'\nFound BRICS countries: ['Brazil', 'India', 'China', 'South Africa', 'Egypt', 'Ethiopia', 'Saudi Arabia', 'United Arab Emirates']\n\n\n                            \n                                            \n\n\n\n\nBRICS Nations: Infant Mortality Progress (2002‚Äì2022)\n\n\n&lt;img src=\"images/India.jpg\" alt=\"Mother and infant in India\" style=\"max-width:60%; height:auto; border-radius:5px; box-shadow:0 4px 8px rgba(0,0,0,0.2);\"&gt;\n&lt;p style=\"font-style:italic; margin-top:8px; color:#555;\"&gt;\n  A mother holds her infant in rural India, representing the human impact of healthcare improvements that have significantly reduced infant mortality rates across BRICS nations.\n&lt;/p&gt;\n\n\nThe visualization reveals dramatic improvements in infant survival across BRICS nations over the past two decades. India and China achieved the most substantial reductions (60‚Äì75%), while South Africa progressed more slowly due to HIV/AIDS challenges. Economic growth strongly correlates with mortality reduction rates, with the visualization showing clear convergence ‚Äî by 2022, most original BRICS members achieved rates below 20 per 1,000.\n\n\nThe newly expanded BRICS membership displays varied patterns, with Ethiopia starting from the highest rates (around 95 per 1,000) but making significant progress. Gulf states like Saudi Arabia and UAE leveraged their economic strength to achieve some of the lowest rates among member nations. Despite these improvements, disparities persist, particularly in rural areas where healthcare access remains challenging.\n\n\nThese trends reflect successful implementation of:\n\n\n\nMaternal education programs\n\n\nExpanded healthcare infrastructure\n\n\nComprehensive immunization campaigns\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Load & clean data\ndf = pd.read_csv('unicef_data.csv')\nmeta = pd.read_csv('unicef_metadata.csv')\n\ndf['Country'] = df['Country '].str.strip().replace('United States of America', 'United States')\nmeta['Country'] = meta['Country '].str.strip().replace('United States of America', 'United States')\n\n# Define G7\nG7 = ['Canada', 'France', 'Germany', 'Italy', 'Japan', 'United Kingdom', 'United States']\n\n# Filter mortality data\nmort = (\n    df[df['Country'].isin(G7) & df['Year'].between(2012, 2022)]\n    [['Country', 'Year', 'Mortality Rate per 1,000 infants aged 1 month']]\n    .rename(columns={'Mortality Rate per 1,000 infants aged 1 month': 'Mortality'})\n)\n\n# Filter GDP data\nmeta_sub = meta[meta['Year'].between(2012, 2022)].copy()\nmeta_sub['GDP_pc'] = (\n    meta_sub['GDP per capita (constant 2015 US$)']\n    .replace(r'[\\$,]', '', regex=True)\n    .astype(float)\n)\ngdp = meta_sub[meta_sub['Country'].isin(G7)][['Country', 'Year', 'GDP_pc']]\n\n# Merge and pivot\nmerged = mort.merge(gdp, on=['Country', 'Year'], how='inner')\nyears = list(range(2012, 2023))\n\nmort_mat = (\n    merged.pivot(index='Country', columns='Year', values='Mortality')\n    .reindex(index=G7, columns=years)\n)\ngdp_mat = (\n    merged.pivot(index='Country', columns='Year', values='GDP_pc')\n    .reindex(index=G7, columns=years)\n)\n\n# Build heatmap with dual hover info\ncustom = np.dstack([mort_mat.values, gdp_mat.values])\nfig = go.Figure(go.Heatmap(\n    z=mort_mat.values,\n    x=years,\n    y=G7,\n    customdata=custom,\n    colorscale='Turbo',\n    colorbar=dict(title='‚Ä∞ Mortality'),\n    hovertemplate=(\n        \"Country: %{y}&lt;br&gt;\"\n        \"Year: %{x}&lt;br&gt;\"\n        \"Mortality: %{z:.1f} ‚Ä∞&lt;br&gt;\"\n        \"GDP per Capita: $%{customdata[1]:,.0f}&lt;extra&gt;&lt;/extra&gt;\"\n    )\n))\n\n# Update layout\nfig.update_layout(\n    template=\"simple_white\",\n    height=650,      # &lt;&lt;&lt; Increased height\n    width=950,       # &lt;&lt;&lt; Increased width\n    title=dict(\n        text='&lt;b&gt;&lt;u&gt;Infant Mortality & GDP per Capita (2012‚Äì2022) ‚Äî G7 Comparison&lt;/u&gt;&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(size=24, family=\"Arial, sans-serif\", color=\"#004080\"),  # Slightly larger title\n        pad=dict(t=20, b=10)\n    ),\n    xaxis_title=\"Year\",\n    yaxis_title=\"Country\",\n    margin=dict(l=80, r=80, t=180, b=80)  # &lt;&lt;&lt; More top margin, no autoexpand\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nG7 Must Cancel the Debt of the World‚Äôs Poorest Nations\n\n\n&lt;img src=\"images/Debt.jpeg\" alt=\"Cancel Debt Protest\" style=\"max-width:65%; height:auto; border-radius:5px; box-shadow:0 3px 6px rgba(0,0,0,0.2);\"&gt;\n\n\nWhile G7 countries enjoy some of the lowest infant mortality rates on earth‚Äîoften under 5 deaths per 1,000 live births‚Äîmany low-income nations continue to suffer infant and child mortality rates above 80 per 1,000.\nThese disparities are rooted not only in healthcare access but in the crushing burden of sovereign debt, which diverts scarce government resources away from hospitals, clinics, and basic public health programs.\n\n\nBy forgiving or restructuring the illicit and unsustainable debts of the world‚Äôs poorest countries, G7 governments could unlock billions in fiscal space for:\n\n\n\n‚ñ™Ô∏è Expanding maternal and neonatal care facilities\n\n\n‚ñ™Ô∏è Hiring and training community health workers\n\n\n‚ñ™Ô∏è Scaling up immunization and nutrition programs\n\n\n‚ñ™Ô∏è Investing in clean water, sanitation, and emergency response\n\n\n\nDebt cancellation isn‚Äôt charity‚Äîit‚Äôs a strategic investment in global health security and human rights. As leaders of the world‚Äôs largest economies, G7 nations have both the capacity and the moral imperative to ensure that no child‚Äôs chance at life is mortgaged to external creditors.\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\n\ndf = pd.read_csv('unicef_data.csv')\ndf.columns = df.columns.str.strip()\n\nts = (\n    df\n    .groupby(\"Year\")[\"Mortality Rate per 1,000 infants aged 1 month\"]\n    .mean()\n    .reset_index(name=\"Avg_Mortality\")\n)\n\n# Fit an OLS trend to the historical data\ncoef = np.polyfit(ts[\"Year\"], ts[\"Avg_Mortality\"], 1)\n\n# Create an extended year range from 1980 through 2035\nyear_min, year_max = 1980, 2035  # Changed to start at 1980 and extend to 2035\nyears_ext = np.arange(year_min, year_max + 1)\ntrend_ext = np.polyval(coef, years_ext)\n\n# 5) Separate past vs. projection\nmask_past = years_ext &lt;= ts[\"Year\"].max()\nmask_proj = years_ext &gt; ts[\"Year\"].max()\n\n# Filter the time series to start from 1980\nts = ts[ts[\"Year\"] &gt;= 1980]\n\n# Build the figure with neon styling\nfig = go.Figure()\n\n# NEON EFFECT 1: Add base dark glow for the main line\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(0, 191, 255, 0.2)\", width=15),\n))\n\n# Add medium glow for the main line\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(0, 191, 255, 0.5)\", width=8),\n))\n\nfig.add_trace(go.Scatter(\n    x=ts[\"Year\"],\n    y=ts[\"Avg_Mortality\"],\n    mode=\"lines+markers\",\n    name=\"Avg Mortality (1980‚Äì2022)\",\n    line=dict(color=\"rgba(0, 191, 255, 1)\", width=3),\n    marker=dict(\n        size=8, \n        color=\"rgba(0, 191, 255, 1)\",\n        line=dict(color=\"white\", width=1)\n    ),\n    hovertemplate=\"Year: %{x}&lt;br&gt;Rate: %{y:.1f} per 1,000&lt;extra&gt;&lt;/extra&gt;\"\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_past],\n    y=trend_ext[mask_past],\n    mode=\"lines\",\n    name=\"Trend Fit (OLS)\",\n    line=dict(color=\"rgba(255, 105, 180, 0.5)\", width=2, dash=\"dash\"),\n    hoverinfo=\"skip\"\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(255, 0, 255, 0.3)\", width=12),\n))\n\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    showlegend=False,\n    line=dict(color=\"rgba(255, 0, 255, 0.5)\", width=6),\n))\n\n# Projected extension to 2035 with neon magenta\nfig.add_trace(go.Scatter(\n    x=years_ext[mask_proj],\n    y=trend_ext[mask_proj],\n    mode=\"lines\",\n    name=\"Projection to 2035\",\n    line=dict(color=\"rgba(255, 0, 255, 1)\", width=3, dash=\"dot\"),\n    hovertemplate=\"Year: %{x}&lt;br&gt;Proj: %{y:.1f} per 1,000&lt;extra&gt;&lt;/extra&gt;\"\n))\n\nsdg_target = 12  # SDG target for infant mortality\nfig.add_trace(go.Scatter(\n    x=[2015, 2035],  # Extended to 2035\n    y=[sdg_target, sdg_target],\n    mode=\"lines\",\n    name=\"SDG Target (‚â§12 per 1,000)\",\n    line=dict(\n        color=\"rgba(50, 205, 50, 0.8)\",\n        width=2,\n        dash=\"dot\"\n    ),\n))\n\n# Layout with neon styling and dark theme\nfig.update_layout(\n    title=dict(\n        text='&lt;b&gt;Global Average Infant Mortality Rate (1980‚Äì2035) with Projection&lt;/b&gt;',\n        x=0.5,\n        xanchor='center',\n        font=dict(\n            size=24, \n            family=\"Arial, sans-serif\", \n            color=\"#00BFFF\"  # Deep sky blue\n        ),\n        pad=dict(t=10, b=10)\n    ),\n    plot_bgcolor=\"rgba(0, 0, 0, 0.95)\",\n    paper_bgcolor=\"rgba(0, 0, 0, 0.95)\",\n    font=dict(\n        family=\"Arial, sans-serif\",\n        size=14,\n        color=\"white\"\n    ),\n    xaxis=dict(\n        title=\"Year\",\n        title_font=dict(\n            size=16,\n            color=\"#00BFFF\"\n        ),\n        showgrid=True,\n        gridcolor=\"rgba(50, 50, 50, 0.5)\",\n        gridwidth=1,\n        range=[1980, 2035],  # Fixed range from 1980 to 2035\n        rangeslider=dict(\n            visible=True,\n            bgcolor=\"rgba(30, 30, 30, 0.95)\",\n            bordercolor=\"rgba(100, 100, 100, 0.5)\"\n        ),\n        rangeselector=dict(\n            buttons=[\n                dict(step=\"all\", label=\"All\"),\n                dict(count=20, step=\"year\", stepmode=\"backward\", label=\"20 Y\"),\n                dict(count=10, step=\"year\", stepmode=\"backward\", label=\"10 Y\"),\n                dict(count=5, step=\"year\", stepmode=\"backward\", label=\"5 Y\"),\n            ],\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            activecolor=\"rgba(0, 191, 255, 0.3)\"\n        ),\n        tickmode='linear',\n        tick0=1980,\n        dtick=5,\n        tickfont=dict(color=\"white\")\n    ),\n    yaxis=dict(\n        title=\"Deaths per 1,000 Infants\",\n        title_font=dict(\n            size=16,\n            color=\"#00BFFF\"\n        ),\n        showgrid=True,\n        gridcolor=\"rgba(50, 50, 50, 0.5)\",\n        gridwidth=1,\n        rangemode=\"tozero\",\n        tickfont=dict(color=\"white\")\n    ),\n    height=650,\n    width=1000,\n    hovermode=\"x unified\",\n    margin=dict(l=80, r=80, t=80, b=80),\n    legend=dict(\n        font=dict(color=\"white\", size=12),\n        bgcolor=\"rgba(0, 0, 0, 0.7)\",\n        bordercolor=\"rgba(255, 255, 255, 0.2)\",\n        borderwidth=1\n    ),\n    annotations=[\n        dict(\n            text=f\"Trend Equation: y = {coef[0]:.2f}x + {coef[1]:.2f}\",\n            xref=\"paper\", yref=\"paper\",\n            x=0.02, y=0.05,\n            showarrow=False,\n            font=dict(size=12, color=\"rgba(200, 200, 200, 0.8)\"),\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            borderpad=4\n        ),\n        dict(\n            text=f\"2035 Projection: ‚âà {trend_ext[-1]:.1f} per 1,000\",\n            xref=\"x\", yref=\"y\",\n            x=2033, y=trend_ext[-1],\n            showarrow=True,\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"rgba(255, 0, 255, 0.8)\",\n            font=dict(size=12, color=\"rgba(255, 0, 255, 0.8)\"),\n            bgcolor=\"rgba(0, 0, 0, 0.7)\",\n            bordercolor=\"rgba(255, 0, 255, 0.5)\",\n            borderpad=4,\n            ax=50, ay=-40\n        )\n    ]\n)\n\nfig.update_xaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"rgba(50, 50, 50, 0.3)\",\n    zeroline=False\n)\n\nfig.update_yaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"rgba(50, 50, 50, 0.3)\",\n    zeroline=False\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nüìâ Global Infant Mortality Rate (1980‚Äì2035) ‚Äî Neon Trend & Projection\n\n\nThis neon-styled chart visualizes the global decline in infant mortality from ‚âà90 deaths per 1,000 in 1980 to just ‚âà14 per 1,000 in 2022. The chart also includes a trendline projection showing a possible drop to ‚âà6 per 1,000 by 2035, well beyond the SDG target of ‚â§12 by 2030.\n\n\nüìà Observed Trends\n\n\n\n1980‚Äì2000: Rapid decline (~1.7 fewer deaths/year) due to immunization campaigns and oral rehydration therapy.\n\n\n2000‚Äì2015: Continued progress (~1.4 deaths/year) supported by expanded maternal care and health system investments.\n\n\nPost-2015: Signs of plateauing in many countries‚Äîslower progress as inequality and fragility persist.\n\n\n\nüîÆ Projection to 2035\n\n\n\nThe magenta-glow line shows the OLS trendline projection from 2022 to 2035.\n\n\nThe projected rate by 2035 is ‚âà6 per 1,000 infants, assuming the historical trend continues.\n\n\nThe neon green dashed line represents the SDG Target of ‚â§12 deaths per 1,000 infants by 2030.\n\n\n\nüéØ Policy Implications\n\n\n\nLast-Mile Focus: Reach high-burden zones with weak infrastructure‚Äîrural areas, conflict zones, and urban slums.\n\n\nDigital Health Equity: Use district-level dashboards to target interventions and monitor change in real time.\n\n\nNeonatal Innovation: Expand use of affordable newborn monitoring, diagnostics, and remote care.\n\n\nPost-2030 Planning: Frame a long-term strategy to sustain momentum and reduce preventable deaths beyond the SDGs.\n\n\n\n‚ÄúEvery drop in the curve represents lives saved. With continued global focus, 2035 could mark a new era of child survival.‚Äù"
  }
]